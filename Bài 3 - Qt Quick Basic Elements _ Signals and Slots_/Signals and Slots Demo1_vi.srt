1
00:00:00,000 --> 00:00:02,159
Trong bài giảng này, ta sẽ tìm hiểu

2
00:00:02,159 --> 00:00:04,170
tín hiệu (signal) và khe cắm (slot) trong Qt Quick

3
00:00:04,170 --> 00:00:07,200
Hãy mở Qt Creator và làm

4
00:00:07,200 --> 00:00:09,929
điều đó. Được rồi ở đây ta đang ở trong Qt Creator.

5
00:00:09,929 --> 00:00:13,160
Ta sẽ tạo dự án của mình, "File"

6
00:00:13,160 --> 00:00:16,460
=> "New project". Đó là một "Qt quick application".

7
00:00:16,460 --> 00:00:20,100
Ta gọi nó là SignalsAndSlotsDemo, lưu lại

8
00:00:20,100 --> 00:00:25,189
nó ở một khe cắm (slot) trên ổ đĩa. Nhấn "Next".

9
00:00:25,189 --> 00:00:31,740
chọn phiên bản Qt, chọn Kit

10
00:00:31,740 --> 00:00:36,989
và "Finish". Ta muốn thay đổi tiêu đề

11
00:00:36,989 --> 00:00:46,610
ở đây để "Signal and Slots Demo". Và

12
00:00:46,610 --> 00:00:48,809
bên trong ta muốn đặt một thành phần "Rectangle"

13
00:00:48,809 --> 00:00:51,899
Id sẽ là

14
00:00:51,899 --> 00:00:56,039
rectangleId. Nó sẽ có chiều rộng

15
00:00:56,039 --> 00:01:01,530
là 200 và chiều cao là 300. Và ta muốn

16
00:01:01,530 --> 00:01:06,360
nó có màu đỏ. Bên trong ta muốn

17
00:01:06,360 --> 00:01:10,650
đặt một MouseArea. Ta muốn nó tràn ra

18
00:01:10,650 --> 00:01:13,500
phần tử cha. Và nó sẽ phủ kín

19
00:01:13,500 --> 00:01:16,860
hình chữ nhật ở đây, phần tử cha của nó. Và ta muốn

20
00:01:16,860 --> 00:01:19,350
biết khi nào nó được nhấp. Ta đã biết

21
00:01:19,350 --> 00:01:22,770
làm điều đó như thế nào. Bây giờ ta muốn xác định

22
00:01:22,770 --> 00:01:25,710
tín hiệu (signal) đầu tiên. Ta xác định tín hiệu (signal) bằng cách sử dụng

23
00:01:25,710 --> 00:01:28,170
cú pháp đã thấy trước đây. Như vậy, ta gõ

24
00:01:28,170 --> 00:01:30,900
"signal", ta gõ tên của tín hiệu (signal)

25
00:01:30,900 --> 00:01:32,970
giống như tên của

26
00:01:32,970 --> 00:01:35,340
chức năng. Và ta truyền vào các tham số

27
00:01:35,340 --> 00:01:38,280
cho tín hiệu (signal). Một điều đặc biệt

28
00:01:38,280 --> 00:01:40,380
cần biết là ta cần phải truyền vào

29
00:01:40,380 --> 00:01:42,899
kiểu dữ liệu cho các tham số mà ta

30
00:01:42,899 --> 00:01:45,540
truyền trong các tín hiệu (signal). Như vậy, trong trường hợp của chúng ta, nó

31
00:01:45,540 --> 00:01:47,430
sẽ là một chuỗi (string) và ta sẽ

32
00:01:47,430 --> 00:01:50,070
để gọi nó là "message". Và chỉ bằng cách này

33
00:01:50,070 --> 00:01:53,070
ta đang khai báo tín hiệu (signal) của mình. Hãy

34
00:01:53,070 --> 00:01:58,200
gắn cờ cho nó. Thông thường sau khi xác định tín hiệu (signal)

35
00:01:58,200 --> 00:02:00,000
ta muốn gửi nó, xuất nó ra.

36
00:02:00,000 --> 00:02:02,340
Ta muốn mọi người quan tâm đến dữ liệu của mình

37
00:02:02,340 --> 00:02:04,890
để biết rằng dữ liệu đã được gửi. Và

38
00:02:04,890 --> 00:02:07,110
cách làm là chỉ cần gọi

39
00:02:07,110 --> 00:02:07,680
tín hiệu (signal)

40
00:02:07,680 --> 00:02:08,250
ra như một phương thức (method).

41
00:02:08,250 --> 00:02:10,800
Và truyền bất kỳ tham số mà ta có

42
00:02:10,800 --> 00:02:13,200
để truyền vào. Trong trường hợp này, ta sẽ

43
00:02:13,200 --> 00:02:15,690
vào trong trình xử lý onClicked cảu

44
00:02:15,690 --> 00:02:20,900
MouseArea và ta nói lời chào

45
00:02:21,380 --> 00:02:27,360
"Hello there". Được rồi, ta đang gửi

46
00:02:27,360 --> 00:02:32,610
tín hiệu (signal) ở đây. Và bất kỳ đối tượng nào quan tâm

47
00:02:32,610 --> 00:02:34,800
sẽ biết rằng ta đã gửi tin nhắn này

48
00:02:34,800 --> 00:02:37,770
ở đây. Được rồi, ta đã bắn tín hiệu (signal) "chào" và

49
00:02:37,770 --> 00:02:40,739
nó có một tham số là một chuỗi (string).

50
00:02:40,739 --> 00:02:43,620
Bởi vì ta chỉ định kiểu dữ liệu chuỗi (string)

51
00:02:43,620 --> 00:02:47,520
ở đây. Được rồi, hãy hoàn thành nó. Bây giờ ta

52
00:02:47,520 --> 00:02:50,430
có tín hiệu (signal) của mình, cần xác định một khe cắm (slot)

53
00:02:50,430 --> 00:02:52,489
mà ta muốn kết nối với nó. Và

54
00:02:52,489 --> 00:02:55,380
hãy nhớ một khe cắm (slot) là một hàm JavaScript

55
00:02:55,380 --> 00:02:58,920
bình thường. Được rồi, như vậy ta cũng có thể định nghĩa

56
00:02:58,920 --> 00:03:03,330
khe cắm (slot) bên trong hình chữ nhật này ở đây. Như vậy

57
00:03:03,330 --> 00:03:09,720
hàm myGreet và bạn truyền vào một

58
00:03:09,720 --> 00:03:12,870
tham số. Hãy gọi nó là mMessage để

59
00:03:12,870 --> 00:03:15,440
có những thứ hơi khác một chút. Và

60
00:03:15,440 --> 00:03:17,880
bên trong ta có thể làm bất cứ điều gì mình muốn, thật vậy.

61
00:03:17,880 --> 00:03:20,489
Trong trường hợp này, ta dùng console.log

62
00:03:20,489 --> 00:03:26,940
tham số ở đây "myGreet slot

63
00:03:26,940 --> 00:03:35,580
called ... " và ta gõ tham số là gì.

64
00:03:35,580 --> 00:03:39,570
Và nó sẽ là mMessage như ta

65
00:03:39,570 --> 00:03:43,440
có ở đây. Bây giờ ta có một khe cắm (slot). Ta

66
00:03:43,440 --> 00:03:45,930
có tín hiệu (signal), làm sao để kết nối chúng?

67
00:03:45,930 --> 00:03:48,329
Ta muốn kết nối chúng khi các

68
00:03:48,329 --> 00:03:51,810
thành phần này ở đây được tải hoàn toàn. Vì thế

69
00:03:51,810 --> 00:03:54,410
ta sẽ gõ Component.onCompleted.

70
00:03:54,410 --> 00:03:58,590
Được rồi lưu ý rằng tín hiệu (signal) này

71
00:03:58,590 --> 00:04:01,079
là ở cấp độ gốc (root level) của hình chữ nhật này

72
00:04:01,079 --> 00:04:02,880
đây và hình chữ nhật chứa

73
00:04:02,880 --> 00:04:05,670
thành phần này. Vì vậy, ta không cần phải gọi

74
00:04:05,670 --> 00:04:08,400
tín hiệu (signal) này bằng cách truyền vào "id" ở đây. Nhưng bạn

75
00:04:08,400 --> 00:04:10,230
có thể truyền vào nếu muốn. Nhưng trong

76
00:04:10,230 --> 00:04:12,690
trường hợp này, để dễ đọc ta sẽ không

77
00:04:12,690 --> 00:04:15,570
đặt nó vào. Vì vậy, ta sẽ gõ greet.connect.

78
00:04:15,570 --> 00:04:19,649
Đây là cách ta làm điều đó. Và chúng ta

79
00:04:19,649 --> 00:04:22,139
muốn truyền vào tên của khe cắm (slot)

80
00:04:22,139 --> 00:04:24,990
mà ta muốn kết nối tới. Khe cắm (slot) là

81
00:04:24,990 --> 00:04:29,189
sẽ là myGreet. Và giống như

82
00:04:29,189 --> 00:04:32,189
cái này ta đã kết nối tín hiệu (signal) này

83
00:04:32,189 --> 00:04:35,159
chính là greet tới khe cắm (slot) đó là myGreet.

84
00:04:35,159 --> 00:04:37,409
Như vậy, điều gì sẽ xảy ra khi ta

85
00:04:37,409 --> 00:04:39,120
chạy ứng dụng? Ta sẽ có

86
00:04:39,120 --> 00:04:40,740
một hình chữ nhật. Chúng ta sẽ có

87
00:04:40,740 --> 00:04:42,930
chiều rộng này. Nó sẽ có màu đỏ này.

88
00:04:42,930 --> 00:04:45,629
Khi chúng ta bấm vào hình chữ nhật

89
00:04:45,629 --> 00:04:48,210
được bao phủ bởi MouseArea. Ta sẽ

90
00:04:48,210 --> 00:04:50,550
phát tín hiệu (signal) greet và

91
00:04:50,550 --> 00:04:53,159
truyền vào "Hello there". Khi có tín hiệu (signal)

92
00:04:53,159 --> 00:04:55,379
được phát ra nhờ kết nối này

93
00:04:55,379 --> 00:04:58,319
ở đây khe cắm (slot) này sẽ được gọi và

94
00:04:58,319 --> 00:05:00,659
ta sẽ thấy tham số đó

95
00:05:00,659 --> 00:05:03,330
được truyền chính là kết quả của

96
00:05:03,330 --> 00:05:05,310
kết nối này. Ta sẽ thấy "Hello

97
00:05:05,310 --> 00:05:07,590
there" ngay cả khi ta không gõ nó ở đây.

98
00:05:07,590 --> 00:05:11,849
Hãy chạy ứng dụng. Mm-hmm ... ta

99
00:05:11,849 --> 00:05:15,330
ở đây. Khi nhấp, ta sẽ thấy

100
00:05:15,330 --> 00:05:17,370
trong console tin nhắn từ hàm myGreet

101
00:05:17,370 --> 00:05:19,800
và chuỗi mà chúng ta

102
00:05:19,800 --> 00:05:23,550
truyền vào khi ta gọi

103
00:05:23,550 --> 00:05:27,419
tín hiệu (signal) greet ở đây. Ok, chúc may mắn.

104
00:05:27,419 --> 00:05:34,289
Hãy nhấp vào. "Greet is not defined", tại sao

105
00:05:34,289 --> 00:05:38,610
lại thế? Mm-hmm ... có vẻ như tôi đã sai. Ta

106
00:05:38,610 --> 00:05:41,669
phải truyền vào "id" của thành phần

107
00:05:41,669 --> 00:05:44,189
trong đó tín hiệu (signal) được xác định. Vì vậy

108
00:05:44,189 --> 00:05:50,009
ta sẽ gõ rectangle, tôi sẽ ở đây, greet.

109
00:05:50,009 --> 00:05:52,500
Và ta sẽ làm như vậy. Bất cứ nơi nào

110
00:05:52,500 --> 00:05:56,759
ta nhắc đến tín hiệu (signal) và ta làm

111
00:05:56,759 --> 00:06:00,120
tương tự với các khe cắm (slot) nữa. Được rồi,

112
00:06:00,120 --> 00:06:02,699
đây là một hướng học tập tốt. Ta cần phải

113
00:06:02,699 --> 00:06:04,800
nhớ lấy điều này. Bất cứ khi nào ta kết nối

114
00:06:04,800 --> 00:06:06,509
tín hiệu (signal) đến các khe cắm (slot), ta cần phải truyền vào

115
00:06:06,509 --> 00:06:12,449
"id" này ở đây. Hãy chạy lại. Nếu chúng ta

116
00:06:12,449 --> 00:06:15,539
nhấp vào ta nói "myGreeting slot called. The

117
00:06:15,539 --> 00:06:18,509
parameter is: Hello there". Được rồi, ta đã

118
00:06:18,509 --> 00:06:22,649
kết nối thành công tín hiệu (signal) này với

119
00:06:22,649 --> 00:06:25,409
khe cắm (slot) này. Và cú pháp ta sử dụng là đây

120
00:06:25,409 --> 00:06:28,560
một, ta thực thi tín hiệu (signal) kết nối và

121
00:06:28,560 --> 00:06:31,050
truyền vào khe cắm (slot) của ta. Và ta cần tham khảo

122
00:06:31,050 --> 00:06:34,169
đến các thành phần nơi tín hiệu (signal) và

123
00:06:34,169 --> 00:06:35,430
các khe cắm (slot) được định vị.

124
00:06:35,430 --> 00:06:38,210
Trong bài giảng trước tôi đã đề cập rằng

125
00:06:38,210 --> 00:06:40,680
giống như khi ta xác định một thuộc tính

126
00:06:40,680 --> 00:06:43,229
ở đây và ta có một trình xử lý tự động

127
00:06:43,229 --> 00:06:45,150
tạo ra cho ta. Ví dụ, nếu gõ

128
00:06:45,150 --> 00:06:48,389
onColor ta thấy rằng ta có một trình xử lý

129
00:06:48,389 --> 00:06:51,000
tên là onColorChanged. Và ta có

130
00:06:51,000 --> 00:06:52,889
điều tương tự với mọi thuộc tính mà ta có

131
00:06:52,889 --> 00:06:55,620
được định nghĩa ở đây. Theo cách tương tự khi ta

132
00:06:55,620 --> 00:06:57,660
xác định một tín hiệu (signal) ở đây ta có một

133
00:06:57,660 --> 00:07:00,479
xử lý tự động cho biết tên của

134
00:07:00,479 --> 00:07:02,009
tín hiệu (signal). Ví dụ, ta có thể có

135
00:07:02,009 --> 00:07:07,229
xử lý tên là onGreet và nó

136
00:07:07,229 --> 00:07:10,860
được thực thi bất cứ khi nào tín hiệu (signal) này là

137
00:07:10,860 --> 00:07:15,050
phát ra. Được rồi, ta hãy thử điều này. Và

138
00:07:15,050 --> 00:07:21,240
console.log. Gõ "onGreet: Greet

139
00:07:21,240 --> 00:07:29,849
signal emitted". Chạy lại. Nhấp chuột

140
00:07:29,849 --> 00:07:33,120
vào đây. Ta thấy rằng phương thức này được gọi

141
00:07:33,120 --> 00:07:37,229
bất cứ khi nào tín hiệu (signal) được phát ra. Đuợc rồi,

142
00:07:37,229 --> 00:07:39,210
nếu ta thích làm gì đó

143
00:07:39,210 --> 00:07:41,520
Khi tín hiệu (signal) này được phát ra, ta có thể làm

144
00:07:41,520 --> 00:07:44,010
điều đó ở đây. Được rồi, hành vi

145
00:07:44,010 --> 00:07:46,020
là giống nhau như khi ta nhìn thấy

146
00:07:46,020 --> 00:07:51,229
sự thay đổi chiều rộng trong onWidthChanged

147
00:07:51,229 --> 00:07:55,289
ở đây. Để thử điều này, tôi

148
00:07:55,289 --> 00:07:58,139
sẽ xác định một thuộc tính ở đây. Bên trong

149
00:07:58,139 --> 00:08:00,330
cấp độ gốc (root level) của cửa sổ (window) tôi sẽ

150
00:08:00,330 --> 00:08:03,750
gõ thuộc tính là nguyên. Hãy gọi nó là

151
00:08:03,750 --> 00:08:10,400
"increment" và gán cho nó giá trị là 50.

152
00:08:10,400 --> 00:08:13,770
Ta sẽ làm cho chiều rộng của

153
00:08:13,770 --> 00:08:16,320
hình chữ nhật phụ thuộc vào giá trị này.

154
00:08:16,320 --> 00:08:18,270
Vì vậy, ta sẽ tạo một thuộc tính ràng buộc.

155
00:08:18,270 --> 00:08:21,510
Ta sẽ cộng 200 vào

156
00:08:21,510 --> 00:08:26,970
increment và mỗi khi chúng ta phát ra

157
00:08:26,970 --> 00:08:30,030
tín hiệu (signal) greet ta muốn thay đổi

158
00:08:30,030 --> 00:08:34,409
increment trong khe (slot) myGreet ở đây. Vì thế

159
00:08:34,409 --> 00:08:39,229
chúng ta sẽ gõ increment + =

160
00:08:39,229 --> 00:08:43,289
50, sự thực chi là một cách viết khác

161
00:08:43,289 --> 00:08:46,070
của việc increment

162
00:08:46,330 --> 00:08:50,780
bằng increment + 50. Sự giống nhau

163
00:08:50,780 --> 00:08:53,780
trong trường hợp này làm ta bối rối. Đuợc rồi

164
00:08:53,780 --> 00:08:54,950
ngay bây giờ, nếu chúng ta chạy ứng dụng,

165
00:08:54,950 --> 00:08:58,250
mỗi lần nhấp vào MouseArea, ta

166
00:08:58,250 --> 00:08:59,840
sẽ phát ra tín hiệu (signal) greet

167
00:08:59,840 --> 00:09:02,210
bởi vì kết nối đã được thực thi

168
00:09:02,210 --> 00:09:04,640
trong bộ xử lý tín hiệu (signal) chưa hoàn thiện của

169
00:09:04,640 --> 00:09:06,920
thành phần. Ta sẽ gọi tới các khe (slot)

170
00:09:06,920 --> 00:09:09,440
ở đây và chúng ta sẽ tăng

171
00:09:09,440 --> 00:09:11,780
increment ở đây. Khi chúng ta tăng cái này

172
00:09:11,780 --> 00:09:14,390
vì thuộc tính ràng buộc nên

173
00:09:14,390 --> 00:09:17,210
ở đây chiều rộng sẽ thay đổi

174
00:09:17,210 --> 00:09:20,920
hình chữ nhật này. Hãy chạy ứng dụng.

175
00:09:20,920 --> 00:09:24,860
In cái này lên. Nếu nhấp vào ta sẽ thấy rằng

176
00:09:24,860 --> 00:09:26,870
chiều rộng của hình chữ nhật thay đổi và

177
00:09:26,870 --> 00:09:30,350
đây là thuộc tính ràng buộc hiển thị

178
00:09:30,350 --> 00:09:33,320
lại hành động. Và đây thực sự là tất cả.

179
00:09:33,320 --> 00:09:36,380
Có để khai báo tín hiệu (signal), phát ra

180
00:09:36,380 --> 00:09:38,810
tín hiệu (signal) và kết nối chúng với các khe (slot). Trong

181
00:09:38,810 --> 00:09:41,300
bài giảng tiếp theo ta sẽ định nghĩa

182
00:09:41,300 --> 00:09:44,570
hai thành phần bên ngoài gồm: một, phát ra

183
00:09:44,570 --> 00:09:47,120
các tín hiệu (signal) và thành phần khác. Ta sẽ xem xét nó.

184
00:09:47,120 --> 00:00:00,000
Tôi sẽ gặp lại các bạn ở đó.

