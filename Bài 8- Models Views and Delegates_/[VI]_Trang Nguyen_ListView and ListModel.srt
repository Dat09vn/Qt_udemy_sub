1
00:00:00,000 --> 00:00:01,740
Trong bài này, ta sẽ xem

2
00:00:01,740 --> 00:00:04,170
cách làm việc với ListView và ListModel

3
00:00:04,170 --> 00:00:06,930
trong Qt Quick. ListView sẽ

4
00:00:06,930 --> 00:00:10,050
hiển thị dữ liệu, còn ListModel sẽ

5
00:00:10,050 --> 00:00:12,809
kiểm soát cách ta lưu trữ dữ liệu. Ta sẽ

6
00:00:12,809 --> 00:00:14,790
mở Qt Creator và bắt đầu

7
00:00:14,790 --> 00:00:17,340
thực hành. Đây là Qt Creator.

8
00:00:17,340 --> 00:00:18,960
Ta sẽ tạo một

9
00:00:18,960 --> 00:00:19,680
dự án.

10
00:00:19,680 --> 00:00:22,439
Chọn Qt Quick Application như thường lệ.

11
00:00:22,439 --> 00:00:25,289
Ta sẽ gọi nó là ListViewListModelDemo.

12
00:00:25,289 --> 00:00:30,359
Chọn phiên bản Qt,

13
00:00:30,359 --> 00:00:34,320
chọn bộ kit, và Finish. Ta sẽ thay đổi

14
00:00:34,320 --> 00:00:39,390
tiêu đề ở đây thành ListView, ta sẽ cần

15
00:00:39,390 --> 00:00:41,969
bắt đầu bằng cách tạo
một phần tử ListView.

16
00:00:41,969 --> 00:00:53,969
Ta sẽ đặt một ID cho nó.

17
00:00:53,969 --> 00:00:58,350
Ở đây ta để phần tử này phủ hết lên cha của nó và ta cần

18
00:00:58,350 --> 00:01:03,180
có thuộc tính "model" và 

19
00:01:03,180 --> 00:01:06,420
thuộc tính "delegate" cho nó. Ta sẽ không

20
00:01:06,420 --> 00:01:08,909
đặt giá trị cho chúng bây giờ. Ta sẽ

21
00:01:08,909 --> 00:01:10,830
mở phần tài liệu,

22
00:01:10,830 --> 00:01:16,530
gõ "ListView" ở đây. 

23
00:01:16,530 --> 00:01:18,869
Tại chỗ này, ListView hiển thị dữ liệu từ model có sẵn trong
tạo ra từ

24
00:01:18,869 --> 00:01:22,110
qml như ListModel and 

25
00:01:22,110 --> 00:01:24,030
XMLListModel. Ta sẽ xem

26
00:01:24,030 --> 00:01:26,700
XMLListModel sau, giờ
ta cần tập trung vào

27
00:01:26,700 --> 00:01:30,150
model này. ListView có một model

28
00:01:30,150 --> 00:01:32,820
để xác định dữ liệu cần hiển thị,

29
00:01:32,820 --> 00:01:34,860
và một delegate để xác định

30
00:01:34,860 --> 00:01:37,740
cách dữ liệu được hiển thị.
Các item trong danh sách...

31
00:01:37,740 --> 00:01:40,640
sẽ được hiển thị ngang hoặc dọc.

32
00:01:40,640 --> 00:01:43,860
ListView là phần tử có cuộn lên xuống được

33
00:01:43,860 --> 00:01:46,110
và nó kế thừa phần từ Flickable

34
00:01:46,110 --> 00:01:48,000
nên bạn sẽ không cần phải đặt 
các phần tử trong ListView bên trong

35
00:01:48,000 --> 00:01:49,950
trong một phần tử Flickable

36
00:01:49,950 --> 00:01:52,229
mã vẫn có thể cuộn lên/xuống để xem nội dung.

37
00:01:52,229 --> 00:01:55,290
Thuộc tính flickable được đặt true mặc định. Bây giờ,

38
00:01:55,290 --> 00:01:57,570
bạn đã hiểu thêm về ListView,

39
00:01:57,570 --> 00:02:00,090
ta sẽ làm thế nào để
xác định model hoặc

40
00:02:00,090 --> 00:02:03,479
delegate? Hãy bắt đầu từ model.

41
00:02:03,479 --> 00:02:07,320
Ta sẽ tạo phần tử ListModel.

42
00:02:07,320 --> 00:02:12,850
Ta sẽ đặt ID cho nó là mModelID,

43
00:02:12,850 --> 00:02:16,810
và ta sẽ gán nó ở đây

44
00:02:16,810 --> 00:02:19,030
để tránh bị báo lỗi.

45
00:02:19,030 --> 00:02:23,250
Tôi không thích thế, nên ta gõ
mModelId.

46
00:02:23,250 --> 00:02:25,930
Hãy chú thích delegate này ra

47
00:02:25,930 --> 00:02:28,330
để tránh bị báo lỗi. 

48
00:02:28,330 --> 00:02:30,640
Ta đã có ListModel rồi. Ta cần

49
00:02:30,640 --> 00:02:32,380
đưa dữ liệu vào

50
00:02:32,380 --> 00:02:36,160
để ListView hiển thị. Và để làm thế,

51
00:02:36,160 --> 00:02:38,650
ta cần dùng ListElement. Hãy xem

52
00:02:38,650 --> 00:02:45,550
"list element" trong tài liệu.

53
00:02:45,550 --> 00:02:48,580
Xem phần "more". ListElement được
định nghĩa

54
00:02:48,580 --> 00:02:52,180
bên trong ListModel và nó mô tả dữ liệu các item

55
00:02:52,180 --> 00:02:54,220
trong danh sách cần được hiển thị

56
00:02:54,220 --> 00:02:58,000
trong ListView hoặc Repeater. Bạn sẽ

57
00:02:58,000 --> 00:02:59,980
đưa dữ liệu vào thế này,
bạn đặt dữ liệu trong

58
00:02:59,980 --> 00:03:03,790
ListElement.

59
00:03:03,790 --> 00:03:07,000
Quay lại với mã nguồn, và thêm vào

60
00:03:07,000 --> 00:03:09,280
một số ListElement mà tôi đã chuẩn bị,

61
00:03:09,280 --> 00:03:12,040
để tiết kiệm thời gian. Nhưng

62
00:03:12,040 --> 00:03:14,019
nó khá đơn giản. Ta tạo một phần tử ListElement

63
00:03:14,019 --> 00:03:16,810
,và bạn sẽ đặt

64
00:03:16,810 --> 00:03:19,180
các thuộc tính và giá trị của thuộc tính.

65
00:03:19,180 --> 00:03:21,519
Trong QML, chúng được gọi là

66
00:03:21,519 --> 00:03:24,700
"role" nhưng bạn có thể

67
00:03:24,700 --> 00:03:26,769
gọi sao cũng được, quan trọng là

68
00:03:26,769 --> 00:03:29,290
bạn biết cách sử dụng chúng.

69
00:03:29,290 --> 00:03:31,570
Ta đã có model và danh sánh item

70
00:03:31,570 --> 00:03:33,970
để hiển thị trong một View

71
00:03:33,970 --> 00:03:36,220
mà sẽ gán model này vào.

72
00:03:36,220 --> 00:03:40,630
Và model này sẽ có hai tập hợp dữ liệu.

73
00:03:40,630 --> 00:03:42,550
Một là "country" (nước) mà
xác định thế này,

74
00:03:42,550 --> 00:03:45,489
và hài là "capital"
của "country"

75
00:03:45,489 --> 00:03:47,470
và được xác định thế này.

76
00:03:47,470 --> 00:03:50,140
Lưu ý rằng các thuộc tính ở đây

77
00:03:50,140 --> 00:03:52,690
có thể là bất cứ điều gì.
Ta ghi "country" và

78
00:03:52,690 --> 00:03:54,910
"capital" ở đây vì đó là những gì

79
00:03:54,910 --> 00:03:57,970
tôi muốn minh họa trong bài giảng này.

80
00:03:57,970 --> 00:03:59,500
Bạn sẽ thấy trong ví dụ này,

81
00:03:59,500 --> 00:04:01,540
bạn có thể đặt nó là gì cũng được.

82
00:04:01,540 --> 00:04:04,000
Tùy thuộc vào việc bạn đang

83
00:04:04,000 --> 00:04:05,590
xây dựng ứng dụng gì, bạn sẽ có

84
00:04:05,590 --> 00:04:08,110
thứ khác được định nghĩa ở đây.

85
00:04:08,110 --> 00:04:10,480
Ta đã có ListModel,

86
00:04:10,480 --> 00:04:12,250
có thể khó tin nhưng ta chỉ cần thế này

87
00:04:12,250 --> 00:04:14,350
để có một model để hiển thị

88
00:04:14,350 --> 00:04:16,540
trong View. Tiếp theo, ta sẽ xác định

89
00:04:16,540 --> 00:04:19,290
delegate. Ta sẽ làm thế nào?

90
00:04:19,290 --> 00:04:21,450
Ta sẽ đi tới phần dưới model,

91
00:04:21,450 --> 00:04:28,140
và gõ "Component". Tới đây, ta đã

92
00:04:28,140 --> 00:04:31,500
sử dụng các phần tử "Component"
như file qml từ bên ngoài,

93
00:04:31,500 --> 00:04:34,020
nhưng bạn có thể định nghĩa

94
00:04:34,020 --> 00:04:36,660
phần tử "Component" ngay tại file mà sẽ dùng nó như thế này.

95
00:04:36,660 --> 00:04:39,330
Cũng giống nhau. Ta sẽ đặt ID cho nó.

96
00:04:39,330 --> 00:04:45,750
Nó sẽ là "delegateID", ở bên trong,

97
00:04:45,750 --> 00:04:48,240
ta sẽ đặt phần tử Rectangle vào.

98
00:04:48,240 --> 00:04:54,330
Ta sẽ đặt tên nó là "rectangleID".

99
00:04:54,330 --> 00:04:57,420
Nó sẽ có chiều rộng bằng với

100
00:04:57,420 --> 00:05:06,320
chiều rộng của parent (phần tử cha),
chiều cao sẽ là 50,

101
00:05:06,320 --> 00:05:10,890
ta sẽ cho nó có màu beige (be).

102
00:05:10,890 --> 00:05:17,310
Viền sẽ có màu yellowgreen (vàng xanh).

103
00:05:17,310 --> 00:05:22,290
Radius (độ cong của góc) bằng 10.

104
00:05:22,290 --> 00:05:24,150
Ta đã có thành phần hình chữ nhật.
Ta sẽ cần

105
00:05:24,150 --> 00:05:27,060
đặt vài dòng chữ trong đó, nên ta sẽ

106
00:05:27,060 --> 00:05:31,560
tạo phần tử Text bên trong.

107
00:05:31,560 --> 00:05:34,800
Tên nó sẽ là "textID". Ta sẽ đặt nó chính giữa

108
00:05:34,800 --> 00:05:41,280
 parent và có pointSize cỡ 20.

109
00:05:41,280 --> 00:05:44,610
Hãy thử xem thế nào.

110
00:05:44,610 --> 00:05:46,560
Ta sắp thấy một làm một việc quan trọng,

111
00:05:46,560 --> 00:05:49,500
từ thành phần này, đó là

112
00:05:49,500 --> 00:05:52,380
Delegate, ta có thể quay lại

113
00:05:52,380 --> 00:05:54,990
đầu trang và gán giá trị cho "delegate".

114
00:05:54,990 --> 00:05:57,930
vì giờ thì ta có nó rồi, ta có thể
đặt gàn là

115
00:05:57,930 --> 00:06:02,280
"delegateID". Khi bạn dùng "model" và

116
00:06:02,280 --> 00:06:04,290
"delegate" trong View

117
00:06:04,290 --> 00:06:07,140
như thế này, nhớ rằng

118
00:06:07,140 --> 00:06:09,780
bạn có thể truy cập vào dữ liệu
trong model

119
00:06:09,780 --> 00:06:13,170
trực tiếp mà không cần phải thực hiện gì thêm.

120
00:06:13,170 --> 00:06:15,390
Ví dụ, ta có thể truy cập

121
00:06:15,390 --> 00:06:18,000
vào thuộc tính "country" và "capital"

122
00:06:18,000 --> 00:06:20,310
từ phần tử mà ta

123
00:06:20,310 --> 00:06:23,940
hiển thị tại delegateID.

124
00:06:23,940 --> 00:06:26,730
Tôi sẽ gõ "text".

125
00:06:26,730 --> 00:06:29,960
Nó sẽ là "country".

126
00:06:29,960 --> 00:06:38,190
"+". Hãy đặt dấu hai chấm ở giữa

127
00:06:38,190 --> 00:06:43,200
và ghi "capital". Lưu ý

128
00:06:43,200 --> 00:06:45,660
đây là các thuộc tính trong model

129
00:06:45,660 --> 00:06:47,850
mà ta đang truy cập.

130
00:06:47,850 --> 00:06:49,920
Ta không cần làm gì nữa.
Ta có thể làm thế này

131
00:06:49,920 --> 00:06:52,320
vì những thứ này được kết nối với nhau

132
00:06:52,320 --> 00:06:54,960
trong ListView như thế này. Bây giờ.

133
00:06:54,960 --> 00:06:57,210
ta có thể chạy ứng dụng và xem

134
00:06:57,210 --> 00:07:01,080
trông nó thế nào. Được rồi.

135
00:07:01,080 --> 00:07:04,470
Ta có một danh sách các phần tử

136
00:07:04,470 --> 00:07:07,560
và ta có "country" và "capital".

137
00:07:07,560 --> 00:07:10,560
Tôi muốn giảm chiều cao của cửa sổ này,

138
00:07:10,560 --> 00:07:12,870
và rõ ràng ta có thể

139
00:07:12,870 --> 00:07:16,260
cuộn lên/xuống để xem dữ liệu.

140
00:07:16,260 --> 00:07:18,960
Nếu bạn có nhiều dữ liệu
và nó không hiển thị hết

141
00:07:18,960 --> 00:07:22,170
trong cửa sổ hiện có, bạn có thể cuộn

142
00:07:22,170 --> 00:07:25,320
để xem tiếp. Đây là hiệu ứng của

143
00:07:25,320 --> 00:07:28,380
thành phần Flickable trong

144
00:07:28,380 --> 00:07:30,990
ListView, và đây thật sự là
cách bạn dùng

145
00:07:30,990 --> 00:07:33,900
ListView và ListModel.

146
00:07:33,900 --> 00:07:37,140
Bạn có thể tạo ListView thế này,

147
00:07:37,140 --> 00:07:40,380
và căn chỉnh vị trí cho nó

148
00:07:40,380 --> 00:07:42,600
giống với các thành phần khác.
Ở đây, ta muốn

149
00:07:42,600 --> 00:07:45,150
nó phủ hết parent, và bạn sẽ gán cho nó

150
00:07:45,150 --> 00:07:48,000
một model bằng cách
đặt ID của model đó.

151
00:07:48,000 --> 00:07:51,210
Model của chúng ta không có gì đặc biệt.

152
00:07:51,210 --> 00:07:53,760
Nó chỉ là một tập hợp ListElement
được đặt trong một phần tử ListModel.

153
00:07:53,760 --> 00:07:56,190
Còn Delegate của chúng ta

154
00:07:56,190 --> 00:07:58,980
là một thành phần như thế này,

155
00:07:58,980 --> 00:08:02,370
và bên trong ta có một hình chữ nhật
chứa phần tử Text.

156
00:08:02,370 --> 00:08:04,700
Nó sẽ chứa

157
00:08:04,700 --> 00:08:07,200
các thuộc tính của ListElement.

158
00:08:07,200 --> 00:08:10,080
Một điều nữa, bạn có thể làm

159
00:08:10,080 --> 00:08:13,590
cho các phần tử bên trong ListView

160
00:08:13,590 --> 00:08:15,870
clickable (click lên được). Để làm thế,

161
00:08:15,870 --> 00:08:19,230
hãy tạo một phần tử MouseArea trong delegate,

162
00:08:19,230 --> 00:08:23,430
gõ "MouseArea". Ta sẽ cho nó

163
00:08:23,430 --> 00:08:28,770
phủ hết parent, và parent sẽ là

164
00:08:28,770 --> 00:08:32,340
 hình chữ nhật này.

165
00:08:32,340 --> 00:08:35,630
Ta sẽ gõ "onClicked"

166
00:08:36,880 --> 00:08:44,540
"console.log("clicked on:")", ta sẽ ghi

167
00:08:44,540 --> 00:08:49,100
"capital". Nhớ rằng chúng ta vẫn đang

168
00:08:49,100 --> 00:08:51,290
nằm trong delegate,
nên ta có thể truy cập dữ liệu

169
00:08:51,290 --> 00:08:56,500
mà không gặp vấn đề gì.
Đặt vào một dấu hai chấm

170
00:08:56,500 --> 00:08:58,600
và ghi "country".

171
00:08:58,600 --> 00:09:06,770
Hãy chạy thử xem.
Các phần tử ta đặt đang nằm đây,

172
00:09:06,770 --> 00:09:09,350
nếu tôi nhấn vào Rwanda, ta thấy nó in ra

173
00:09:09,350 --> 00:09:12,290
"CLicked on Kigali : Rwanda". Hãy nhấn vào

174
00:09:12,290 --> 00:09:14,830
Paris, "Paris France",

175
00:09:14,830 --> 00:09:18,350
Uganda "Kampala Uganda", 

176
00:09:18,350 --> 00:09:20,600
và thưa các bạn đây là cách

177
00:09:20,600 --> 00:09:23,090
làm việc với ListView và ListModel.

178
00:09:23,090 --> 00:09:25,580
ListView sẽ định nghĩa
cách bạn hiển thị dữ liệu,

179
00:09:25,580 --> 00:09:28,100
còn ListModel là nơi để

180
00:09:28,100 --> 00:09:31,910
dữ liệu được lưu lại. Delegate kiểm soát

181
00:09:31,910 --> 00:09:34,970
cách mà mỗi item dữ liệu được hiển thị

182
00:09:34,970 --> 00:09:37,850
trong View. Delegate chính là hình chữ nhật này.

183
00:09:37,850 --> 00:09:40,760
Lưu ý tới phần trang trí

184
00:09:40,760 --> 00:09:43,280
mà ta tạo ra cho delegate này, đây là

185
00:09:43,280 --> 00:09:46,820
kích thước font chữ
mà ta xác định ở đây,

186
00:09:46,820 --> 00:09:49,940
đây là màu be làm nền,

187
00:09:49,940 --> 00:09:53,420
đây là viền màu vàng xanh

188
00:09:53,420 --> 00:09:55,940
mà ta xác định ở đây. Bạn có thể thay đổi

189
00:09:55,940 --> 00:09:58,460
tất cả các thuộc tính của phần tử

190
00:09:58,460 --> 00:10:01,280
được hiển thị trong delegate mà

191
00:10:01,280 --> 00:10:04,490
bạn kết nối tới ListView.

192
00:10:04,490 --> 00:10:07,730
Hi vọng là bài này dễ hiểu.
Tôi đã sử dụng delegate

193
00:10:07,730 --> 00:10:10,700
như một thành phần bên ngoài View để

194
00:10:10,700 --> 00:10:12,860
chứng minh rằng bạn có thể làm thế,
nhưng ta cũng có thể

195
00:10:12,860 --> 00:10:15,260
làm đặt nó bên trong ListView, và tôi cũng muốn

196
00:10:15,260 --> 00:10:17,300
các bạn hiểu điều đó. Tôi sẽ sao chép

197
00:10:17,300 --> 00:10:20,800
phần hình chữ nhật trong phần tử "Component" ở đây.

198
00:10:20,800 --> 00:10:24,020
Chọn Copy và tôi sẽ

199
00:10:24,020 --> 00:10:28,400
chú thích nó lại vì không cần tới nữa.

200
00:10:28,400 --> 00:10:29,030


201
00:10:29,030 --> 00:10:32,660
Tiếp theo, ta sẽ

202
00:10:32,660 --> 00:10:36,320
đi tới đây, chú thích cái này ra,

203
00:10:36,320 --> 00:10:38,510
vì tôi muốn các bạn giữ phần này

204
00:10:38,510 --> 00:10:41,780
để tham khảo. Ta gõ "delegate" và dán

205
00:10:41,780 --> 00:10:44,810
phần hình chữ nhật vào như thế này.

206
00:10:44,810 --> 00:10:48,840
Nó vẫn hoạt động như trước.
Hãy chạy thử xem.

207
00:10:48,840 --> 00:10:51,340
Và các bạn thấy đấy, nó vẫn như vậy.

208
00:10:51,340 --> 00:10:54,700
Nhấn India "New Delhi", ta sẽ thấy

209
00:10:54,700 --> 00:10:57,070
mọi thứ vẫn như trước.

210
00:10:57,070 --> 00:11:00,520
Bạn có thể tạo delegate hoặc

211
00:11:00,520 --> 00:11:03,580
model bên trong ListView thế này nếu muốn.

212
00:11:03,580 --> 00:11:05,860
Để diễn giải hết trong bài này thì rất khó.

213
00:11:05,860 --> 00:11:08,170
Hi vọng bạn đã hiểu hơn về

214
00:11:08,170 --> 00:11:10,480
cách làm việc với ListView và ListModel

215
00:11:10,480 --> 00:11:13,090
để hiển thị dữ liệu.

216
00:11:13,090 --> 00:11:14,650
Ở bài sau, ta sẽ học cách

217
00:11:14,650 --> 00:00:00,000
dùng các model trực tiếp. Hẹn gặp lại.

