1
00:00:00,000 --> 00:00:01,829
In this lecture, we're going to see how

2
00:00:01,829 --> 00:00:04,080
you work with the rest api in your

3
00:00:04,080 --> 00:00:07,109
qml applications. We are going to work

4
00:00:07,109 --> 00:00:10,080
with the api service that is provided by

5
00:00:10,080 --> 00:00:14,610
this website here. It is called ICNDb.com,

6
00:00:14,610 --> 00:00:18,090
and it gives a funny api that

7
00:00:18,090 --> 00:00:21,689
fetches Chuck Norris jokes. So you want

8
00:00:21,689 --> 00:00:25,380
to come to database restful api and

9
00:00:25,380 --> 00:00:27,779
click on this link here, and they show

10
00:00:27,779 --> 00:00:30,539
you the documentation on their api. If

11
00:00:30,539 --> 00:00:32,579
you go down, they give you a list of

12
00:00:32,579 --> 00:00:35,670
links you can use to get the api. We

13
00:00:35,670 --> 00:00:38,780
want to use this one. You want to copy it

14
00:00:38,780 --> 00:00:43,350
and open it in a new tab. We're going to

15
00:00:43,350 --> 00:00:44,430
open it like this.

16
00:00:44,430 --> 00:00:46,530
And if I call it like this, it is going

17
00:00:46,530 --> 00:00:49,590
to give me three jokess. You see that I am

18
00:00:49,590 --> 00:00:53,039
opening this in a browser. I am using

19
00:00:53,039 --> 00:00:54,960
Firefox right now, you can use whatever

20
00:00:54,960 --> 00:00:58,680
you want, but Firefox by default gives me

21
00:00:58,680 --> 00:01:01,890
this good display that helps me see my

22
00:01:01,890 --> 00:01:04,559
data very well. I'm going to increase the

23
00:01:04,559 --> 00:01:07,650
size so that you see what we get. Okay, we

24
00:01:07,650 --> 00:01:11,010
get a JSON object, really, and inside we

25
00:01:11,010 --> 00:01:14,070
have a type attribute, which is whether

26
00:01:14,070 --> 00:01:17,400
we were successful or not, and inside we

27
00:01:17,400 --> 00:01:21,420
have a value array, and it contains JSON

28
00:01:21,420 --> 00:01:24,000
objects as well. On the zero index we

29
00:01:24,000 --> 00:01:26,810
have this object. Inside we have an id,

30
00:01:26,810 --> 00:01:31,380
the joke, attribute here, and the categories

31
00:01:31,380 --> 00:01:33,900
array, but this array is empty for now.

32
00:01:33,900 --> 00:01:37,439
Let's try to parse in 10 to see if this

33
00:01:37,439 --> 00:01:40,350
changes anything... Nothing, which means the

34
00:01:40,350 --> 00:01:43,259
categories array is empty, but we are

35
00:01:43,259 --> 00:01:44,939
interested in the joke here. So what

36
00:01:44,939 --> 00:01:46,649
we're going to do we're going to get

37
00:01:46,649 --> 00:01:49,950
this data, parse it in our QML code

38
00:01:49,950 --> 00:01:52,320
and fetch the data that we have in here,

39
00:01:52,320 --> 00:01:54,890
and we're going to display this in

40
00:01:54,890 --> 00:01:57,750
ListView. And when we get the data from

41
00:01:57,750 --> 00:01:59,159
the internet we're going to find a way

42
00:01:59,159 --> 00:02:02,790
to put that in our model so that it is

43
00:02:02,790 --> 00:02:05,070
displayed by the View. We're going to go

44
00:02:05,070 --> 00:02:07,770
to Qt creator and do that. Here we are

45
00:02:07,770 --> 00:02:09,239
in QT creator. We're going to

46
00:02:09,239 --> 00:02:11,670
create our project: so QT quick

47
00:02:11,670 --> 00:02:12,599
application,

48
00:02:12,599 --> 00:02:16,049
we call it RESTApisDemo, store it in

49
00:02:16,049 --> 00:02:18,900
the usual location, hit next, choose your

50
00:02:18,900 --> 00:02:24,870
QT version, choose your kit, and finish. We

51
00:02:24,870 --> 00:02:26,459
want to change the title here to... say...

52
00:02:26,459 --> 00:02:33,000
Rest APIs Demo, and we want to import QT

53
00:02:33,000 --> 00:02:39,989
QtQuick.Controls, bởi vì ta sẽ

54
00:02:39,989 --> 00:02:44,579
need the button and the SpinBox. We also

55
00:02:44,579 --> 00:02:51,299
want QtQuick.Layouts, We're going to

56
00:02:51,299 --> 00:02:54,480
use 1.4. Down here we want to put in

57
00:02:54,480 --> 00:03:00,299
a column layout, it is going to fill the

58
00:03:00,299 --> 00:03:05,370
the parent. We want a spacing of zero. Inside

59
00:03:05,370 --> 00:03:07,939
we're going to have a ListView,

60
00:03:07,939 --> 00:03:12,030
this SpinBox component that is going to

61
00:03:12,030 --> 00:03:15,750
allow us to specify the number of jokes

62
00:03:15,750 --> 00:03:18,780
that we want, and the button that is

63
00:03:18,780 --> 00:03:21,209
going to kick off the download of the

64
00:03:21,209 --> 00:03:24,629
api. The ListView is going to have

65
00:03:24,629 --> 00:03:29,879
an id: mListViewId as usual. SpinBox

66
00:03:29,879 --> 00:03:34,680
is going to be spinBoxId, and button

67
00:03:34,680 --> 00:03:36,689
is going to be buttonId. I don't know if

68
00:03:36,689 --> 00:03:38,609
you're going to need the ID for the

69
00:03:38,609 --> 00:03:42,000
button, but we put it in anyway. We also

70
00:03:42,000 --> 00:03:45,060
want a list model for the list of views, so

71
00:03:45,060 --> 00:03:49,439
we're going to say listModel, id: mListModel

72
00:03:49,439 --> 00:03:53,669
and it's going to be just like

73
00:03:53,669 --> 00:03:55,919
this: we are going to put in the data

74
00:03:55,919 --> 00:03:59,280
dynamically as we get the data from the

75
00:03:59,280 --> 00:04:02,340
REST API. so we can specify a model for

76
00:04:02,340 --> 00:04:08,639
our list view here mListModelId, I like

77
00:04:08,639 --> 00:04:10,829
to put Id at the end so we know it's an

78
00:04:10,829 --> 00:04:13,500
Id. This list view is going to need to

79
00:04:13,500 --> 00:04:15,959
delegate... we're going to go down below

80
00:04:15,959 --> 00:04:18,750
everything and define a component that

81
00:04:18,750 --> 00:04:21,539
is going to be our delegate. I don't want

82
00:04:21,539 --> 00:04:24,719
to type all this, so I prepared it before,

83
00:04:24,719 --> 00:04:26,410
and I'm going to put

84
00:04:26,410 --> 00:04:29,110
and try to explain it. If you have

85
00:04:29,110 --> 00:04:31,450
watched the chapter on model view

86
00:04:31,450 --> 00:04:34,000
architecture, this is not going to be new

87
00:04:34,000 --> 00:04:36,550
to you. So it is a delegate, we have the

88
00:04:36,550 --> 00:04:39,190
Id, inside we have a rectangle with a

89
00:04:39,190 --> 00:04:41,830
bunch of properties width height color, and

90
00:04:41,830 --> 00:04:44,350
inside we have a text component that is

91
00:04:44,350 --> 00:04:48,190
going to display jokes in our case here,

92
00:04:48,190 --> 00:04:52,900
and we applied some decoration on text

93
00:04:52,900 --> 00:04:55,600
component to make it look better. We set

94
00:04:55,600 --> 00:04:58,420
the font size. We centered it in the

95
00:04:58,420 --> 00:05:00,070
parent, and you see that we applied some

96
00:05:00,070 --> 00:05:04,150
margin on the rectangle to make the text

97
00:05:04,150 --> 00:05:06,550
have some breathing room. We also want to

98
00:05:06,550 --> 00:05:09,370
align the text in the rectangle, and we

99
00:05:09,370 --> 00:05:12,190
are wrapping to not have our text

100
00:05:12,190 --> 00:05:14,650
chopped off. This is really all we have.

101
00:05:14,650 --> 00:05:17,560
We can go back to our list view and

102
00:05:17,560 --> 00:05:21,820
specify a delegate. It's going to be

103
00:05:21,820 --> 00:05:26,740
delegateId, yes, it is, okay. Now

104
00:05:26,740 --> 00:05:28,720
that we have our delegate, we want to

105
00:05:28,720 --> 00:05:31,510
make the ListView fill the available

106
00:05:31,510 --> 00:05:35,080
space. We're going to say 

107
00:05:35,080 --> 00:05:41,650
Layout.fillWidth... set this to true... Layout.fillHeight...

108
00:05:41,650 --> 00:05:46,870
and set this to true. Let's take one 

109
00:05:46,870 --> 00:05:50,740
colon away. And we want the others to fill

110
00:05:50,740 --> 00:05:54,190
the available width, okay, so we say 

111
00:05:54,190 --> 00:05:59,350
SpinBox and Button fill the width. For these

112
00:05:59,350 --> 00:06:02,970
Spinbox, we want to specify the value

113
00:06:02,970 --> 00:06:05,680
that is going to be in by default. We

114
00:06:05,680 --> 00:06:08,290
want to have a 10 inside... Ctrl+A,

115
00:06:08,290 --> 00:06:11,890
Ctr+I to align the things... and for the

116
00:06:11,890 --> 00:06:14,320
button we want to have the text that is

117
00:06:14,320 --> 00:06:17,820
going to be shown.... let's say "Fetch", and

118
00:06:17,820 --> 00:06:21,850
when it is clicked we want to know, and

119
00:06:21,850 --> 00:06:23,620
this is where we are going to kick off

120
00:06:23,620 --> 00:06:26,530
the download of our data. So we want to

121
00:06:26,530 --> 00:06:28,240
put in the function that is going to

122
00:06:28,240 --> 00:06:30,840
fetch the jokes. We go to the top here and

123
00:06:30,840 --> 00:06:35,370
say function fetchJokes.

124
00:06:35,370 --> 00:06:38,880
It's going to take a URL

125
00:06:38,880 --> 00:06:41,100
just like we did in the last lecture,

126
00:06:41,100 --> 00:06:44,160
really. We're going to just download HTTP

127
00:06:44,160 --> 00:06:47,130
data, we just happen to get JSON data

128
00:06:47,130 --> 00:06:49,770
from this request. Inside we're going to

129
00:06:49,770 --> 00:06:53,430
parse in a call back... same thing, really, as

130
00:06:53,430 --> 00:06:56,639
the last lecture. So inside, we are going

131
00:06:56,639 --> 00:06:58,740
to do the same thing we did in the last

132
00:06:58,740 --> 00:07:01,530
lecture: you see we are creating our 

133
00:07:01,530 --> 00:07:04,380
XMLHttpRequest object, we are calling open

134
00:07:04,380 --> 00:07:07,949
and send here, and when the ready state

135
00:07:07,949 --> 00:07:12,030
changes we get that here, if we are done

136
00:07:12,030 --> 00:07:14,460
we check to see if the status is okay

137
00:07:14,460 --> 00:07:17,820
and we console.log the "resource found"... We

138
00:07:17,820 --> 00:07:19,979
don't want to say in textID, we don't

139
00:07:19,979 --> 00:07:23,160
have that here. Let's take this out, and

140
00:07:23,160 --> 00:07:26,550
we call back a method with the response

141
00:07:26,550 --> 00:07:29,400
text that we got from the internet, okay.

142
00:07:29,400 --> 00:07:31,320
This is really the same thing. This part

143
00:07:31,320 --> 00:07:33,479
is completely the same as the last

144
00:07:33,479 --> 00:07:36,060
lecture, we just changed the name of the

145
00:07:36,060 --> 00:07:39,030
function here to reflect what we are

146
00:07:39,030 --> 00:07:41,099
doing here. So when you click the button,

147
00:07:41,099 --> 00:07:44,180
we want to call the fetchJokes method.

148
00:07:44,180 --> 00:07:49,169
Let's do that. Okay we want to parse in

149
00:07:49,169 --> 00:07:52,169
the URL. Let's go back to our REST API

150
00:07:52,169 --> 00:07:55,200
service here, copy the URL that we are

151
00:07:55,200 --> 00:07:59,789
parsing in here. We are going to put the

152
00:07:59,789 --> 00:08:03,120
same URL inside here, but this number is

153
00:08:03,120 --> 00:08:05,370
going to be dynamic. It's not going to be

154
00:08:05,370 --> 00:08:08,150
static like this. So we're going to put a

155
00:08:08,150 --> 00:08:13,050
quote here, and add that number

156
00:08:13,050 --> 00:08:16,940
dynamically. So we're going to say 

157
00:08:16,940 --> 00:08:21,840
+ spinBoxId.value... you get the value that

158
00:08:21,840 --> 00:08:24,389
is in the spinBox. We can change this

159
00:08:24,389 --> 00:08:27,060
at runtime by clicking the plus or minus

160
00:08:27,060 --> 00:08:30,419
button, but when we click the button here

161
00:08:30,419 --> 00:08:32,820
we're going to get whatever value is in

162
00:08:32,820 --> 00:08:35,219
the spinBox. I hope this makes sense. And

163
00:08:35,219 --> 00:08:37,229
after this, we want to parse in our

164
00:08:37,229 --> 00:08:42,870
callback function. function(response)... we

165
00:08:42,870 --> 00:08:45,320
want to parse in the parameter list and

166
00:08:45,320 --> 00:08:48,030
provide the body for our function

167
00:08:48,030 --> 00:08:51,030
here. Ah, we don't want this parameter list,

168
00:08:51,030 --> 00:08:53,640
we put that in the response. Sorry for

169
00:08:53,640 --> 00:08:56,310
that. We're going to shrink this so that

170
00:08:56,310 --> 00:08:58,530
we have more area to see what is going

171
00:08:58,530 --> 00:09:01,560
on okay. Now we have a response here, so

172
00:09:01,560 --> 00:09:03,420
what we're going to do is console again

173
00:09:03,420 --> 00:09:06,090
to see what we are getting, actually, and

174
00:09:06,090 --> 00:09:09,240
know that our logic here is working. We're

175
00:09:09,240 --> 00:09:13,980
going to console.log(response), like this.

176
00:09:13,980 --> 00:09:16,650
Let's run the application and see that

177
00:09:16,650 --> 00:09:20,730
our logic is working. We have our user

178
00:09:20,730 --> 00:09:22,920
interface here, there is nothing in here

179
00:09:22,920 --> 00:09:24,750
because the model is empty.

180
00:09:24,750 --> 00:09:28,800
If we hit fetch, notice what we get. okay

181
00:09:28,800 --> 00:09:32,970
we say type success value id joke Chuck

182
00:09:32,970 --> 00:09:34,740
Norris, and things like that,

183
00:09:34,740 --> 00:09:37,740
okay. We have our data. We want to parse

184
00:09:37,740 --> 00:09:39,930
it, actually, and put the data in our

185
00:09:39,930 --> 00:09:43,080
model. We want to check if we got a

186
00:09:43,080 --> 00:09:46,430
correct response, so we say if(response),

187
00:09:46,430 --> 00:09:52,530
we do parse the data, and if we have no

188
00:09:52,530 --> 00:09:59,400
response, let's say console.log("something

189
00:09:59,400 --> 00:10:07,080
went wrong"), this will do. Now what we want

190
00:10:07,080 --> 00:10:09,570
to do is turn the data into a json

191
00:10:09,570 --> 00:10:12,560
object that we can parse. We say var

192
00:10:12,560 --> 00:10:20,670
object = JSON.parse, and we parse in

193
00:10:20,670 --> 00:10:22,590
the string that we want to parse, so we

194
00:10:22,590 --> 00:10:26,880
say response, this is what we want. Now

195
00:10:26,880 --> 00:10:30,650
what we want to do is loop,

196
00:10:40,899 --> 00:10:43,339
okay, we want to loop over this to

197
00:10:43,339 --> 00:10:45,800
capture our jokes. I want to go back to

198
00:10:45,800 --> 00:10:47,630
our browser and look at the structure of

199
00:10:47,630 --> 00:10:49,790
the response we get, because we obviously

200
00:10:49,790 --> 00:10:52,850
want to know that. Notice that our object

201
00:10:52,850 --> 00:10:55,670
is going to contain the attribute of

202
00:10:55,670 --> 00:10:59,480
type, and an array of value, okay. We want

203
00:10:59,480 --> 00:11:02,000
to actually loop over this array and

204
00:11:02,000 --> 00:11:04,640
capture these objects. So if you don't

205
00:11:04,640 --> 00:11:07,040
know how to loop over an array, you can

206
00:11:07,040 --> 00:11:09,830
actually open your favorite search

207
00:11:09,830 --> 00:11:19,010
engine and type in... I think it's going to

208
00:11:19,010 --> 00:11:22,730
give us the documentation for JavaScript,

209
00:11:22,730 --> 00:11:26,330
you come here, and what you want to look

210
00:11:26,330 --> 00:11:29,920
at is Built-in objects, look at array, and

211
00:11:29,920 --> 00:11:32,810
there are methods that we can call on

212
00:11:32,810 --> 00:11:35,300
this array. One of those methods is foreach,

213
00:11:35,300 --> 00:11:38,390
and you can use this to loop over

214
00:11:38,390 --> 00:11:41,750
an array. You can look at this to see how

215
00:11:41,750 --> 00:11:43,760
you can loop over your array. This is

216
00:11:43,760 --> 00:11:46,370
what we are going to use. So we are going

217
00:11:46,370 --> 00:11:56,470
to go to our code and say object.values,

218
00:11:57,190 --> 00:12:00,500
because if you go back to our response

219
00:12:00,500 --> 00:12:04,399
we got, we have a "value" array... it's not

220
00:12:04,399 --> 00:12:06,770
"values", its "value", so you need to check

221
00:12:06,770 --> 00:12:11,839
your thing, and say forEach(). Inside we

222
00:12:11,839 --> 00:12:14,240
parse in a callback function, just like

223
00:12:14,240 --> 00:12:17,959
what we did with our requests, it is

224
00:12:17,959 --> 00:12:20,720
going to parse a parameter of joke, and

225
00:12:20,720 --> 00:12:23,329
what we have in here is going to be our

226
00:12:23,329 --> 00:12:26,270
joke object. We want to go in the body of

227
00:12:26,270 --> 00:12:29,120
the function and do something with the

228
00:12:29,120 --> 00:12:32,450
joke data that we have. We actually want

229
00:12:32,450 --> 00:12:35,000
to capture this data and put that in the

230
00:12:35,000 --> 00:12:37,610
Model. Okay, we want to get the joke out

231
00:12:37,610 --> 00:12:40,520
of the joke object. What we are going to

232
00:12:40,520 --> 00:12:42,709
take here is going to be one of these

233
00:12:42,709 --> 00:12:44,570
elements... you see we have many elements,

234
00:12:44,570 --> 00:12:44,940
we're going to

235
00:12:44,940 --> 00:12:46,740
take one element and this is going to be

236
00:12:46,740 --> 00:12:49,320
one joke, and we want to capture the joke

237
00:12:49,320 --> 00:12:53,100
out of that. I hope this makes sense. So

238
00:12:53,100 --> 00:12:54,240
what we're going to do is we're going to

239
00:12:54,240 --> 00:12:56,400
capture the ID of our model, it's called

240
00:12:56,400 --> 00:13:01,980
model Id, let's say mListModelId.append(),

241
00:13:01,980 --> 00:13:04,740
we want to append data and we

242
00:13:04,740 --> 00:13:07,980
want to append this as a JSON object. So

243
00:13:07,980 --> 00:13:14,070
we're going to say "joke", okay. We want to

244
00:13:14,070 --> 00:13:18,030
put the colon on here and say joke.joke.

245
00:13:18,030 --> 00:13:20,970
Joke is our object that we parse in here

246
00:13:20,970 --> 00:13:23,490
and we want to take the joke out of it.

247
00:13:23,490 --> 00:13:25,650
Notice that we did everything we have to

248
00:13:25,650 --> 00:13:27,870
do but we did it in the wrong place. So

249
00:13:27,870 --> 00:13:33,150
we should copy this and put that when we

250
00:13:33,150 --> 00:13:36,540
get the data. Sorry for that, guys. Now we

251
00:13:36,540 --> 00:13:39,270
can run the application and see that we

252
00:13:39,270 --> 00:13:41,730
are getting the data and showing that in

253
00:13:41,730 --> 00:13:49,020
our model. Let's run. Okay, we have our

254
00:13:49,020 --> 00:13:52,380
application here. Let's change to make it

255
00:13:52,380 --> 00:13:56,340
fetch five jokes. Fetch, and you see that we

256
00:13:56,340 --> 00:13:58,860
have our jokes here. Let's fetch again

257
00:13:58,860 --> 00:14:01,800
you see that our list keeps growing. You

258
00:14:01,800 --> 00:14:04,560
can increase the count, fetch again, and

259
00:14:04,560 --> 00:14:06,480
you see that we are fetching the jokes

260
00:14:06,480 --> 00:14:08,970
and showing them in our application here.

261
00:14:08,970 --> 00:14:11,580
The bulk of this application is really

262
00:14:11,580 --> 00:14:13,740
how you parse the data that you get.

263
00:14:13,740 --> 00:14:15,960
Getting the data is part of the last

264
00:14:15,960 --> 00:14:17,670
lecture that we focused on

265
00:14:17,670 --> 00:14:20,790
getting HTML data from the internet. Now

266
00:14:20,790 --> 00:14:23,220
we want to parse the data as a JSON

267
00:14:23,220 --> 00:14:26,880
object and get whatever parts of that

268
00:14:26,880 --> 00:14:29,640
json object that we want. In this case

269
00:14:29,640 --> 00:14:32,670
we want to get joke data and put that in

270
00:14:32,670 --> 00:14:35,000
our model using the append method

271
00:14:35,000 --> 00:14:37,620
dynamically. This is all I had to say in

272
00:14:37,620 --> 00:14:39,270
this lecture. I hope you know how to work

273
00:14:39,270 --> 00:14:43,440
with XMLHttpRequests to both download

274
00:14:43,440 --> 00:14:47,280
HTTP data and parse that data as a json

275
00:14:47,280 --> 00:14:49,650
object as necessary. In the next

276
00:14:49,650 --> 00:14:51,300
chapter we're going to see how you work

277
00:14:51,300 --> 00:14:53,760
with storage mechanisms that are

278
00:14:53,760 --> 00:00:00,000
provided to you by QT quick I see you there

