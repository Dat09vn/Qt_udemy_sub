0:00:00.030,0:00:05.850
In this lecture we're going to use the

0:00:02.190,0:00:09.179
XMLHttpRequest javascript object to

0:00:05.850,0:00:11.719
download some HTTP data. We can either do

0:00:09.179,0:00:14.040
that asynchronously or synchronously.

0:00:11.719,0:00:16.619
We're going to go to Qt Creator

0:00:14.040,0:00:18.029
and play with that. Here we are in QT

0:00:16.619,0:00:21.480
Creator. We are going to create our

0:00:18.029,0:00:25.680
project: the QT quick application as

0:00:21.480,0:00:29.699
usual. We call it XMLHttpRequestDemo,

0:00:25.680,0:00:34.739
store it in a location on our drive, hit

0:00:29.699,0:00:39.270
Next, choose your QT version, choose your

0:00:34.739,0:00:47.700
kit, and finish. We want to change this

0:00:39.270,0:00:49.739
title here. We want to import QT quick

0:00:47.700,0:00:55.710
controls because we are going to use a

0:00:49.739,0:01:03.180
text area. Let's do that. And down here we

0:00:55.710,0:01:11.430
want to put in a text area component. Id

0:01:03.180,0:01:15.060
is going to be text area. It is going to

0:01:11.430,0:01:23.580
fill the parent. We want to give it the

0:01:15.060,0:01:27.180
ability to show rich text. Let's say 

0:01:23.580,0:01:30.659
RichText here. This is going to allow us to

0:01:27.180,0:01:33.869
display HTML data. The purpose of this is

0:01:30.659,0:01:36.659
to show the HTML that we download from

0:01:33.869,0:01:41.070
the internet, ok. It's going to act like

0:01:36.659,0:01:43.350
our minified browser that is really

0:01:41.070,0:01:46.020
useless. It's going to throw crampy data,

0:01:43.350,0:01:48.329
it's not beautiful, but it serves the

0:01:46.020,0:01:51.930
purpose of showing what you can do with

0:01:48.329,0:01:56.009
XMLHttpRequest. We want to put in some

0:01:51.930,0:01:58.799
placeholder text. Let's say "Html Data

0:01:56.009,0:02:01.170
here" this will do. Down below we want

0:01:58.799,0:02:03.710
to put the MouseArea. That is going to

0:02:01.170,0:02:03.710
fill the window,

0:02:05.050,0:02:12.400
and when it's clicked, it's when we are

0:02:08.620,0:02:17.100
going to download our data. Okay, so you

0:02:12.400,0:02:17.100
can download your data synchronously, and

0:02:19.350,0:02:24.100
this means that this is blocking, the

0:02:22.390,0:02:26.890
moment you hit the mouse area here,

0:02:24.100,0:02:29.290
you're going to wait until the download

0:02:26.890,0:02:31.300
is done so that your application can

0:02:29.290,0:02:35.170
keep doing something. This is not

0:02:31.300,0:02:43.060
recommended. The recommended way is to go

0:02:35.170,0:02:44.770
async and do this asynchronously. But I

0:02:43.060,0:02:46.630
want to show you how to do synchronously

0:02:44.770,0:02:49.900
because sometimes you want to do this

0:02:46.630,0:02:52.660
for small sets of data. So we want to

0:02:49.900,0:02:55.300
define a function that is going to help

0:02:52.660,0:02:58.930
us do that. We define it in the root

0:02:55.300,0:03:02.230
level of this component here, and we're

0:02:58.930,0:03:04.450
going to call it downloadData, and we

0:03:02.230,0:03:06.670
want to give it a URL that is going to

0:03:04.450,0:03:12.280
download. We're going to create a 

0:03:06.670,0:03:17.530
variable, call it XML HTTP request, and we

0:03:12.280,0:03:19.959
are going to define it like this. This is

0:03:17.530,0:03:22.959
how you define your stuff in JavaScript.

0:03:19.959,0:03:26.739
You can use the 'new' keyword. After you

0:03:22.959,0:03:29.200
have defined your xhr object, you want to

0:03:26.739,0:03:31.480
kick off the download. You kick it off by

0:03:29.200,0:03:36.310
calling the open method of it. So we're

0:03:31.480,0:03:39.160
going to say xhr.open. We want to

0:03:36.310,0:03:42.160
specify the method. It's going to be GET,

0:03:39.160,0:03:45.520
because we want to fetch data, and you

0:03:42.160,0:03:49.180
pass in your URL. And after yuu do that, you

0:03:45.520,0:03:52.750
do an xhr.send. And just like this,

0:03:49.180,0:03:55.209
you kick off your request to get HTML

0:03:52.750,0:03:57.520
data. Now you want to know the status

0:03:55.209,0:03:59.950
of your request. You want to know if you

0:03:57.520,0:04:01.720
got the data, you want to know if there

0:03:59.950,0:04:04.780
was some kind of error, and things like

0:04:01.720,0:04:08.830
that. You can capture that in the 

0:04:04.780,0:04:11.140
onreadystatechange method of your 

0:04:08.830,0:04:14.320
XMLHttpRequest, and the way you do that you

0:04:11.140,0:04:16.060
define a function like this xhr.onreadystatechange.

0:04:14.320,0:04:18.220
You see that it is a

0:04:16.060,0:04:20.560
function that you can define here,

0:04:18.220,0:04:25.630
and we define our function that is going

0:04:20.560,0:04:28.270
to do that for us. Once in this function,

0:04:25.630,0:04:31.540
you want to know what ready state you

0:04:28.270,0:04:35.860
are at, and you capture that using the

0:04:31.540,0:04:37.840
property xhr.readyState, okay.

0:04:35.860,0:04:40.840
So there are a bunch of ready states you

0:04:37.840,0:04:44.200
can check, but in this lecture we are

0:04:40.840,0:04:47.650
only going to check for HEADERS_RECEIVED

0:04:44.200,0:04:50.020
and DONE. HEADERS_RECEIVED is going to

0:04:47.650,0:04:54.040
tell us when we receive the headers from

0:04:50.020,0:04:56.110
our request, and DONE is fired when the

0:04:54.040,0:04:59.740
request is finished. And we can check to

0:04:56.110,0:05:02.110
see if we received valid data or if we

0:04:59.740,0:05:07.500
got some kind of error. So what we want

0:05:02.110,0:05:14.280
to say is if xhr.readystate

0:05:07.500,0:05:19.350
=== XMLHttpRequest.HEADERS_RECEIVED,

0:05:14.280,0:05:28.030
we're going to do something, else if 

0:05:19.350,0:05:31.000
xhr.readyState === 

0:05:28.030,0:05:37.750
XMLHttpRequest.DONE, I want to copy this because

0:05:31.000,0:05:40.750
I already am lazy at typing, we want to do

0:05:37.750,0:05:43.020
something else. So when we receive the

0:05:40.750,0:05:46.479
headers, we just want to say console.log

0:05:43.020,0:05:49.330
HEADERS_RECEIVED, okay. We want to do this

0:05:46.479,0:05:53.440
when the request is DONE, we want to know

0:05:49.330,0:05:56.760
if what we received is valid HTTP data.

0:05:53.440,0:06:04.390
You can check the status and you can say

0:05:56.760,0:06:06.940
if xhr.status == 200, which

0:06:04.390,0:06:09.970
is what you receive back when you get

0:06:06.940,0:06:12.880
the data successfully. You get a status

0:06:09.970,0:06:15.850
code of 200, you know that you got the

0:06:12.880,0:06:18.010
data. But if you don't get this, you know

0:06:15.850,0:06:22.050
that something is wrong, and we say that

0:06:18.010,0:06:22.050
in the console. So we say console.log

0:06:22.950,0:06:26.370
"something went wrong".

0:06:26.540,0:06:39.630
Okay now we want to capture the data.

0:06:29.400,0:06:42.570
Okay if we get here console.log. Now when

0:06:39.630,0:06:46.200
you get your response, it is stored in

0:06:42.570,0:06:49.590
the property of xhr that is called

0:06:46.200,0:06:55.200
responseText here, okay so we can

0:06:49.590,0:07:02.300
actually... toString... console.log this okay.

0:06:55.200,0:07:07.070
I'm going to copy this and add that here,

0:07:02.300,0:07:07.070
so that you can see it in the console.

0:07:07.520,0:07:13.350
"Got the data , it is : " and you say what you

0:07:10.920,0:07:15.960
got from the internet. Let's kill these

0:07:13.350,0:07:17.970
spaces so that we have things a little

0:07:15.960,0:07:21.120
more readable. And this is really how you

0:07:17.970,0:07:23.490
get stuff from the internet using 

0:07:21.120,0:07:25.740
XMLHttpRequest. Now that we have this

0:07:23.490,0:07:29.190
downloadData function of ours, we can

0:07:25.740,0:07:34.380
call it when we click on our mouse area.

0:07:29.190,0:07:36.690
So we can say downloadData and pass in

0:07:34.380,0:07:38.960
a URL. You can pass in whatever you want

0:07:36.690,0:07:41.820
but I am going to pass in this URL

0:07:38.960,0:07:44.640
because I like it and we are going to

0:07:41.820,0:07:47.550
use the service we provide to play with

0:07:44.640,0:07:51.000
REST API in the next lecture,

0:07:47.550,0:07:53.640
so I'm going to use this. Now I can try

0:07:51.000,0:07:56.160
my application. It is going to show me

0:07:53.640,0:07:58.860
this window here and the window is going

0:07:56.160,0:08:01.620
to be clickable, Inside we're going to

0:07:58.860,0:08:04.169
have a text area that says "HTML Data

0:08:01.620,0:08:05.910
here". When we click the mouse area, we're

0:08:04.169,0:08:07.770
going to kick off the download and we

0:08:05.910,0:08:10.710
should see the result of our download.

0:08:07.770,0:08:12.930
We're going to either see "Got the data"

0:08:10.710,0:08:15.000
and show the data that we got, or say

0:08:12.930,0:08:17.330
that something is wrong, and we're going

0:08:15.000,0:08:21.210
to see it when we receive the headers.

0:08:17.330,0:08:24.810
Let's run the application so that you

0:08:21.210,0:08:27.900
see for yourself. We are not seeing the

0:08:24.810,0:08:31.280
placeholder text, but let's try clicking

0:08:27.900,0:08:35.880
on this. And you see that we are getting

0:08:31.280,0:08:38.219
HTML data. If you don't believe me, we're

0:08:35.880,0:08:39.889
going to try something, we're going to go

0:08:38.219,0:08:45.899
to the same URL

0:08:39.889,0:08:51.480
that we have specified in here. Where is

0:08:45.899,0:08:53.879
it? It's here. We're going to copy it,

0:08:51.480,0:08:57.480
open it in my browser. It is opened here.

0:08:53.879,0:09:00.360
And if I look at the source code of this

0:08:57.480,0:09:03.209
page, I am going to see the sentence we

0:09:00.360,0:09:07.170
received in our application. Let's go to

0:09:03.209,0:09:11.610
the end and you see that the end is HTML

0:09:07.170,0:09:15.239
body, we have a script that ends in 497.

0:09:11.610,0:09:17.399
Let's come back to the QT Createor and at

0:09:15.239,0:09:20.549
the end you see that we have the same

0:09:17.399,0:09:23.730
thing, we have HTML head body, and we have

0:09:20.549,0:09:27.649
497 here. So we are successfully

0:09:23.730,0:09:30.569
fetching data from our QML application.

0:09:27.649,0:09:33.839
And if we go up we should see our

0:09:30.569,0:09:36.449
headers received message, it is here, we

0:09:33.839,0:09:38.339
say that we got the data and we say the

0:09:36.449,0:09:42.449
data that we got from the internet. This

0:09:38.339,0:09:45.329
is how you can download HTML pages from

0:09:42.449,0:09:47.970
your qml code. But this is not good

0:09:45.329,0:09:53.669
enough. We can actually take this data

0:09:47.970,0:09:56.160
and put that into this text area here to

0:09:53.669,0:09:58.829
make it visible. We also want to change

0:09:56.160,0:10:01.529
this property here to text, so that we

0:09:58.829,0:10:03.089
see the text inside. Ok now what we can

0:10:01.529,0:10:05.489
do is go back in the function, and

0:10:03.089,0:10:09.989
instead of showing this in the console,

0:10:05.489,0:10:12.980
we could say textAreaID.text equals

0:10:09.989,0:10:21.019
this thing we got from the internet.

0:10:12.980,0:10:25.949
Let's copy this, and say textAreaID.text

0:10:21.019,0:10:27.989
equals whatever we got from the

0:10:25.949,0:10:29.759
internet. You can put the semicolon here

0:10:27.989,0:10:30.739
or you can leave it. it's all going to

0:10:29.759,0:10:34.199
work.

0:10:30.739,0:10:37.379
Let's run. Okay,

0:10:34.199,0:10:40.319
HTML data here, we see our text, you click,

0:10:37.379,0:10:44.069
and you see that we got the data from

0:10:40.319,0:10:47.610
the internet. Ok, they try and display the

0:10:44.069,0:10:50.519
data in here, ok. It is not as good as it

0:10:47.610,0:10:52.740
was in the browser, but it shows you what

0:10:50.519,0:10:53.500
is possible in your QML code, and people

0:10:52.740,0:10:56.470
can actually

0:10:53.500,0:10:59.500
read this if you happen to wrap your

0:10:56.470,0:11:02.110
text area here in applicable component.

0:10:59.500,0:11:04.420
People would be able to scroll through

0:11:02.110,0:11:06.430
this to see the entire page, but this is

0:11:04.420,0:11:09.040
not the recommended way to display HTML

0:11:06.430,0:11:11.230
data in your application. I'm doing this

0:11:09.040,0:11:14.580
just as an example so that you see what

0:11:11.230,0:11:17.260
is possible. So now we have fetched data

0:11:14.580,0:11:19.600
synchronously. We want to do the same

0:11:17.260,0:11:21.790
thing but asynchronously so that you

0:11:19.600,0:11:24.370
don't block the user interface. What

0:11:21.790,0:11:26.980
we're going to do is block this method

0:11:24.370,0:11:30.190
that we created, and we are going to

0:11:26.980,0:11:34.360
create it again, but make it asynchronous.

0:11:30.190,0:11:36.670
So we want to copy this and put that to

0:11:34.360,0:11:39.900
the top here and start what we want to do.

0:11:36.670,0:11:44.170
And the way you do asynchronous

0:11:39.900,0:11:46.090
requests with XML HTTP requests is

0:11:44.170,0:11:48.670
really easy, but if you are not familiar

0:11:46.090,0:11:50.740
with this, the callback syntax is

0:11:48.670,0:11:52.930
probably going to put you off, but don't

0:11:50.740,0:11:55.000
be afraid, just focus on what we are

0:11:52.930,0:11:56.410
trying to do, and when you see the

0:11:55.000,0:11:58.780
application running you're probably

0:11:56.410,0:12:05.200
going to understand. So then you say

0:11:58.780,0:12:07.480
function downloadData. We are going to

0:12:05.200,0:12:10.870
parse in the URL, but we also want

0:12:07.480,0:12:13.900
to pass in a callback function. This

0:12:10.870,0:12:16.180
function we are going to call when we

0:12:13.900,0:12:19.690
get the data, and we are going to specify

0:12:16.180,0:12:22.330
a function when we call this. I know this

0:12:19.690,0:12:24.370
sounds convoluted, but bear with me,

0:12:22.330,0:12:26.620
you're going to see how we use this. We

0:12:24.370,0:12:29.080
are mostly going to do the same thing as

0:12:26.620,0:12:31.060
we did for downloading data

0:12:29.080,0:12:34.630
synchronously, so we can actually copy

0:12:31.060,0:12:39.250
all this thing inside. I think the method

0:12:34.630,0:12:43.300
ends here... Yes. So we can copy all this

0:12:39.250,0:12:46.570
things inside the method, put that back

0:12:43.300,0:12:49.210
in our new method, but we are going to do

0:12:46.570,0:12:51.640
things differently when we get the data.

0:12:49.210,0:12:56.230
We're not going to display that in the

0:12:51.640,0:12:59.410
text area. We can actually copy this

0:12:56.230,0:13:01.959
because that's what we want, really. We

0:12:59.410,0:13:05.530
take out all of this things and we have

0:13:01.959,0:13:07.420
to call the callback method with the

0:13:05.530,0:13:10.360
data that we got from the internet.

0:13:07.420,0:13:13.630
So we are making this data

0:13:10.360,0:13:16.330
available to the user that called this

0:13:13.630,0:13:18.760
method here. We also want to call the

0:13:16.330,0:13:21.040
callback method, and call it with null

0:13:18.760,0:13:24.970
when we don't get anything with our

0:13:21.040,0:13:27.550
request. so we say callback and we pass

0:13:24.970,0:13:30.970
in null, just to show that we have an

0:13:27.550,0:13:33.010
error. But we also want to keep our load

0:13:30.970,0:13:41.740
messages, so here we are going to say

0:13:33.010,0:13:48.600
console.log("Resource found"), and here we

0:13:41.740,0:13:52.450
are going to say console.log("Resource

0:13:48.600,0:13:55.390
not found") if we don't get the data that

0:13:52.450,0:13:57.490
we want. Now how do you call this method?

0:13:55.390,0:14:00.790
We're going to comment this out because

0:13:57.490,0:14:05.980
we are going asynchronous, and we

0:14:00.790,0:14:08.710
basically say downloadData, okay, you

0:14:05.980,0:14:15.220
pass in the URL as usual, we're going to

0:14:08.710,0:14:17.440
copy this and put it inside, but I also

0:14:15.220,0:14:20.200
want to pass in a callback function, so I

0:14:17.440,0:14:25.890
can actually directly pass in a function

0:14:20.200,0:14:28.780
like this. Give it's a parameter list and

0:14:25.890,0:14:31.420
putting the body of the function like

0:14:28.780,0:14:34.600
this. And inside here I can do everything

0:14:31.420,0:14:36.580
I want with the data that I get from

0:14:34.600,0:14:38.740
this function here. And this function

0:14:36.580,0:14:41.620
here is our callback function. We are

0:14:38.740,0:14:44.320
defining it here so that we can do some

0:14:41.620,0:14:47.680
thing when we get the data. And notice

0:14:44.320,0:14:49.990
that this function gives us a parameter

0:14:47.680,0:14:52.030
so we need to capture it. We can pass in

0:14:49.990,0:14:55.210
a parameter to capture that and call it

0:14:52.030,0:14:58.420
response, and we can work on this

0:14:55.210,0:14:59.920
response. It isn't nothing fancy that

0:14:58.420,0:15:02.560
we're going to do with the response,

0:14:59.920,0:15:04.780
we're just going to check if it isn't

0:15:02.560,0:15:08.710
null, and the way you do that, you say 

0:15:04.780,0:15:11.890
if(response) only, so if it is not null we're

0:15:08.710,0:15:15.630
going to fall here, if it is null we're

0:15:11.890,0:15:20.800
going to fall down here. Okay let's say

0:15:15.630,0:15:25.510
null. So if it isn't null, we want to do the same 

0:15:20.800,0:15:28.300
thing we did in here textAreaID... set

0:15:25.510,0:15:33.190
the response to be our text, so you're

0:15:28.300,0:15:38.260
going to say textAreaID.text, set that

0:15:33.190,0:15:43.950
to be response. Okay. And we can do the

0:15:38.260,0:15:46.870
same thing here. textAreaID.text equals

0:15:43.950,0:15:51.279
some error, let's say some error here,

0:15:46.870,0:15:55.450
this will do. And just like this we are

0:15:51.279,0:15:58.089
calling our methods asynchronously, okay.

0:15:55.450,0:16:00.339
We pass in the URL, and the callback

0:15:58.089,0:16:02.769
method that is going to be called back

0:16:00.339,0:16:06.700
when we get the data from the internet.

0:16:02.769,0:16:09.339
And when we do this we can go on and do

0:16:06.700,0:16:11.529
our stuff, when the download is done, this

0:16:09.339,0:16:13.839
method is going to be called, and we are

0:16:11.529,0:16:15.370
going to update the interface. When you

0:16:13.839,0:16:18.010
call your function like this, you are not

0:16:15.370,0:16:20.440
blocking the user interface, and it is

0:16:18.010,0:16:23.589
the recommended way to get data from the

0:16:20.440,0:16:28.180
internet if you can. Let's run to see

0:16:23.589,0:16:31.690
that this actually works. Mm-hmm. We have

0:16:28.180,0:16:34.290
HTML data here. If we click, you see that

0:16:31.690,0:16:36.790
we get the data just like we did

0:16:34.290,0:16:38.980
synchronously, but this time it is better

0:16:36.790,0:16:41.470
it is not blocking the user interface.

0:16:38.980,0:16:43.870
And ladies and gentlemen, this is how you

0:16:41.470,0:16:47.200
get data from the internet using 

0:16:43.870,0:16:49.950
XMLHttpRequest, and consume the data in your

0:16:47.200,0:16:53.110
QML application. You can do that

0:16:49.950,0:16:55.959
synchronously as we saw here, or you can

0:16:53.110,0:16:58.510
do that asynchronously and not block the

0:16:55.959,0:17:00.700
user interface. In the next lecture we're

0:16:58.510,0:17:05.459
going to see how you consume rest api is

0:17:00.700,0:17:05.459
in your QML applications. I'll see you there.

