1
00:00:00,000 --> 00:00:01,709
In this lecture we're going to look at

2
00:00:01,709 --> 00:00:04,710
how you can work with SQLite in your qml

3
00:00:04,710 --> 00:00:07,799
application. SQLite allws you to save

4
00:00:07,799 --> 00:00:10,110
your data in a database that is embedded

5
00:00:10,110 --> 00:00:12,330
in your system, and you don't need to

6
00:00:12,330 --> 00:00:14,730
create a database or do some kind of

7
00:00:14,730 --> 00:00:16,949
connection to the database. You use the

8
00:00:16,949 --> 00:00:18,720
database that is available to you, and

9
00:00:18,720 --> 00:00:20,939
all you have to do is to create

10
00:00:20,939 --> 00:00:24,210
databases and tables, and do all kinds of

11
00:00:24,210 --> 00:00:26,490
crazy things. We're going to go to QT

12
00:00:26,490 --> 00:00:28,949
creator and play with this in QT quick.

13
00:00:28,949 --> 00:00:31,650
Okay so here we are in Qt creator. We

14
00:00:31,650 --> 00:00:33,600
are going to create our project Qt

15
00:00:33,600 --> 00:00:37,110
quick, so Qt application, we call

16
00:00:37,110 --> 00:00:39,450
it SQLiteDemo, save it in the usual

17
00:00:39,450 --> 00:00:43,820
location, hit next, choose our QT version,

18
00:00:43,820 --> 00:00:48,420
choose your kit, and finish. We want to

19
00:00:48,420 --> 00:00:52,879
change the text here to say SQLite Demo.

20
00:00:52,879 --> 00:00:55,890
We want to do our imports here, if you

21
00:00:55,890 --> 00:00:58,109
remember, we have to import QT quick

22
00:00:58,109 --> 00:01:00,559
local storage if we want to work with

23
00:01:00,559 --> 00:01:05,010
SQLite databases, so we say import 

24
00:01:05,010 --> 00:01:10,229
QtQuick.LocalStorage 2.0. We also want to

25
00:01:10,229 --> 00:01:13,320
import QtQuick.Dialogs because we

26
00:01:13,320 --> 00:01:15,720
are going to do a dialog to choose a

27
00:01:15,720 --> 00:01:18,990
color, let's do too here. So what we want

28
00:01:18,990 --> 00:01:21,659
to do is pretty much what we did in the

29
00:01:21,659 --> 00:01:23,700
settings, we want to save the location of

30
00:01:23,700 --> 00:01:25,590
the window and the color of the window,

31
00:01:25,590 --> 00:01:27,780
but this time we are going to use an

32
00:01:27,780 --> 00:01:30,479
SQLite database. We're going to put in a

33
00:01:30,479 --> 00:01:34,170
Rectangle component. Id is going to be

34
00:01:34,170 --> 00:01:37,470
contained... It is going to fill the

35
00:01:37,470 --> 00:01:41,460
parent, and it is going to be red by

36
00:01:41,460 --> 00:01:44,970
default. So we say red. Inside we want to

37
00:01:44,970 --> 00:01:47,670
have a mouse area because we want it to

38
00:01:47,670 --> 00:01:50,130
be clickable for the user to select the

39
00:01:50,130 --> 00:01:53,250
color of the window here using the

40
00:01:53,250 --> 00:01:56,310
dialog. The mouse area should fill the

41
00:01:56,310 --> 00:02:00,509
parent, and when it is clicked we do

42
00:02:00,509 --> 00:02:02,640
something. In the mouse area, we want to

43
00:02:02,640 --> 00:02:05,490
put in our dialog... ctrl A ctrl I

44
00:02:05,490 --> 00:02:08,128
to align... it is nothing fancy, it's

45
00:02:08,128 --> 00:02:10,709
everything we've done before. We have a

46
00:02:10,709 --> 00:02:13,210
dialogue, it has an ID,

47
00:02:13,210 --> 00:02:16,360
and we can accept the value, or we can

48
00:02:16,360 --> 00:02:19,150
reject it. When we click on the mouse

49
00:02:19,150 --> 00:02:21,310
area we want to open the dialog. We're

50
00:02:21,310 --> 00:02:30,010
going to say color... open... like this.

51
00:02:30,010 --> 00:02:32,980
And we want to give an ID to this Window,

52
00:02:32,980 --> 00:02:35,710
so we're going to say rootId,

53
00:02:35,710 --> 00:02:38,860
this will do. And I think by now we can

54
00:02:38,860 --> 00:02:40,870
run the application and be able to

55
00:02:40,870 --> 00:02:43,660
change the color of the rectangle that

56
00:02:43,660 --> 00:02:47,650
fills the window here. Let's check on IDs...

57
00:02:47,650 --> 00:02:52,900
this is right. Let's run. Okay, here is our

58
00:02:52,900 --> 00:02:55,210
application. The rectangle is red by

59
00:02:55,210 --> 00:02:57,280
default, if you click inside, you see a

60
00:02:57,280 --> 00:03:00,310
dialog like this, it says choose color. We

61
00:03:00,310 --> 00:03:02,440
can click inside to choose a color or

62
00:03:02,440 --> 00:03:06,010
we can move this slider here to choose

63
00:03:06,010 --> 00:03:09,250
between these colors. Let's choose this

64
00:03:09,250 --> 00:03:12,040
greenish color, hit OK, you see that our

65
00:03:12,040 --> 00:03:16,690
color is in. If we close and run again, our

66
00:03:16,690 --> 00:03:21,370
color and position are lost. We close, we

67
00:03:21,370 --> 00:03:23,530
open again, you see that it comes in the

68
00:03:23,530 --> 00:03:26,200
middle, it takes default values. We want

69
00:03:26,200 --> 00:03:29,020
to change this, we want to save the X&Y

70
00:03:29,020 --> 00:03:31,660
location of the window, we also want to

71
00:03:31,660 --> 00:03:33,910
save the width and height, and we want to

72
00:03:33,910 --> 00:03:37,150
save the color that is inside... all using

73
00:03:37,150 --> 00:03:39,910
SQLite. Now we are going to do quite a

74
00:03:39,910 --> 00:03:42,610
lot in JavaScript, so it is a good idea

75
00:03:42,610 --> 00:03:46,090
to create an external javascript file, do

76
00:03:46,090 --> 00:03:48,280
all things in there, and import it and

77
00:03:48,280 --> 00:03:50,650
just call the functions to do our dirty

78
00:03:50,650 --> 00:03:54,130
work in here. We want to come to qrc

79
00:03:54,130 --> 00:03:59,050
here, we add new Qt JS file, which is

80
00:03:59,050 --> 00:04:02,200
really JavaScript file, we choose this,

81
00:04:02,200 --> 00:04:08,310
we call it Database, and we next, and

82
00:04:08,310 --> 00:04:13,330
finish, and we take this out. We want to

83
00:04:13,330 --> 00:04:16,269
come to main.qml first, and put in a

84
00:04:16,269 --> 00:04:18,310
property for our database, we're going to

85
00:04:18,310 --> 00:04:22,000
say property... var... it's going to be a var,

86
00:04:22,000 --> 00:04:25,000
and it's called db, and it doesn't take

87
00:04:25,000 --> 00:04:26,280
any value by 

88
00:04:26,280 --> 00:04:28,470
default. We are going to come back to

89
00:04:28,470 --> 00:04:32,550
JavaScript and create a function, we call

90
00:04:32,550 --> 00:04:37,650
it dbInit to initialize our database.

91
00:04:37,650 --> 00:04:41,660
First we are going to console.log

92
00:04:42,200 --> 00:04:48,810
Initialize... And next we want to open our

93
00:04:48,810 --> 00:04:50,610
database... I am going to put in the

94
00:04:50,610 --> 00:04:53,520
statement... we define db in the main QML

95
00:04:53,520 --> 00:04:56,010
file, and we are going to be able to call

96
00:04:56,010 --> 00:04:59,820
the JavaScript file here, and make it

97
00:04:59,820 --> 00:05:03,210
look as if this was defined here, so we

98
00:05:03,210 --> 00:05:05,040
are going to be able to access things in

99
00:05:05,040 --> 00:05:07,770
here, that's why this db variable is

100
00:05:07,770 --> 00:05:10,590
available to us in this function here. Now

101
00:05:10,590 --> 00:05:12,930
we have our database opened, this is the

102
00:05:12,930 --> 00:05:15,990
database name, this is the version, this

103
00:05:15,990 --> 00:05:19,140
is the description of the database, and

104
00:05:19,140 --> 00:05:21,930
this is the estimated size of the

105
00:05:21,930 --> 00:05:24,750
database in bytes, we looked at this in

106
00:05:24,750 --> 00:05:27,240
the introductory video on the chapter

107
00:05:27,240 --> 00:05:29,880
here. After you have your database opened...

108
00:05:29,880 --> 00:05:32,010
and by the way, this is going to create

109
00:05:32,010 --> 00:05:34,380
the database if it is not available, if

110
00:05:34,380 --> 00:05:36,479
it is already available it is going to

111
00:05:36,479 --> 00:05:39,090
open it. After you do this, you want to do

112
00:05:39,090 --> 00:05:41,640
a transaction, so the transaction we're

113
00:05:41,640 --> 00:05:44,580
going to do is to create a table if it

114
00:05:44,580 --> 00:05:45,900
doesn't exist.

115
00:05:45,900 --> 00:05:49,800
This is a normal SQL query, nothing

116
00:05:49,800 --> 00:05:51,750
special here, we are creating the table

117
00:05:51,750 --> 00:05:55,140
called sqlitedemotable and it has two

118
00:05:55,140 --> 00:05:57,539
fields a name field and the value field,

119
00:05:57,539 --> 00:06:00,690
and they are a data type of text. By now

120
00:06:00,690 --> 00:06:02,850
we should have a database and the table

121
00:06:02,850 --> 00:06:05,669
ready to be consumed by our application.

122
00:06:05,669 --> 00:06:08,460
We can save data or read data from it.

123
00:06:08,460 --> 00:06:11,550
So what we want to do is to store the x

124
00:06:11,550 --> 00:06:14,280
and y location of this window here, rootId

125
00:06:14,280 --> 00:06:18,000
is the ID that we are going to use, we

126
00:06:18,000 --> 00:06:19,440
also want to capture the width and

127
00:06:19,440 --> 00:06:21,660
height of the window, we also want to

128
00:06:21,660 --> 00:06:23,640
save the color that the user chooses

129
00:06:23,640 --> 00:06:26,430
here, so that next time the user runs the

130
00:06:26,430 --> 00:06:29,100
application, the rectangle here displays

131
00:06:29,100 --> 00:06:33,210
the background of it in that color. So we

132
00:06:33,210 --> 00:06:35,130
are going to define our function to

133
00:06:35,130 --> 00:06:38,599
store data... function...

134
00:06:39,150 --> 00:06:41,620
It's not going to take any parameter

135
00:06:41,620 --> 00:06:43,630
because it is going to work on the data

136
00:06:43,630 --> 00:06:46,660
that we have in our QML file here. We

137
00:06:46,660 --> 00:06:49,480
want to console.log that we are storing

138
00:06:49,480 --> 00:06:53,350
data... copy that put that here and say

139
00:06:53,350 --> 00:07:03,040
"Storing data"... And we want to check to see

140
00:07:03,040 --> 00:07:05,980
if this db is available and initialized.

141
00:07:05,980 --> 00:07:11,460
The way we do that we say... if not db...

142
00:07:11,460 --> 00:07:15,010
return... okay, if the database is not

143
00:07:15,010 --> 00:07:17,470
available, we get out of this function, we

144
00:07:17,470 --> 00:07:19,240
don't do anything, because we are just

145
00:07:19,240 --> 00:07:21,700
going to get errors if we try to work on

146
00:07:21,700 --> 00:07:24,430
a database that is not available, that is

147
00:07:24,430 --> 00:07:27,220
not properly initialized. We want to put

148
00:07:27,220 --> 00:07:29,500
a semicolon here. Next we want to do a

149
00:07:29,500 --> 00:07:31,600
transaction that is going to store our

150
00:07:31,600 --> 00:07:34,450
data in the database. So we're going to

151
00:07:34,450 --> 00:07:41,170
say transaction(function(TX)), inside we

152
00:07:41,170 --> 00:07:43,480
are going to parse in the body of the

153
00:07:43,480 --> 00:07:46,180
function, and we should put a semicolon

154
00:07:46,180 --> 00:07:49,750
at the end, and we put this on different

155
00:07:49,750 --> 00:07:52,360
lines so that we have something good to

156
00:07:52,360 --> 00:07:54,730
look at. Inside here, we are going to

157
00:07:54,730 --> 00:07:57,040
try and update the data that is in this

158
00:07:57,040 --> 00:07:59,410
table here, if it is already available, or

159
00:07:59,410 --> 00:08:02,320
we are going to insert a new data set if

160
00:08:02,320 --> 00:08:05,020
the data is not already available. The

161
00:08:05,020 --> 00:08:06,730
first thing we want to do is to check

162
00:08:06,730 --> 00:08:11,200
and see if an SQLite demo entry is

163
00:08:11,200 --> 00:08:13,360
available in our table. The way we do

164
00:08:13,360 --> 00:08:20,140
that we say var result = tx... our

165
00:08:20,140 --> 00:08:22,870
transaction here, which is the parameter

166
00:08:22,870 --> 00:08:29,260
that we had... we say executeSql(), inside we

167
00:08:29,260 --> 00:08:32,409
parse in our SQL query. We are going to

168
00:08:32,409 --> 00:08:35,650
select everything from the table where

169
00:08:35,650 --> 00:08:40,360
name equals sqlitedemo, so I am going to

170
00:08:40,360 --> 00:08:42,039
put in the query because I don't want to

171
00:08:42,039 --> 00:08:43,840
type it it is very long... select

172
00:08:43,840 --> 00:08:47,530
everything from the table here where the

173
00:08:47,530 --> 00:08:49,800
name equals sqlitedemo.

174
00:08:49,800 --> 00:08:52,470
If you look at the table that we are

175
00:08:52,470 --> 00:08:54,870
designing for, you see that our data

176
00:08:54,870 --> 00:08:57,720
entry, the name for that equals 

177
00:08:57,720 --> 00:09:00,089
sqlitedemo. This is what we are checking, I just

178
00:09:00,089 --> 00:09:02,070
want you to have some context on what we

179
00:09:02,070 --> 00:09:04,560
are doing. This reminds me that we also

180
00:09:04,560 --> 00:09:06,870
have to show you how to look at the

181
00:09:06,870 --> 00:09:09,329
location of your database, we're going to

182
00:09:09,329 --> 00:09:12,720
do that, but first let's finish this, okay.

183
00:09:12,720 --> 00:09:14,760
Now that we have a result here, we're

184
00:09:14,760 --> 00:09:17,190
going to check and see if we actually

185
00:09:17,190 --> 00:09:21,120
had anything in this entry here, and if

186
00:09:21,120 --> 00:09:23,310
we had the entry, we're going to update

187
00:09:23,310 --> 00:09:26,430
that with a new data set, if the entry is

188
00:09:26,430 --> 00:09:27,870
not available, we're going to write a

189
00:09:27,870 --> 00:09:30,420
completely new data set in this entry

190
00:09:30,420 --> 00:09:33,089
here. But before we do that, we want to

191
00:09:33,089 --> 00:09:36,089
prepare our JSON data that we're going

192
00:09:36,089 --> 00:09:38,700
to write in the database. So let's say

193
00:09:38,700 --> 00:09:47,070
that. This is actually very easy, you just

194
00:09:47,070 --> 00:09:50,279
capture data from your qml component, the

195
00:09:50,279 --> 00:09:53,519
X location, the Y location, the width and

196
00:09:53,519 --> 00:09:56,310
height, you capture that, and you put

197
00:09:56,310 --> 00:09:58,470
that in a JSON object that we define

198
00:09:58,470 --> 00:10:01,890
here, okay. You see we have X is the

199
00:10:01,890 --> 00:10:05,730
X location of the root window, Y is the

200
00:10:05,730 --> 00:10:07,560
Y location, we have width and height,

201
00:10:07,560 --> 00:10:11,760
we also have the colors that we have in

202
00:10:11,760 --> 00:10:14,160
that rectangle of ours. We are capturing

203
00:10:14,160 --> 00:10:17,190
the Red Green and Blue component, and we

204
00:10:17,190 --> 00:10:19,500
are putting this in a JSON object that

205
00:10:19,500 --> 00:10:22,740
we call obj. This is what we are going to

206
00:10:22,740 --> 00:10:25,200
save in the database. Now we want to see

207
00:10:25,200 --> 00:10:28,079
the number of rows that we got from this

208
00:10:28,079 --> 00:10:31,470
SQL query here. This is going to return

209
00:10:31,470 --> 00:10:33,959
the number of rows that have been

210
00:10:33,959 --> 00:10:38,600
affected by this, so we can say 

211
00:10:38,600 --> 00:10:46,350
if(result.rows.length===1)... If we fall

212
00:10:46,350 --> 00:10:49,230
here, we already have the data entry and

213
00:10:49,230 --> 00:10:51,690
we just need to update it, so here we are

214
00:10:51,690 --> 00:10:55,500
going to do an update. If the length is

215
00:10:55,500 --> 00:10:59,010
not 1, it is probably 0, we didn't find

216
00:10:59,010 --> 00:10:59,699
anything

217
00:10:59,699 --> 00:11:02,489
the database, and we are going to create

218
00:11:02,489 --> 00:11:05,999
a new entry, that's what we're going to

219
00:11:05,999 --> 00:11:09,449
do here. So here we should say 

220
00:11:09,449 --> 00:11:19,970
console.log("Updating database table..."), and here

221
00:11:19,970 --> 00:11:29,579
console.log("Creating new database table...").

222
00:11:29,579 --> 00:11:32,429
And here we are doing to do the same

223
00:11:32,429 --> 00:11:34,799
thing we did here, so we are going to

224
00:11:34,799 --> 00:11:38,879
capture this, ok, copy this because I

225
00:11:38,879 --> 00:11:40,859
don't want to type it,

226
00:11:40,859 --> 00:11:44,850
I am lazy at typing, and we are going to

227
00:11:44,850 --> 00:11:47,759
put in a query to update the data. Here

228
00:11:47,759 --> 00:11:50,040
we are going to do the same thing and we

229
00:11:50,040 --> 00:11:52,079
are going to put in a query to create a

230
00:11:52,079 --> 00:11:54,509
new database entry. Our query to update

231
00:11:54,509 --> 00:11:57,059
is going to look like this, it's nothing

232
00:11:57,059 --> 00:11:59,749
fancy, really, if you know some SQL,

233
00:11:59,749 --> 00:12:03,749
update the table, set the value, it is

234
00:12:03,749 --> 00:12:06,299
one... value that we want to set, the 

235
00:12:06,299 --> 00:12:10,439
dqlitedemo value, and we want to set it to the

236
00:12:10,439 --> 00:12:13,259
value that we parse in here, and we take

237
00:12:13,259 --> 00:12:15,209
this object we have here and turn that

238
00:12:15,209 --> 00:12:17,399
into a string so that we can save it in

239
00:12:17,399 --> 00:12:20,639
the database. You use JSON.stringify, this

240
00:12:20,639 --> 00:12:23,399
is a method that comes from javascript,

241
00:12:23,399 --> 00:12:25,199
you can check it in the documentation

242
00:12:25,199 --> 00:12:27,449
and see what it does, but it turns your

243
00:12:27,449 --> 00:12:30,149
JSON into a string. Okay, just like this,

244
00:12:30,149 --> 00:12:32,639
we have updated our database with new

245
00:12:32,639 --> 00:12:35,579
data. We want to create a new data set if

246
00:12:35,579 --> 00:12:37,739
it is not available, and we are going to

247
00:12:37,739 --> 00:12:40,859
do an insert, and we are going to insert

248
00:12:40,859 --> 00:12:43,439
it into the table the values are going

249
00:12:43,439 --> 00:12:47,459
to be replaceable in this question marks,

250
00:12:47,459 --> 00:12:50,189
and what we are going to replace them is

251
00:12:50,189 --> 00:12:53,459
the name of the data entry and the value,

252
00:12:53,459 --> 00:12:55,919
and the value is really a json.stringify

253
00:12:55,919 --> 00:12:58,529
the object that we have defined here.

254
00:12:58,529 --> 00:13:01,289
And just like this, we are able to store

255
00:13:01,289 --> 00:13:04,259
data in our database, okay. If this is not

256
00:13:04,259 --> 00:13:06,600
clear to you, take some time to look at

257
00:13:06,600 --> 00:13:09,089
it again, it's really easy to understand.

258
00:13:09,089 --> 00:13:11,710
The only point where you might think

259
00:13:11,710 --> 00:13:14,200
that this is really hard is if you are

260
00:13:14,200 --> 00:13:16,990
rusty on sqlite, and it is not very

261
00:13:16,990 --> 00:13:19,470
difficult to search for an SQLite

262
00:13:19,470 --> 00:13:21,580
tutorial on the Internet

263
00:13:21,580 --> 00:13:24,010
to have an idea about what we are doing

264
00:13:24,010 --> 00:13:27,340
here. Now we have been able to store data,

265
00:13:27,340 --> 00:13:29,560
we want to read data. We are going to

266
00:13:29,560 --> 00:13:33,340
define a new method that is called 

267
00:13:33,340 --> 00:13:40,870
readData... function readDate(), it is not going

268
00:13:40,870 --> 00:13:42,880
to take any parameter, it is going to

269
00:13:42,880 --> 00:13:44,740
work directly on the data that we have

270
00:13:44,740 --> 00:13:47,950
in our qml file. The start is really

271
00:13:47,950 --> 00:13:50,020
going to be the same, we can copy this

272
00:13:50,020 --> 00:13:54,100
and put that in our new function, it's

273
00:13:54,100 --> 00:13:56,320
going to save us from typing a few

274
00:13:56,320 --> 00:13:59,560
things. We should say "Reading data...". And we

275
00:13:59,560 --> 00:14:01,480
are checking to see if the database is

276
00:14:01,480 --> 00:14:03,850
available, and if it's not available,

277
00:14:03,850 --> 00:14:05,500
we're going to return out of this

278
00:14:05,500 --> 00:14:08,230
function immediately. Next we want to do

279
00:14:08,230 --> 00:14:10,450
a db transaction, and it is going to be

280
00:14:10,450 --> 00:14:12,460
the same thing we did here, so we can

281
00:14:12,460 --> 00:14:15,520
actually copy this and paste this here,

282
00:14:15,520 --> 00:14:17,830
and take out everything inside, because

283
00:14:17,830 --> 00:14:20,800
we are going to do something completely

284
00:14:20,800 --> 00:14:22,870
different. We are going to read data from

285
00:14:22,870 --> 00:14:25,600
the database. We should say that here...

286
00:14:25,600 --> 00:14:32,530
"Reading data". We want to select

287
00:14:32,530 --> 00:14:35,590
everything in the database table where

288
00:14:35,590 --> 00:14:39,580
the name field equals sqlitedemo, this

289
00:14:39,580 --> 00:14:42,520
is what we are doing here, and we want to

290
00:14:42,520 --> 00:14:44,980
know if we actually got something from

291
00:14:44,980 --> 00:14:46,690
the database, this is where we know that

292
00:14:46,690 --> 00:14:53,620
we have data that we can work with. Now

293
00:14:53,620 --> 00:14:55,690
we need a way to take the data that we

294
00:14:55,690 --> 00:14:57,580
get from the database and turn that into

295
00:14:57,580 --> 00:15:00,910
a JSON object that we can then retrieve

296
00:15:00,910 --> 00:15:03,970
data from and use in our qml code. The

297
00:15:03,970 --> 00:15:06,160
way you do that you get the first row

298
00:15:06,160 --> 00:15:08,650
from the values that you get from the

299
00:15:08,650 --> 00:15:11,110
database, and you call value on it, and

300
00:15:11,110 --> 00:15:14,440
you have a value which is a string,

301
00:15:14,440 --> 00:15:16,810
really, you need to convert that to a

302
00:15:16,810 --> 00:15:19,990
JSON object, and you do that by calling

303
00:15:19,990 --> 00:15:22,600
JSON.parse and parsing in your string

304
00:15:22,600 --> 00:15:24,860
value. And by now we have

305
00:15:24,860 --> 00:15:26,810
an object that we can retrieve data from.

306
00:15:26,810 --> 00:15:29,840
Okay now that we have the JSON object, we

307
00:15:29,840 --> 00:15:32,030
can read the data into our qml

308
00:15:32,030 --> 00:15:34,970
properties. We say rootId.x =

309
00:15:34,970 --> 00:15:37,490
obj.x. Remember when we stored the

310
00:15:37,490 --> 00:15:40,730
data, we put that into a JSON object and

311
00:15:40,730 --> 00:15:43,540
we had these attributes: we have X, Y,

312
00:15:43,540 --> 00:15:47,990
width, height, color red, color green, color

313
00:15:47,990 --> 00:15:50,420
blue, and you see that we are reading

314
00:15:50,420 --> 00:15:52,730
everything by using the same attributes

315
00:15:52,730 --> 00:15:55,460
we use to store it data. This is very

316
00:15:55,460 --> 00:15:58,250
important, because if you get this wrong,

317
00:15:58,250 --> 00:16:00,740
the system is not going to know what you

318
00:16:00,740 --> 00:16:03,110
are trying to get from the database. Be

319
00:16:03,110 --> 00:16:05,510
careful about this. And by now, when you

320
00:16:05,510 --> 00:16:08,510
call the readData method, you are going

321
00:16:08,510 --> 00:16:10,280
to read the data from the database and

322
00:16:10,280 --> 00:16:13,430
stuff that into your qml components. We

323
00:16:13,430 --> 00:16:15,650
are storing location and size

324
00:16:15,650 --> 00:16:17,840
information on the window, and we are

325
00:16:17,840 --> 00:16:19,820
storing the background color of the

326
00:16:19,820 --> 00:16:22,340
rectangle inside. What remains now is

327
00:16:22,340 --> 00:16:25,490
coming to the qml file and import

328
00:16:25,490 --> 00:16:27,680
our JavaScript file, you already know how

329
00:16:27,680 --> 00:16:30,380
to do that. We want to come here and say

330
00:16:30,380 --> 00:16:37,280
import "Database.js", and we import

331
00:16:37,280 --> 00:16:40,280
that as... something... you specify a

332
00:16:40,280 --> 00:16:42,500
namespace here that you want to use to

333
00:16:42,500 --> 00:16:44,810
call your functions. Now we want to come

334
00:16:44,810 --> 00:16:46,910
to the end of the window here and say

335
00:16:46,910 --> 00:16:54,020
Component.onCompleted... we want to do

336
00:16:54,020 --> 00:16:58,760
something, and say Component.onDestruction...

337
00:16:58,760 --> 00:17:03,250
we want to do something.

338
00:17:03,250 --> 00:17:05,960
onCompleted, this is where this window

339
00:17:05,960 --> 00:17:09,109
here is loaded in memory, and we want to

340
00:17:09,109 --> 00:17:11,390
do something, we want to read the data

341
00:17:11,390 --> 00:17:15,560
and stuff that into our qml

342
00:17:15,560 --> 00:17:17,410
properties here, we are going to set

343
00:17:17,410 --> 00:17:20,750
location and size information, we also

344
00:17:20,750 --> 00:17:24,260
are going to set the color here, okay.

345
00:17:24,260 --> 00:17:26,390
This is how we read the data, and we can

346
00:17:26,390 --> 00:17:30,590
say JS.readData(), just like this. But

347
00:17:30,590 --> 00:17:32,120
before we read the data, we need to

348
00:17:32,120 --> 00:17:34,790
initialize our data base, so we should

349
00:17:34,790 --> 00:17:36,940
say JS.dbinit()...

350
00:17:36,940 --> 00:17:40,870
I just forgot that in a moment, I'm

351
00:17:40,870 --> 00:17:41,680
sorry about that.

352
00:17:41,680 --> 00:17:44,170
And when our component is about to die,

353
00:17:44,170 --> 00:17:46,480
we are going to save the data, so you're

354
00:17:46,480 --> 00:17:47,590
going to say 

355
00:17:47,590 --> 00:17:50,680
JS.storeData, this is what we call

356
00:17:50,680 --> 00:17:55,120
that. I clear the space here, do the same

357
00:17:55,120 --> 00:17:55,720
here,

358
00:17:55,720 --> 00:18:00,130
and this is neat. And by now, we can run

359
00:18:00,130 --> 00:18:02,830
the application and see if our thing is

360
00:18:02,830 --> 00:18:06,700
working here. Let's run. You see that it

361
00:18:06,700 --> 00:18:10,150
reads data, and it is reading the data

362
00:18:10,150 --> 00:18:12,270
from one of my previous test

363
00:18:12,270 --> 00:18:16,390
applications, but you get the idea. So

364
00:18:16,390 --> 00:18:18,670
we're going to bring it back in the

365
00:18:18,670 --> 00:18:21,280
middle here, and we're going to try and

366
00:18:21,280 --> 00:18:24,250
change the color, let's change it to blue

367
00:18:24,250 --> 00:18:31,720
like this, okay let's change it to pink

368
00:18:31,720 --> 00:18:34,600
like this, move the window to the left

369
00:18:34,600 --> 00:18:37,300
here, close the application, and you see

370
00:18:37,300 --> 00:18:40,600
that we get an error here... we didn't call

371
00:18:40,600 --> 00:18:44,560
the method right, we called it "exetcute", we

372
00:18:44,560 --> 00:18:47,950
did it all over the place. So we should

373
00:18:47,950 --> 00:18:55,870
say executeSql, we're going to be very

374
00:18:55,870 --> 00:19:03,100
careful about this now... executeSql, is it

375
00:19:03,100 --> 00:19:06,490
right? Where else do we have this?

376
00:19:06,490 --> 00:19:14,440
executeSql... executeSql here. I think we

377
00:19:14,440 --> 00:19:18,660
should be okay by now. I'm sorry for this.

378
00:19:18,660 --> 00:19:21,300
Let's bring the application somewhere,

379
00:19:21,300 --> 00:19:27,070
change the color to yellow this time, we

380
00:19:27,070 --> 00:19:29,410
change the size of the window, we close

381
00:19:29,410 --> 00:19:33,340
the application... what the heck is wrong

382
00:19:33,340 --> 00:19:35,760
with you?

383
00:19:45,520 --> 00:19:50,360
Let's save this. Come to qml, change a few

384
00:19:50,360 --> 00:19:54,590
things put in some spaces to have QT

385
00:19:54,590 --> 00:20:00,320
creator pick our changes, okay. We

386
00:20:00,320 --> 00:20:03,200
change the location of the window, we

387
00:20:03,200 --> 00:20:05,480
change the size, and we change the color

388
00:20:05,480 --> 00:20:09,290
in the middle to green, hit okay, close

389
00:20:09,290 --> 00:20:12,260
the application, now it is updating data.

390
00:20:12,260 --> 00:20:14,960
If we run again, our application should

391
00:20:14,960 --> 00:20:17,780
be in a new location, and it should have

392
00:20:17,780 --> 00:20:20,600
the color that we have specified. This is

393
00:20:20,600 --> 00:20:23,360
what I am talking about when I tell you

394
00:20:23,360 --> 00:20:25,610
that you can save data. This is really

395
00:20:25,610 --> 00:20:28,220
all we had to do in this lecture, and it

396
00:20:28,220 --> 00:20:30,680
isn't really rocket science, you have to

397
00:20:30,680 --> 00:20:32,660
use the function as we used here, and

398
00:20:32,660 --> 00:20:35,270
you can adapt these examples to save

399
00:20:35,270 --> 00:20:37,910
whatever you want in your database. The

400
00:20:37,910 --> 00:20:40,820
key here is to know your SQLite and know

401
00:20:40,820 --> 00:20:44,360
how to handle these queries, create, read

402
00:20:44,360 --> 00:20:47,180
update, and delete, and if you can do that,

403
00:20:47,180 --> 00:20:48,740
you're not going to have any problem

404
00:20:48,740 --> 00:20:50,750
storing your data in QT quick

405
00:20:50,750 --> 00:20:53,030
applications. The last thing I want to

406
00:20:53,030 --> 00:20:54,830
show you before we wrap up this lecture

407
00:20:54,830 --> 00:20:57,500
is how you can show the location of your

408
00:20:57,500 --> 00:20:59,690
database file. And the way you do that

409
00:20:59,690 --> 00:21:02,000
you come here in the main.cpp file,

410
00:21:02,000 --> 00:21:08,690
import QDebug... include <QDebug>. It is

411
00:21:08,690 --> 00:21:10,610
a class that allows you to do things

412
00:21:10,610 --> 00:21:13,640
like console log, showing log messages

413
00:21:13,640 --> 00:21:15,560
and we want to come down here and put

414
00:21:15,560 --> 00:21:19,310
our statement to debug output the

415
00:21:19,310 --> 00:21:23,060
location of the SQLite database. This is

416
00:21:23,060 --> 00:21:25,550
how you put it out. If we run the

417
00:21:25,550 --> 00:21:27,560
application now, we are going to see that

418
00:21:27,560 --> 00:21:29,690
in the application output, we are going

419
00:21:29,690 --> 00:21:33,620
to see a path on our drive, and you see

420
00:21:33,620 --> 00:21:35,330
that this is the location where my

421
00:21:35,330 --> 00:21:41,170
things are stored. We can go there, I

422
00:21:41,170 --> 00:21:44,500
think, we are going to need to take out

423
00:21:44,500 --> 00:21:48,770
these double backslashes, because

424
00:21:48,770 --> 00:21:50,840
sometimes they miss things up... I

425
00:21:50,840 --> 00:21:52,160
don't think windows is going to

426
00:21:52,160 --> 00:21:55,520
recognize this, but we can take that out

427
00:21:55,520 --> 00:22:03,070
manually... let's take this out, copy this,

428
00:22:03,070 --> 00:22:08,270
come to My Computer, paste that in here,

429
00:22:08,270 --> 00:22:12,050
and you see that we have qml in here,

430
00:22:12,050 --> 00:22:14,660
we have offline storage, we have

431
00:22:14,660 --> 00:22:17,480
databases, and these are our database

432
00:22:17,480 --> 00:22:21,290
files, okay. You cannot read this because

433
00:22:21,290 --> 00:22:24,200
it is binary file, but if you delete this,

434
00:22:24,200 --> 00:22:29,420
for example, let's delete that... okay we

435
00:22:29,420 --> 00:22:31,100
can't delete this because it is being

436
00:22:31,100 --> 00:22:33,860
used by some application, but I think we

437
00:22:33,860 --> 00:22:36,860
just lost our data. Let's run the

438
00:22:36,860 --> 00:22:40,160
application again, and you see that it

439
00:22:40,160 --> 00:22:43,220
becomes red, okay, you get the idea. That's

440
00:22:43,220 --> 00:22:45,290
the location of your database, it is

441
00:22:45,290 --> 00:22:48,050
trying to open this version and I think

442
00:22:48,050 --> 00:22:51,080
it is not existent... we should delete that

443
00:22:51,080 --> 00:22:55,790
file... how do we delete that if it is

444
00:22:55,790 --> 00:22:58,280
being used by an external application

445
00:22:58,280 --> 00:23:04,640
that we don't know? Now it's gone. Let's

446
00:23:04,640 --> 00:23:07,550
come to Qt creator, clean everything,

447
00:23:07,550 --> 00:23:15,290
clean, clean project, build, clean all, let's

448
00:23:15,290 --> 00:23:20,240
close this, run the application, and this

449
00:23:20,240 --> 00:23:22,280
time, we are not having this error, and

450
00:23:22,280 --> 00:23:26,930
you can store the data again. Let's make

451
00:23:26,930 --> 00:23:30,980
it green, reduce the size, close the

452
00:23:30,980 --> 00:23:34,940
application, start it again, and you see

453
00:23:34,940 --> 00:23:37,280
that it is working correctly. This is

454
00:23:37,280 --> 00:23:39,260
really all I had to say in this lecture.

455
00:23:39,260 --> 00:23:41,660
I hope you know how you can use SQLite

456
00:23:41,660 --> 00:23:44,240
to save and load your data in your Qt Quick

457
00:23:44,240 --> 00:23:46,670
with applications. And I hate to say it,

458
00:23:46,670 --> 00:23:48,620
but this is the last lecture in the

459
00:23:48,620 --> 00:23:51,050
course, and you have learned quite a lot

460
00:23:51,050 --> 00:23:53,540
if you have watched all the lectures in

461
00:23:53,540 --> 00:23:55,640
the course. In the next lecture, I am

462
00:23:55,640 --> 00:23:57,680
going to give you a few tips on how you

463
00:23:57,680 --> 00:23:59,690
can improve the knowledge that you

464
00:23:59,690 --> 00:24:01,940
have in this course, and move further

465
00:24:01,940 --> 00:24:03,889
in your Qt Creator UI development.

466
00:24:03,889 --> 00:00:00,000
I'll see you in the next lecture.

