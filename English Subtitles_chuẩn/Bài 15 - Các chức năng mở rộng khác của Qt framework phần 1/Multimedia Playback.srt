WEBVTT

00:00.820 --> 00:06.290
This is video 4.2 of controlling multimedia which covers multimedia playback. And in this video we're going

00:06.290 --> 00:10.880
to cover how to play videos using playlists and advanced video playback.

00:10.940 --> 00:12.780
So let's go ahead and get started.

00:13.840 --> 00:19.570
If we open our Play project and look at some of the data members in this media scroll all the way down

00:19.570 --> 00:26.560
to the bottom you can see that we've got a QMediaPlayer, a QMediaPlaylists and a QVideoWidget.

00:26.590 --> 00:30.990
Our QMediaPlayer can play songs, movies, or internet radio.

00:31.030 --> 00:36.580
Our playlist holds a list of everything that we want to play and our video widget will actually play

00:36.580 --> 00:37.440
the content.

00:37.510 --> 00:41.250
So let's go ahead and switch to our implementation file and initialize some of these classes.

00:44.250 --> 00:49.770
And the last thing that we need to do is go ahead and set our media player to have the VideoOutput

00:49.770 --> 00:52.080
of our video_widget. Awesome.

00:52.080 --> 00:56.370
So now that we got all this stuff initialized, let's go ahead and set up some of the interactivity. So

00:56.370 --> 01:01.460
you can see that we've got a bunch of PushButtons, we've got play, pause, stop, next and previous video.

01:01.650 --> 01:03.220
Let's go and connect some of those up.

01:03.330 --> 01:09.170
So the play_button will go ahead and get connected up to the MediaPlayer Play slot.

01:09.510 --> 01:14.660
The pause_button will get connected to the QMediaPlayer Pause slot.

01:14.830 --> 01:20.300
And similarly the stop_button will connect to to the MediaPlayer Stop slot.

01:20.540 --> 01:26.450
Now the next video and previous video, the clicked signals for these are actually going to get connected

01:26.450 --> 01:27.670
to our MediaPlaylist.

01:27.680 --> 01:35.100
And the MmediaPlaylist has a Next slot and a Previous slot, so we'll go and connect those right up.

01:35.160 --> 01:41.250
Now we want to update our buttons dynamically to let our users know what they can do or what makes sense

01:41.250 --> 01:41.940
to use.

01:42.030 --> 01:44.060
So we'll use the update_button slot.

01:44.070 --> 01:49.850
That's part of this MainWindow class. To selectively enable and disable buttons based on

01:49.860 --> 01:50.600
the media_player_state,

01:50.680 --> 01:54.550
The QMediaPlayer has a stateChanged signal, so let's wire that up.

01:56.800 --> 02:02.710
And the last thing is to go ahead and update our state using the StoppedState since that'll be the default

02:02.710 --> 02:03.210
for it.

02:04.780 --> 02:09.200
Now we want our users to be able to load files into our playlists.

02:09.220 --> 02:15.030
So let's add this ability into our menu bar. And once we've got that

02:15.050 --> 02:21.820
QAction, let's go ahead and connect the triggered signal to the trigger_media_file_ slot that's part

02:21.820 --> 02:22.170
of this

02:22.300 --> 02:22.940
MainWindow.

02:25.540 --> 02:25.960
Awesome.

02:25.960 --> 02:31.510
So let's scroll down to the slot and let's implement this using the FileName method from QFileDialog

02:31.510 --> 02:36.220
to allow users to select which files they want. Cool.

02:36.220 --> 02:42.370
So this will basically our QFileDialog will open up, our users can select files and the names, the

02:42.430 --> 02:44.240
StringList of those files that we've pushed here.

02:44.260 --> 02:50.890
So we will iterate over each of these and get the filepath out. And what we want to do is go ahead and add these

02:50.890 --> 02:55.270
to our media playlist. And we will do that using the addMedia method.

02:55.270 --> 03:02.050
Now the addMedia method expects a Url, so we'll use the QUrl class to convert from a QString to the

03:02.050 --> 03:10.380
Url expects. Lastly we want to see if the currentIndex is on set. And if it is we'll use the setCurrentIndex

03:10.380 --> 03:13.030
function to change it from the first index

03:13.050 --> 03:18.780
if it is. So if the media_playlist's currentIndex is equal to -1 we'll just set it equal

03:18.780 --> 03:23.550
to 0. 0 will always be the first index in an array.

03:24.390 --> 03:24.810
Awesome.

03:24.810 --> 03:26.420
So we set up our simple MediaPlayer.

03:26.430 --> 03:28.140
Let's go ahead and run it.

03:28.150 --> 03:34.350
And if we click open file here and we navigate to a file and hit play.

03:34.680 --> 03:39.720
You can see that we've got a simple video going. Awesome.

03:39.740 --> 03:45.230
Now we need to go a little bit deeper than this in order to set up working directly with video for the

03:45.230 --> 03:46.340
next section.

03:46.370 --> 03:50.490
So how do we get lower access to the actual data?

03:50.690 --> 03:56.000
Well in order to do this we'll need to subclass and implement a QAbstractVideoSurface.

03:56.030 --> 04:02.420
So if we open up our complex_playback project and look at the MainWindow and scroll down the code, looks

04:02.420 --> 04:03.230
very similar.

04:03.230 --> 04:09.320
The only difference is instead of creating a QVideoWidget we create our own specific implementation

04:09.380 --> 04:10.400
of VideoWidget.

04:10.430 --> 04:16.010
And if you look at the implementation file, instead of setting the VideoOutput to be our QWidget

04:16.130 --> 04:19.130
we call this get_videosurface helper method.

04:19.160 --> 04:22.190
So if we go ahead and change over to our VideoWidget

04:25.380 --> 04:29.940
you can see that we have re-implemented the paintEvent and the resizeEvent.

04:30.090 --> 04:35.310
So for this example we'll be using Qt painting engine so that we can focus more on the data manipulation

04:35.340 --> 04:38.580
and less on explaining graphics library calls.

04:38.580 --> 04:41.790
But this doesn't mean that we'll take a performance hit for this example.

04:41.790 --> 04:44.740
So we switch over to the implementation file or a VideoWidget.

04:44.970 --> 04:47.610
You can see for our paintEvent, it's very simple.

04:47.610 --> 04:49.650
We create a QPainter.

04:49.650 --> 04:56.550
We set the RenderHint to be Antialiasing and then we pass it off to our custom class which is the VideoSurface.

04:56.550 --> 05:02.100
And we basically do the same thing for a resizeEvent. We call the parent class and then we pass

05:02.100 --> 05:04.650
it off to our custom implementation.

05:04.650 --> 05:10.400
So now if we look at the header file for our VideoSurface class there is kind of a lot of code here

05:10.530 --> 05:12.320
and I'm not going to get into all of it.

05:12.330 --> 05:17.460
What I want to do is just follow the data because what we're interested in is how the video data gets

05:17.460 --> 05:19.310
here and how it gets displayed.

05:19.320 --> 05:23.620
So we're going to leave out some of these bottom classes which include these supportedPixelFormat and

05:23.630 --> 05:25.340
nearestFormat methods.

05:25.350 --> 05:28.640
Instead we're going to go ahead and start with our start function.

05:28.710 --> 05:31.660
That's where I actually enter into the usage of this class.

05:31.710 --> 05:36.930
So if we open up our implementation file and scroll to the start, you can see that we had passed in a

05:36.930 --> 05:43.380
QVideoSurfaceFormat in the form of format. And the first thing that we want to do is go ahead and get

05:43.380 --> 05:50.220
the size and an actual QImage image_format, because we will be using the QImage class to kind of help

05:50.220 --> 05:50.680
us out.

05:50.700 --> 05:54.990
We want to translate from the VideoSurfaceFormat to the ImageFormat so let's go and do that first.

05:54.990 --> 05:59.800
And you can see for our getting the QImage format out

05:59.820 --> 06:06.020
we actually use a static method ImageFormatFromPixelFormat, that's included in QVideoFrame.

06:06.150 --> 06:06.620
Awesome.

06:06.620 --> 06:11.850
So the first thing we want to do is go ahead and put a check in here, and we want check to see if the

06:11.850 --> 06:14.840
image format that we got out is actually valid

06:14.970 --> 06:20.520
and if there is actually data in our size. And if there's not we want to go ahead and punch out of this

06:20.580 --> 06:24.780
start function to tell our user that we can actually do what they need them to do.

06:26.080 --> 06:29.950
Perfect. So if we make it pass this first statement then we are good to go.

06:29.950 --> 06:31.050
We are in business.

06:31.060 --> 06:35.530
So the first thing we want to do is store our image_format that we just created there and store the

06:35.530 --> 06:37.790
size as part of the class.

06:37.990 --> 06:42.520
And then you can see here we've got a bunch of stuff that has to deal with the actual size.

06:42.550 --> 06:47.830
So we create get this source_rectangle and we actually call our parent class.

06:47.830 --> 06:53.530
The next thing that we do is actually update the video_widget geometry and then resize it.

06:53.530 --> 06:55.700
So let's go ahead and look at this resize function.

06:55.720 --> 06:58.050
So there's a couple of things that we need to know.

06:58.090 --> 07:00.390
First how big is the actual video coming in.

07:00.430 --> 07:02.990
And we get that from our surfaceFormat sizeHint.

07:03.010 --> 07:07.390
Next thing we want to know is how big is our parent widget which we can get from the size method.

07:07.420 --> 07:13.800
And then what we do is we basically scale the video size using the widget_size that we got out. And there's

07:13.810 --> 07:18.400
couple of helper methods that we use, which is the boundedTo method. And we tell Qt that we want to

07:18.400 --> 07:25.150
go ahead and keep that aspect ratio going. But once we've got our actual video sized, according to what

07:25.150 --> 07:30.510
our parent widget is, then we'll go ahead and create this target_rectangle which is just the point 0

07:30.510 --> 07:37.200
0 to the video size and we move the target_rectangle to the center of our video widget.

07:37.210 --> 07:41.120
So that's the resize function in a show.

07:41.170 --> 07:42.910
So let's go on to the next one.

07:42.910 --> 07:48.700
So this is where we're actually starting to touch the actual QVideoFrames as part of the present

07:48.940 --> 07:49.450
method.

07:49.450 --> 07:53.980
So we get, as part of a method call, we get our frames in and the first thing that we do is go ahead and

07:53.980 --> 07:58.690
check to make sure that the start method was called with the actual frame that we're getting passed

07:58.690 --> 07:59.180
in.

07:59.290 --> 08:04.230
And if it's not we'll go ahead and set an error and stop and return false because this is a boolean.

08:04.240 --> 08:08.290
But if everything is valid then we'll go ahead and store the current frame that we got passed in and

08:08.290 --> 08:11.800
then we're going to do something different. We're going to actually trigger a repaint.

08:11.890 --> 08:15.690
So we're just going to store the frame information and then trigger a repaint.

08:15.700 --> 08:20.060
So let's go ahead and look at the paint method.

08:20.080 --> 08:26.220
Because if you remember our parent widget, this paint class is the next thing that we're pretty much

08:26.220 --> 08:28.680
the only thing that we're going to call in a paintEvent.

08:28.680 --> 08:31.690
So the repaint that we just call will trigger that.

08:31.710 --> 08:34.130
And then we'll drop right into here.

08:34.140 --> 08:38.460
So the first thing we want to do as part of our paint class is actually make sure that our video frame

08:38.460 --> 08:44.500
is set to ReadOnly. And then we're going to go ahead and create a QImage.

08:44.520 --> 08:49.410
Remember that the video frame data is stored in the data member current_video_frame.

08:49.410 --> 08:52.700
So we're going to use that to go ahead and create our QImage.

08:55.480 --> 09:01.990
And once we've actually created our image let's just go ahead and draw. And our image needs to know

09:02.050 --> 09:07.660
how big the information came in on and how small the surface that we're actually going to paint on as

09:07.660 --> 09:10.030
well as our actual image information.

09:10.180 --> 09:16.410
And then when we have actually successfully drawn our image, we'll go ahead and release the video data.

09:16.810 --> 09:22.840
Now there is one weird thing here and that is sometimes our video data will come in upside down from

09:22.840 --> 09:24.060
our normal convention.

09:24.070 --> 09:25.860
So we actually need to check for that.

09:30.320 --> 09:36.890
And I'm not going to be into this too much but we're just going to tell QPainter to paint upside down in this case

09:36.950 --> 09:41.810
and we'll be using the translate method to do that for us and that will make it a little bit easier.

09:43.290 --> 09:46.480
So let's go ahead and run this now real quick.

09:46.520 --> 09:48.420
That should be everything that we need.

09:51.570 --> 09:56.210
And if we click Open File, go to our clip here and hit play,

09:56.230 --> 10:02.700
you can see that we've successfully implemented our abstract video surface completely.

10:02.800 --> 10:08.050
And that's going to set us up for success because now we actually know how to get out our QVideoFrame

10:08.050 --> 10:11.650
and how to actually work with our data directly.

10:11.650 --> 10:12.030
Right?

10:12.030 --> 10:16.740
And we do that with this current_video_frame, the bits, width, heighth and bytesPerLine.

10:17.050 --> 10:22.630
So with that we successfully learned how to work with more advanced video by handling the video data

10:22.630 --> 10:30.250
directly, added in some media player playlists handling and learn how to play videos. So join us next

10:30.250 --> 10:33.390
time we'll work with interacting with open computer vision.
