1
00:00:01,070 --> 00:00:04,220
[Music]

2
00:00:04,220 --> 00:00:07,980
In this video we will create a simple

3
00:00:07,980 --> 00:00:10,440
To-do list application. At the end of the

4
00:00:10,440 --> 00:00:12,179
tutorial you will have learned how to

5
00:00:12,179 --> 00:00:14,940
display and modify C++ models in QtQuick.

6
00:00:14,940 --> 00:00:17,130
If you're not familiar with QtQuick

7
00:00:17,130 --> 00:00:19,020
or Qt Creator, we'd recommend

8
00:00:19,020 --> 00:00:20,760
watching the 'Getting started with Qt:

9
00:00:20,760 --> 00:00:23,430
Hello Quick World' video first. As this

10
00:00:23,430 --> 00:00:24,930
video, you will see some familiarity

11
00:00:24,930 --> 00:00:28,289
with these topics. The first step is to

12
00:00:28,289 --> 00:00:31,619
launch a Qt creator, we will be using version

13
00:00:31,619 --> 00:00:36,000
4.4.1 along with Qt 5.9.2.

14
00:00:36,000 --> 00:00:39,150
Let's create a new project. Click the 'New

15
00:00:39,150 --> 00:00:41,780
Project' button.

16
00:00:43,990 --> 00:00:46,090
Select the 'Qt Quick Controls 2 Application'.

17
00:00:46,090 --> 00:00:48,550
And then click on the 'Choose'

18
00:00:48,550 --> 00:00:50,580
button.

19
00:00:51,730 --> 00:00:54,580
Give the project a name, we'll call ours

20
00:00:54,580 --> 00:00:55,540
'todo-list'

21
00:00:55,540 --> 00:00:58,860
separated by hyphens.

22
00:01:03,630 --> 00:01:05,760
Select the suitable location for the

23
00:01:05,760 --> 00:01:10,790
project, we will use the default location.

24
00:01:10,980 --> 00:01:14,690
Click 'Next' when you're done.

25
00:01:16,430 --> 00:01:19,940
Next choose a build system, we'll stick

26
00:01:19,940 --> 00:01:23,590
with the default which is qmake.

27
00:01:24,430 --> 00:01:26,580
We're now given the option of

28
00:01:26,580 --> 00:01:29,250
Qt Quick Controls 2 style, choose

29
00:01:29,250 --> 00:01:31,290
'Material' from the combo box and then

30
00:01:31,290 --> 00:01:33,920
click 'Next'.

31
00:01:37,970 --> 00:01:39,950
Select the kit that you'd like to use

32
00:01:39,950 --> 00:01:43,120
and then click 'Next'.

33
00:01:43,680 --> 00:01:47,750
Click 'Finish' to create the project.

34
00:01:49,049 --> 00:01:52,229
Our project has been created, and now

35
00:01:52,229 --> 00:01:54,679
we're looking at main.qml in the editor.

36
00:01:54,679 --> 00:01:57,210
Qt Creator generated some code for us

37
00:01:57,210 --> 00:02:00,310
that we don't need, so let's remove it.

38
00:02:00,310 --> 00:02:03,360
First remove the code in main.qml,

39
00:02:03,360 --> 00:02:05,829
leaving only application window and its

40
00:02:05,829 --> 00:02:07,539
properties.

41
00:02:07,539 --> 00:02:11,569
Then remove Page1Form.ui.qml

42
00:02:11,569 --> 00:02:14,300
by right-clicking on it in the

43
00:02:14,300 --> 00:02:18,580
product tree and selecting 'Remove File'.

44
00:02:19,280 --> 00:02:21,800
Check the 'Delete File Permanently' on the

45
00:02:21,800 --> 00:02:25,730
check box and then click 'OK'. We'll be

46
00:02:25,730 --> 00:02:27,860
doing most of our work in the editor, so

47
00:02:27,860 --> 00:02:32,210
we won't use UI QML files. Next rename

48
00:02:32,210 --> 00:02:35,180
Page1.qml to ToDoList.qml

49
00:02:35,180 --> 00:02:37,400
by right-clicking on it in the project

50
00:02:37,400 --> 00:02:40,900
tree and selecting 'Rename'.

51
00:02:46,450 --> 00:02:48,510
You

52
00:02:52,980 --> 00:02:55,170
add the following code to application

53
00:02:55,170 --> 00:02:57,470
window.

54
00:03:00,460 --> 00:03:02,520
You

55
00:03:18,410 --> 00:03:20,780
copy the imports at the top of main.qml

56
00:03:20,780 --> 00:03:23,090
and replace the imports in

57
00:03:23,090 --> 00:03:26,530
ToDoList.qml with them.

58
00:03:31,340 --> 00:03:33,400
You

59
00:03:36,530 --> 00:03:39,470
then replace the top level 'item' with a

60
00:03:39,470 --> 00:03:41,740
'frame'.

61
00:03:43,890 --> 00:03:46,050
The 'frame' type comes from Qt Quick

62
00:03:46,050 --> 00:03:48,330
Controls 2 and provides a convenient way

63
00:03:48,330 --> 00:03:49,890
to illustrate the boundary about a

64
00:03:49,890 --> 00:03:54,210
to-do-list. Let's run the application, click

65
00:03:54,210 --> 00:03:57,920
the 'Run' button or press Ctrl+R.

66
00:04:02,880 --> 00:04:04,940


67
00:04:05,770 --> 00:04:08,200
We see a small empty frame in the middle

68
00:04:08,200 --> 00:04:10,620
of the window.

69
00:04:10,810 --> 00:04:13,180
Close the application and return to

70
00:04:13,180 --> 00:04:15,540
Qt Creator.

71
00:04:16,320 --> 00:04:20,510
Within the frame, add a ListView.

72
00:04:24,030 --> 00:04:26,090


73
00:04:28,220 --> 00:04:30,290
ListView is the most common view type

74
00:04:30,290 --> 00:04:32,930
in Qt Quick. There are three important

75
00:04:32,930 --> 00:04:34,520
things that ListView needs in order to

76
00:04:34,520 --> 00:04:38,630
display data: a size, a model and a

77
00:04:38,630 --> 00:04:41,180
delegate. The size determines the area

78
00:04:41,180 --> 00:04:42,950
within which the user can interact with

79
00:04:42,950 --> 00:04:47,740
the list items. Add the following code.

80
00:04:52,400 --> 00:04:54,460
You

81
00:04:58,250 --> 00:05:00,320
notice that we're using implicitWidth

82
00:05:00,320 --> 00:05:02,360
and implicitHeight instead of width and

83
00:05:02,360 --> 00:05:06,290
height. Implicit sizes are a natural or

84
00:05:06,290 --> 00:05:10,430
default size for an item. For example the

85
00:05:10,430 --> 00:05:12,830
text type has an implicit size which is

86
00:05:12,830 --> 00:05:14,450
the width and height of the text it

87
00:05:14,450 --> 00:05:17,180
contains. In our case, frame will

88
00:05:17,180 --> 00:05:18,800
automatically resize itself to the

89
00:05:18,800 --> 00:05:21,170
implicit size of its child item so long

90
00:05:21,170 --> 00:05:24,050
as there is only one item. We take

91
00:05:24,050 --> 00:05:25,520
advantage of that here so that we don't

92
00:05:25,520 --> 00:05:27,830
have to explicitly specify a size for

93
00:05:27,830 --> 00:05:29,750
the frame.

94
00:05:29,750 --> 00:05:32,120
The ListView model is the source of the

95
00:05:32,120 --> 00:05:34,330
data that it uses to create list items.

96
00:05:34,330 --> 00:05:38,110
Type of the following code.

97
00:05:43,200 --> 00:05:45,520
This tells the ListView that the model

98
00:05:45,520 --> 00:05:48,250
is composed of 100 numbers. We use an

99
00:05:48,250 --> 00:05:50,080
integer based model for now because it

100
00:05:50,080 --> 00:05:51,790
will allow us to see how the ListView

101
00:05:51,790 --> 00:05:53,840
behaves.

102
00:05:53,840 --> 00:05:56,150
The model could also be a QML

103
00:05:56,150 --> 00:05:59,630
List Model and javascript array or a C++

104
00:05:59,630 --> 00:06:02,380
model amongst other things.

105
00:06:02,380 --> 00:06:05,270
The delegate is a component, a type of

106
00:06:05,270 --> 00:06:07,250
visual template that describes how list

107
00:06:07,250 --> 00:06:10,520
items will look. For our to do list, we

108
00:06:10,520 --> 00:06:12,410
want a check box to mark items as done

109
00:06:12,410 --> 00:06:16,639
and a text field to enter description. We

110
00:06:16,639 --> 00:06:17,990
also want these items to be laid out

111
00:06:17,990 --> 00:06:22,690
side by side, so add a RowLayout.

112
00:06:27,889 --> 00:06:29,949


113
00:06:31,879 --> 00:06:33,930
RowLayout comes from the QtQuick

114
00:06:33,930 --> 00:06:36,240
Layouts import and behaves similarly to

115
00:06:36,240 --> 00:06:38,879
the row from QtQuick. Within the row

116
00:06:38,879 --> 00:06:43,370
layout, add a CheckBox and a TextField.

117
00:06:48,090 --> 00:06:50,150


118
00:06:56,129 --> 00:06:58,409
These two types are controls from the

119
00:06:58,409 --> 00:07:01,199
QtQuick.Controls 2 import. Run the

120
00:07:01,199 --> 00:07:04,999
application to see how it behaves so far.

121
00:07:05,710 --> 00:07:07,810
You might notice that the contents for

122
00:07:07,810 --> 00:07:09,520
this view are visible outside of the

123
00:07:09,520 --> 00:07:12,640
frame which is not what we want. We'll

124
00:07:12,640 --> 00:07:15,760
fix that shortly. The CheckBox and TextField

125
00:07:15,760 --> 00:07:17,980
can be interacted with, but as they

126
00:07:17,980 --> 00:07:19,360
are not hooked up to the model, any

127
00:07:19,360 --> 00:07:21,040
changes will be lost when they go far

128
00:07:21,040 --> 00:07:23,560
enough outside the ListView. This is

129
00:07:23,560 --> 00:07:25,120
because this view destroys delegates

130
00:07:25,120 --> 00:07:26,710
that are not visible in order to save

131
00:07:26,710 --> 00:07:28,750
memory, allowing it to display large

132
00:07:28,750 --> 00:07:31,290
amounts of data in an efficient manner.

133
00:07:31,290 --> 00:07:33,040
To try this out,

134
00:07:33,040 --> 00:07:34,660
check the checkbox that is a few

135
00:07:34,660 --> 00:07:38,040
delegates down in the ListView.

136
00:07:41,300 --> 00:07:43,220
Scroll down to this view by flicking or

137
00:07:43,220 --> 00:07:46,000
scrolling with the mouse wheel,

138
00:07:49,520 --> 00:07:53,289
then scroll back up to the top.

139
00:07:54,360 --> 00:07:56,909
The checkbox is no longer checked as it

140
00:07:56,909 --> 00:07:59,650
was destroyed and recreated.

141
00:07:59,650 --> 00:08:02,320
Close the application and go back to

142
00:08:02,320 --> 00:08:07,500
Qt Creator. Set 'clip' to true on the ListView.

143
00:08:09,120 --> 00:08:11,580
This will ensure that any list items

144
00:08:11,580 --> 00:08:14,400
outside of the view will not be visible. In

145
00:08:14,400 --> 00:08:19,040
the delegate, set 'width' to 'parent.width'.

146
00:08:23,070 --> 00:08:25,290
Now the row layout will be as wide as

147
00:08:25,290 --> 00:08:27,480
ListView whereas before it was only as

148
00:08:27,480 --> 00:08:29,250
wide as combined widths of its children,

149
00:08:29,250 --> 00:08:33,390
the CheckBox and the TextField. We want the

150
00:08:33,390 --> 00:08:35,429
TextField to be as wide as possible so

151
00:08:35,429 --> 00:08:37,080
that the user has plenty of space to

152
00:08:37,080 --> 00:08:40,200
write in. Add the following attached

153
00:08:40,200 --> 00:08:43,669
property binding to text field.

154
00:08:48,620 --> 00:08:50,680


155
00:08:52,089 --> 00:08:54,490
and attached property provides a way to

156
00:08:54,490 --> 00:08:56,589
annotate an object with extra properties

157
00:08:56,589 --> 00:08:58,360
or signal handles that are otherwise

158
00:08:58,360 --> 00:09:01,509
unavailable to it. In this case, we use

159
00:09:01,509 --> 00:09:03,370
the layout attached type to make sure the

160
00:09:03,370 --> 00:09:05,350
text field takes up as much horizontal

161
00:09:05,350 --> 00:09:08,069
space as possible.

162
00:09:08,260 --> 00:09:12,660
Run the application to see the changes.

163
00:09:14,240 --> 00:09:16,339
Notice that the ListView items are no

164
00:09:16,339 --> 00:09:17,929
longer visible outside of the view and

165
00:09:17,929 --> 00:09:21,309
the TextField is wider.

166
00:09:21,700 --> 00:09:24,370
Now we'll take a look at the model. Close

167
00:09:24,370 --> 00:09:27,840
the application and return to Qt Creator.

168
00:09:27,840 --> 00:09:30,130
Replace the integer model with a list

169
00:09:30,130 --> 00:09:32,430
model.

170
00:09:36,300 --> 00:09:39,300
Within it, add a list element object with

171
00:09:39,300 --> 00:09:41,990
the following code.

172
00:09:45,900 --> 00:09:47,960


173
00:09:57,139 --> 00:09:59,299
Each property in a list element is

174
00:09:59,299 --> 00:10:01,399
called a 'role'. If you're familiar with

175
00:10:01,399 --> 00:10:03,769
C++ models and queued, it's the same

176
00:10:03,769 --> 00:10:04,459
concept.

177
00:10:04,459 --> 00:10:07,069
The 'done' role solves boolean values and

178
00:10:07,069 --> 00:10:10,429
the 'description' role stall strings. Copy

179
00:10:10,429 --> 00:10:12,439
and paste the list element and set as

180
00:10:12,439 --> 00:10:15,819
properties to the following values.

181
00:10:20,889 --> 00:10:22,949


182
00:10:35,550 --> 00:10:37,560
If we were to run the application now,

183
00:10:37,560 --> 00:10:40,140
we'd have 2 list items but they won't

184
00:10:40,140 --> 00:10:41,910
display the data from our model because

185
00:10:41,910 --> 00:10:44,700
they're not connected to it yet. In the

186
00:10:44,700 --> 00:10:46,620
checkbox control, set the 'checked'

187
00:10:46,620 --> 00:10:50,120
property to model.done.

188
00:10:55,320 --> 00:10:57,380

189
00:11:00,180 --> 00:11:02,279
Roles in model are available to

190
00:11:02,279 --> 00:11:04,830
delegates through the model object. We

191
00:11:04,830 --> 00:11:06,450
could also refer to the role directly

192
00:11:06,450 --> 00:11:08,130
without going through the model object.

193
00:11:08,130 --> 00:11:11,040
However doing it this way will result in

194
00:11:11,040 --> 00:11:12,930
the code being easier for others to read

195
00:11:12,930 --> 00:11:15,390
and understand as they can instantly see

196
00:11:15,390 --> 00:11:18,240
where the properties come from. In text

197
00:11:18,240 --> 00:11:20,760
field, set the text property to

198
00:11:20,760 --> 00:11:23,240
model.description.

199
00:11:28,470 --> 00:11:30,530


200
00:11:35,190 --> 00:11:37,800
Now I'm going to run the application.

201
00:11:37,800 --> 00:11:39,540
The checkbox and text field are displaying

202
00:11:39,540 --> 00:11:42,440
the data from the model.

203
00:11:42,470 --> 00:11:44,960
However, any changes to the controls

204
00:11:44,960 --> 00:11:47,390
values are not stored in the model. For

205
00:11:47,390 --> 00:11:49,010
that to happen, we need to respond to

206
00:11:49,010 --> 00:11:50,990
user interaction and set the values of

207
00:11:50,990 --> 00:11:53,780
the model rules accordingly. Close the

208
00:11:53,780 --> 00:11:57,310
application and return to Qt Creator.

209
00:11:57,860 --> 00:12:02,350
In the CheckBox, add the following code.

210
00:12:06,320 --> 00:12:08,380


211
00:12:11,620 --> 00:12:13,840
Now whenever the checkbox is clicked for

212
00:12:13,840 --> 00:12:16,390
your mouse, touch or keyboard, the new

213
00:12:16,390 --> 00:12:18,790
value will be stored in the model. In

214
00:12:18,790 --> 00:12:22,110
text fields, add this code.

215
00:12:26,980 --> 00:12:29,040


216
00:12:33,059 --> 00:12:35,579
This does something similar with the

217
00:12:35,579 --> 00:12:36,959
only different thing that the editing

218
00:12:36,959 --> 00:12:38,369
finished signal ((onEditingFinished) is emitted

219
00:12:38,369 --> 00:12:40,109
whenever the Enter key is pressed or

220
00:12:40,109 --> 00:12:43,709
the text field loses focus. Our to-do

221
00:12:43,709 --> 00:12:45,929
list can now be edited but are still

222
00:12:45,929 --> 00:12:48,989
using the qml based list model. For some

223
00:12:48,989 --> 00:12:51,029
use cases, simple models like this are

224
00:12:51,029 --> 00:12:53,219
sufficient, especially if the data cannot

225
00:12:53,219 --> 00:12:55,199
be editted or does not need to be saved

226
00:12:55,199 --> 00:12:58,079
to disk in order to be persistent. In

227
00:12:58,079 --> 00:13:00,449
most cases however the logic of the

228
00:13:00,449 --> 00:13:03,599
application is in C++ and hence the C++

229
00:13:03,599 --> 00:13:05,549
model is needed to provide a startup to

230
00:13:05,549 --> 00:13:10,829
QML. Let's add a C++ model. Open the 'File'

231
00:13:10,829 --> 00:13:14,959
Menu and select 'New File or Project'.

232
00:13:18,380 --> 00:13:20,790
Under the 'Files and Classes' section,

233
00:13:20,790 --> 00:13:23,899
select Qt

234
00:13:25,680 --> 00:13:28,290
then select 'Qt item model' from the

235
00:13:28,290 --> 00:13:30,460
list.

236
00:13:30,460 --> 00:13:33,330
Click the 'Choose' button,

237
00:13:33,330 --> 00:13:35,190
now we're looking at a wizard that will

238
00:13:35,190 --> 00:13:38,070
create the skeleton of our model. For the

239
00:13:38,070 --> 00:13:42,050
'Class Name', type ToDoModel.

240
00:13:47,170 --> 00:13:50,150
In the Base Class select 

241
00:13:50,150 --> 00:13:52,630
'QtAbtractListModel'.

242
00:13:54,630 --> 00:13:57,130
This is a convenience class

243
00:13:57,130 --> 00:13:59,290
implementing list models and it's derived from

244
00:13:59,290 --> 00:14:01,360
QtAbstractItemModel which is the base

245
00:14:01,360 --> 00:14:03,390
class of all other models in Qt.

246
00:14:03,390 --> 00:14:07,300
Uncheck 'Customize header row' and check

247
00:14:07,300 --> 00:14:10,340
'Items are editable'.

248
00:14:10,340 --> 00:14:12,830
The header and source file names are

249
00:14:12,830 --> 00:14:15,080
automatically suggested for us based on

250
00:14:15,080 --> 00:14:19,900
the class name we entered. Click Next,

251
00:14:20,810 --> 00:14:23,960
and then finish.

252
00:14:23,960 --> 00:14:26,620
We're now looking at to todomodel.cpp.

253
00:14:26,620 --> 00:14:28,910
To start off we're going to implement

254
00:14:28,910 --> 00:14:30,830
just enough functionality so that we can

255
00:14:30,830 --> 00:14:33,380
see our C++ model in our Qt ListView.

256
00:14:33,380 --> 00:14:35,660
The first thing that we need to do

257
00:14:35,660 --> 00:14:37,700
is define the role names that we use in

258
00:14:37,700 --> 00:14:42,529
QML, 'done' and 'description'. Switch to the

259
00:14:42,529 --> 00:14:44,390
header file by pressing F4 or

260
00:14:44,390 --> 00:14:46,339
right-clicking anywhere in the file and

261
00:14:46,339 --> 00:14:48,680
selecting 'Switch Header/Source' from the

262
00:14:48,680 --> 00:14:51,100
context menu.

263
00:14:52,080 --> 00:14:54,390
Add the following enum after the

264
00:14:54,390 --> 00:14:56,900
constructor.

265
00:15:01,059 --> 00:15:03,119


266
00:15:19,980 --> 00:15:22,209
Add the following code after

267
00:15:22,209 --> 00:15:24,660
the last function.

268
00:15:28,089 --> 00:15:30,149


269
00:15:50,070 --> 00:15:52,000
Right-click on the function signature

270
00:15:52,000 --> 00:15:55,060
and select 'Refactor', 'Add definition in 

271
00:15:55,060 --> 00:15:58,260
todomodel.cpp'.

272
00:16:03,279 --> 00:16:05,749
We've now been taken to the definition

273
00:16:05,749 --> 00:16:08,270
of the function in the source file.

274
00:16:08,270 --> 00:16:11,590
Add the following code.

275
00:16:15,279 --> 00:16:17,339


276
00:16:55,190 --> 00:16:57,230
In the 'rowCount' function add a

277
00:16:57,230 --> 00:17:01,450
'return' statement that simply returns 100.

278
00:17:07,500 --> 00:17:11,369
This will give us 100 rows in the model.

279
00:17:11,369 --> 00:17:14,490
In the 'data' function, add this code after

280
00:17:14,490 --> 00:17:17,300
the FIXME comment.

281
00:17:21,829 --> 00:17:23,890


282
00:18:05,020 --> 00:18:07,480
Now the model will return placeholder   

283
00:18:07,480 --> 00:18:09,460
data but we still need to make QML

284
00:18:09,460 --> 00:18:15,480
aware of it and use it. Open main.cpp.

285
00:18:17,250 --> 00:18:20,340
Add an 'include' for 'todomodel.h' after

286
00:18:20,340 --> 00:18:23,030
the Qt includes.

287
00:18:27,500 --> 00:18:29,560


288
00:18:31,100 --> 00:18:33,679
Then after the line where QGuiApplication

289
00:18:33,679 --> 00:18:38,169
is constructed, add this code

290
00:18:42,410 --> 00:18:44,470


291
00:19:09,240 --> 00:19:12,060
This function registers as C++ model

292
00:19:12,060 --> 00:19:14,240
with a QML type system.

293
00:19:14,240 --> 00:19:17,940
Come to ToDoList.qml,

294
00:19:17,940 --> 00:19:20,549
add an import for us ToDo library after

295
00:19:20,549 --> 00:19:23,330
the Qt imports.

296
00:19:28,020 --> 00:19:30,080


297
00:19:32,100 --> 00:19:36,450
Replace the ListModel with ToDoModel

298
00:19:39,549 --> 00:19:41,610


299
00:19:44,460 --> 00:19:47,190
Open the 'Build' menu and select 'Run qmake'.

300
00:19:47,190 --> 00:19:49,340


301
00:19:53,380 --> 00:19:56,269
This ensures that MOC, the meta object

302
00:19:56,269 --> 00:19:59,360
compiler, is run. Any class with the Qt

303
00:19:59,360 --> 00:20:00,919
object macro that is added to a project

304
00:20:00,919 --> 00:20:04,100
requires qmake to be run. Now run

305
00:20:04,100 --> 00:20:06,440
the application which will also call it

306
00:20:06,440 --> 00:20:08,830
to be built.

307
00:20:11,690 --> 00:20:14,830
A model data from C++ is displayed.

308
00:20:14,830 --> 00:20:16,940
Notice it's not possible to

309
00:20:16,940 --> 00:20:20,289
change the values of the controls.

310
00:20:21,960 --> 00:20:24,880
To make the controls editable, we have to

311
00:20:24,880 --> 00:20:26,830
implement the set data function which

312
00:20:26,830 --> 00:20:28,870
also requires us to store the Todo-list

313
00:20:28,870 --> 00:20:31,600
start of somewhere. We could store the

314
00:20:31,600 --> 00:20:33,550
data in the model but in a real-world

315
00:20:33,550 --> 00:20:35,290
scenario, the data is stored in the

316
00:20:35,290 --> 00:20:39,040
backend separate from the model. Open the

317
00:20:39,040 --> 00:20:42,430
'File' menu and select a 'New file or

318
00:20:42,430 --> 00:20:43,960
project'.

319
00:20:43,960 --> 00:20:46,150
Under the 'Files and Classes' the section,

320
00:20:46,150 --> 00:20:52,110
select 'C++' then 'C++ Class'.

321
00:20:52,370 --> 00:20:54,590
We're now looking at the C++ class

322
00:20:54,590 --> 00:20:57,950
wizard, type ToDoList into the 'Class

323
00:20:57,950 --> 00:21:00,490
name' field.

324
00:21:02,630 --> 00:21:05,600
In the Base Class combo box

325
00:21:05,600 --> 00:21:08,020
select QObject,

326
00:21:09,389 --> 00:21:12,600
click Next,

327
00:21:12,600 --> 00:21:15,600
and then click Finish. We're now looking

328
00:21:15,600 --> 00:21:18,660
at todolist.cpp, switch to the

329
00:21:18,660 --> 00:21:21,020
header file.

330
00:21:23,180 --> 00:21:25,670
There are three actions todolist class

331
00:21:25,670 --> 00:21:27,610
should support in terms of todo items:

332
00:21:27,610 --> 00:21:30,320
adding new items, modifying existing

333
00:21:30,320 --> 00:21:34,670
items and removing items. Each to-do item

334
00:21:34,670 --> 00:21:36,170
has two properties that we defined as

335
00:21:36,170 --> 00:21:40,220
roles earlier, 'done' and 'description'. Let's

336
00:21:40,220 --> 00:21:41,900
make it, ToDoItem struct, to make it

337
00:21:41,900 --> 00:21:45,410
easier to manage multiple items. Add the

338
00:21:45,410 --> 00:21:47,120
following code above ToDoList class

339
00:21:47,120 --> 00:21:49,780
public section.

340
00:21:54,650 --> 00:21:56,710


341
00:22:13,680 --> 00:22:16,300
Include QVector after the QObject

342
00:22:16,300 --> 00:22:18,630
include.

343
00:22:22,070 --> 00:22:24,130


344
00:22:25,539 --> 00:22:28,779
Add a private QVector ToDoItem as a

345
00:22:28,779 --> 00:22:32,220
member variable of ToDoList.

346
00:22:36,679 --> 00:22:38,740


347
00:22:46,460 --> 00:22:49,080
Next we're going to add three functions

348
00:22:49,080 --> 00:22:50,700
to support the actions we mentioned

349
00:22:50,700 --> 00:22:54,090
earlier. After the constructor and before

350
00:22:54,090 --> 00:22:56,520
the signal's keyword, add the following

351
00:22:56,520 --> 00:22:58,880
code.

352
00:23:03,690 --> 00:23:05,750


353
00:23:13,960 --> 00:23:16,299
This will allow the model to modify the

354
00:23:16,299 --> 00:23:20,080
to-do lists data, next add two functions

355
00:23:20,080 --> 00:23:23,490
below the 'public slots' section.

356
00:23:28,200 --> 00:23:30,260


357
00:23:44,490 --> 00:23:47,910
This will be called by the Qml code

358
00:23:47,910 --> 00:23:50,220
Under the 'signals' section, add the

359
00:23:50,220 --> 00:23:52,700
following code.

360
00:23:56,750 --> 00:23:58,810


361
00:24:27,540 --> 00:24:29,970
Using pre and post signals matches up

362
00:24:29,970 --> 00:24:32,670
with what the model expects. Need to

363
00:24:32,670 --> 00:24:34,290
be notified before something is about to

364
00:24:34,290 --> 00:24:36,120
happen to the data that it is exposing

365
00:24:36,120 --> 00:24:39,480
and also afterwards. Now we need to

366
00:24:39,480 --> 00:24:40,920
provide a way for the model to access

367
00:24:40,920 --> 00:24:43,800
the data in the list. Add this function

368
00:24:43,800 --> 00:24:46,760
after the constructor.

369
00:24:51,460 --> 00:24:53,520


370
00:25:02,920 --> 00:25:06,220
Let's implement these functions. For each

371
00:25:06,220 --> 00:25:08,560
function, except the signals which don't

372
00:25:08,560 --> 00:25:11,020
need definitions, we're going to be using

373
00:25:11,020 --> 00:25:12,850
Qt Creator's refactoring option to add a

374
00:25:12,850 --> 00:25:14,460
definition in the source file.

375
00:25:14,460 --> 00:25:16,570
Right-click on the signature of the

376
00:25:16,570 --> 00:25:20,710
items function and select a 'Refactor',

377
00:25:20,710 --> 00:25:25,090
'Add definition in todolist.cpp'.

378
00:25:25,090 --> 00:25:27,399
In the body of the function, add the

379
00:25:27,399 --> 00:25:29,879
following code.

380
00:25:35,120 --> 00:25:39,350
Do the same for setItmAt.

381
00:25:42,429 --> 00:25:44,490


382
00:25:48,230 --> 00:25:52,299
In its body add this code.

383
00:25:54,730 --> 00:25:56,790


384
00:26:09,860 --> 00:26:12,549
First we check if the index is valid,

385
00:26:12,549 --> 00:26:14,570
returning false if it's not.

386
00:26:14,570 --> 00:26:17,030
The set data function ToDoModel

387
00:26:17,030 --> 00:26:18,799
returns a bool to indicate whether or

388
00:26:18,799 --> 00:26:20,380
not the data was successfully modified.

389
00:26:20,380 --> 00:26:24,679
So that's why we also return a bool. Next

390
00:26:24,679 --> 00:26:27,790
add the following.

391
00:26:32,300 --> 00:26:34,360


392
00:27:04,940 --> 00:27:08,120
This stores the current or old item in a

393
00:27:08,120 --> 00:27:11,060
local const variable then checks if the

394
00:27:11,060 --> 00:27:13,040
new item has identical values to the old

395
00:27:13,040 --> 00:27:16,010
one, if so it returns false to indicate

396
00:27:16,010 --> 00:27:18,950
that nothing has changed. Finally add

397
00:27:18,950 --> 00:27:21,610
this code.

398
00:27:26,020 --> 00:27:28,080


399
00:27:33,700 --> 00:27:35,740
If the execution of the code has gotten

400
00:27:35,740 --> 00:27:37,540
this far it means that the item has

401
00:27:37,540 --> 00:27:39,760
changed so we store it in our lists and

402
00:27:39,760 --> 00:27:41,580
return true.

403
00:27:41,580 --> 00:27:45,590
Now let's implement the two slots,

404
00:27:47,429 --> 00:27:50,339
Add a definition for append item via the

405
00:27:50,339 --> 00:27:53,119
refactor menu.

406
00:27:57,430 --> 00:28:02,040
Add the following code to its body.

407
00:28:04,890 --> 00:28:06,950


408
00:28:25,720 --> 00:28:28,029
We omit the pre and post signals before

409
00:28:28,029 --> 00:28:28,940
and after

410
00:28:28,940 --> 00:28:30,580
the appendItem.

411
00:28:30,580 --> 00:28:32,500
Eventually we will connect the model up

412
00:28:32,500 --> 00:28:34,710
to their signals.

413
00:28:34,710 --> 00:28:38,020
Go back to the header file

414
00:28:38,020 --> 00:28:40,000
and add a definition for remove

415
00:28:40,000 --> 00:28:42,750
completed items.

416
00:28:45,389 --> 00:28:49,549
Add the following "for" loop to its body.

417
00:28:52,940 --> 00:28:55,000


418
00:29:02,630 --> 00:29:07,510
Then within the "for" loop, add this code.

419
00:29:10,509 --> 00:29:12,570


420
00:29:50,320 --> 00:29:52,630
We loop over each item in the list and

421
00:29:52,630 --> 00:29:56,020
check if it's 'done'. If so we omit the pre

422
00:29:56,020 --> 00:29:58,630
signal, remove the item and then omit the

423
00:29:58,630 --> 00:30:01,450
post signal. If the item is not 'done' we

424
00:30:01,450 --> 00:30:03,210
move on to the next one.

425
00:30:03,210 --> 00:30:05,380
Finally we're going to pretend that our

426
00:30:05,380 --> 00:30:07,360
list already had some data in it by

427
00:30:07,360 --> 00:30:11,250
appending a few items in the constructor.

428
00:30:16,530 --> 00:30:18,590


429
00:30:44,110 --> 00:30:47,490
After do this, class is now done.

430
00:30:47,490 --> 00:30:50,799
Typically C++ classes like this created

431
00:30:50,799 --> 00:30:52,360
as part of the larger application

432
00:30:52,360 --> 00:30:55,179
back-end in C++, so that's what we're

433
00:30:55,179 --> 00:30:57,610
going to do. We'll create an instance of

434
00:30:57,610 --> 00:31:01,110
the past in main.cpp .

435
00:31:02,960 --> 00:31:05,879
After the last Qt include add this

436
00:31:05,879 --> 00:31:08,119
line.

437
00:31:12,060 --> 00:31:14,120


438
00:31:16,070 --> 00:31:18,410
This is necessary in order to be able to

439
00:31:18,410 --> 00:31:21,560
expose the object to Qml,

440
00:31:21,560 --> 00:31:26,170
then include todolist.h

441
00:31:30,250 --> 00:31:32,310


442
00:31:32,500 --> 00:31:35,860
After the qmlRegisterType code, add this

443
00:31:35,860 --> 00:31:38,100
line.

444
00:31:42,169 --> 00:31:44,230


445
00:31:46,330 --> 00:31:49,630
And before the engine.load code, add this

446
00:31:49,630 --> 00:31:51,870
line.

447
00:31:55,700 --> 00:31:57,760


448
00:32:19,680 --> 00:32:21,870
This is where the to-do list is actually

449
00:32:21,870 --> 00:32:24,930
exposed to QML. We set it as a context

450
00:32:24,930 --> 00:32:26,490
property which means that it is

451
00:32:26,490 --> 00:32:28,620
available to any Qml files loaded by

452
00:32:28,620 --> 00:32:31,050
the application. There are other ways to

453
00:32:31,050 --> 00:32:33,750
expose other Qml as properties but

454
00:32:33,750 --> 00:32:36,180
this is the most convenient one.

455
00:32:36,180 --> 00:32:39,390
Run qmake

456
00:32:43,270 --> 00:32:45,580
and then build a project to check

457
00:32:45,580 --> 00:32:48,180
that there are no errors.

458
00:32:51,590 --> 00:32:53,629
Now we're going to make ToDoModel

459
00:32:53,629 --> 00:32:57,289
aware of to-do lists. Open todomodel.h

460
00:32:57,289 --> 00:33:00,049
and add a forward declaration for to-do

461
00:33:00,049 --> 00:33:02,259
list.

462
00:33:07,290 --> 00:33:09,350


463
00:33:11,280 --> 00:33:13,830
We'll only be referring to to-do list

464
00:33:13,830 --> 00:33:15,810
through pointers in the header, so it's

465
00:33:15,810 --> 00:33:18,540
not necessary to include it yet. After

466
00:33:18,540 --> 00:33:20,940
the Q_OBJECT macro, begin typing

467
00:33:20,940 --> 00:33:23,130
Q_PROPERTY and then hit Enter,

468
00:33:23,130 --> 00:33:25,620
once the suggestion with the red icon on

469
00:33:25,620 --> 00:33:28,140
the left is visible. This is a convenient

470
00:33:28,140 --> 00:33:29,780
snippet that saves us from typing.

471
00:33:29,780 --> 00:33:31,860
Without changing the position of the

472
00:33:31,860 --> 00:33:35,480
cursor, type 'ToDoList'

473
00:33:37,580 --> 00:33:43,240
then press Tab and type 'list'.

474
00:33:43,240 --> 00:33:45,159
The key object attributes are

475
00:33:45,159 --> 00:33:47,860
automatically updated. Press ENTER to

476
00:33:47,860 --> 00:33:49,880
confirm its changes  

477
00:33:49,880 --> 00:33:52,670
and then add an asterisk to the left of

478
00:33:52,670 --> 00:33:55,130
the first instance of list to mark it as

479
00:33:55,130 --> 00:33:58,640
a pointer, remove and notify list change

480
00:33:58,640 --> 00:34:00,560
part as it's optional and not required

481
00:34:00,560 --> 00:34:02,990
in our case.

482
00:34:02,990 --> 00:34:05,480
Under the private section of ToDoModel,

483
00:34:05,480 --> 00:34:08,559
add this line

484
00:34:13,369 --> 00:34:15,429


485
00:34:17,050 --> 00:34:19,420
Right click on that member variable and

486
00:34:19,420 --> 00:34:22,210
select 'Refactor',

487
00:34:22,210 --> 00:34:24,990
'Create Getter and Setter Member Functions'.

488
00:34:29,730 --> 00:34:32,668
Switch to the source file and add an

489
00:34:32,668 --> 00:34:36,138
include todolist.h

490
00:34:40,589 --> 00:34:42,649


491
00:34:49,030 --> 00:34:51,870
In the constructors initializer list

492
00:34:51,870 --> 00:34:56,280
initialize 'nList' with a null pointer (nullptr).

493
00:34:59,150 --> 00:35:01,789
At the top of setList, add the

494
00:35:01,789 --> 00:35:04,269
following code.

495
00:35:08,099 --> 00:35:10,160


496
00:35:33,400 --> 00:35:35,529
Before the source of model started

497
00:35:35,529 --> 00:35:37,990
changes, we must call beginResetModel.

498
00:35:37,990 --> 00:35:40,900
As I'll be connecting to the signals

499
00:35:40,900 --> 00:35:42,910
other to-do lists it's also a good idea

500
00:35:42,910 --> 00:35:44,650
to disconnect from the oldest when

501
00:35:44,650 --> 00:35:47,680
setting a new one. In our case this isn't

502
00:35:47,680 --> 00:35:50,200
necessary, as a property will only be set

503
00:35:50,200 --> 00:35:52,990
once. However it's a good habit to get

504
00:35:52,990 --> 00:35:55,480
into it. After the list has been assigned

505
00:35:55,480 --> 00:35:59,339
add the following if statement.

506
00:36:04,490 --> 00:36:06,550


507
00:36:08,290 --> 00:36:10,600
If a valid to-do-list was set on the

508
00:36:10,600 --> 00:36:12,340
model, we will connect to its various

509
00:36:12,340 --> 00:36:14,200
signals in order to call the beginning

510
00:36:14,200 --> 00:36:16,570
and end functions. Add the following code

511
00:36:16,570 --> 00:36:19,650
within the if statement.

512
00:36:24,560 --> 00:36:26,620


513
00:37:11,630 --> 00:37:14,180
This connects a lambda to the preItemAppended

514
00:37:14,180 --> 00:37:17,270
signal of to-do lists. The lambda

515
00:37:17,270 --> 00:37:19,670
calls beginInsertRows with an invalid

516
00:37:19,670 --> 00:37:22,220
model index which is fine, as we want to

517
00:37:22,220 --> 00:37:23,900
add the items to the foot note of the

518
00:37:23,900 --> 00:37:26,390
model. The next two arguments are the

519
00:37:26,390 --> 00:37:28,460
first and last indices within which the

520
00:37:28,460 --> 00:37:31,130
new items will be inserted. Since we want

521
00:37:31,130 --> 00:37:32,840
to append items to the end of the model,

522
00:37:32,840 --> 00:37:35,720
we use an index as one passed the last

523
00:37:35,720 --> 00:37:37,490
valid index in the list.

524
00:37:37,490 --> 00:37:40,730
Next connect postItemAppended to a

525
00:37:40,730 --> 00:37:44,500
lambda that calls endInsertRows.

526
00:37:49,819 --> 00:37:51,880


527
00:38:07,990 --> 00:38:11,470
Connect preItemRemoved to a lambda that

528
00:38:11,470 --> 00:38:14,820
calls beginRemoveRows.

529
00:38:19,620 --> 00:38:21,680


530
00:38:46,940 --> 00:38:50,270
Finally connect postedItemRemove to a

531
00:38:50,270 --> 00:38:54,010
lambda the calls endRemoveRows.

532
00:38:58,609 --> 00:39:00,670


533
00:39:12,220 --> 00:39:15,070
To match the beginResetModel, we also

534
00:39:15,070 --> 00:39:18,420
call endResetModel.

535
00:39:22,650 --> 00:39:24,710


536
00:39:25,050 --> 00:39:27,660
Now is a good time to build a project to

537
00:39:27,660 --> 00:39:30,560
check that our compiles.

538
00:39:33,570 --> 00:39:36,240
I'm almost ready to use on model and QML.

539
00:39:36,240 --> 00:39:39,940
Let's implement the remaining functions.

540
00:39:39,940 --> 00:39:43,420
In rowCount, add null point to check to

541
00:39:43,420 --> 00:39:46,050
the if statement.

542
00:39:50,510 --> 00:39:52,570


543
00:39:52,579 --> 00:39:54,380
We're going to do the same for other

544
00:39:54,380 --> 00:39:56,209
functions that use the nList member

545
00:39:56,209 --> 00:39:58,249
variable as is a good practice to

546
00:39:58,249 --> 00:39:59,779
safeguard against null point to

547
00:39:59,779 --> 00:40:02,269
access it, remove the FIXME comment and

548
00:40:02,269 --> 00:40:04,369
change your return statement to return

549
00:40:04,369 --> 00:40:08,140
the amount of items in the todo-list

550
00:40:13,960 --> 00:40:19,450
and data at the same null point to check.

551
00:40:22,860 --> 00:40:24,920


552
00:40:28,110 --> 00:40:30,660
Remove the FIXME comment and store

553
00:40:30,660 --> 00:40:35,120
the current item in the local const variable.

554
00:40:39,740 --> 00:40:41,800


555
00:40:54,020 --> 00:40:57,080
In the 'switch' cases, return the relevant

556
00:40:57,080 --> 00:40:59,920
data phase row.

557
00:41:04,010 --> 00:41:06,070


558
00:41:12,910 --> 00:41:16,120
And setData, add an if statement that

559
00:41:16,120 --> 00:41:17,860
returns false if the null pointer check

560
00:41:17,860 --> 00:41:20,130
fails.

561
00:41:24,740 --> 00:41:26,800


562
00:41:30,040 --> 00:41:33,070
Then store the current item at the index

563
00:41:33,070 --> 00:41:36,090
in a local variable.

564
00:41:40,480 --> 00:41:42,540


565
00:41:53,200 --> 00:41:55,390
We're going to check which role 's set

566
00:41:55,390 --> 00:41:57,630
and updated.

567
00:41:57,630 --> 00:41:59,700
Copy the 'switch' code from the 'data'

568
00:41:59,700 --> 00:42:01,940
function,

569
00:42:04,290 --> 00:42:06,540
and paste it after the last line we

570
00:42:06,540 --> 00:42:08,810
added.

571
00:42:11,619 --> 00:42:14,170
Modify the 'done' role case so that it

572
00:42:14,170 --> 00:42:16,680
looks like this.

573
00:42:20,660 --> 00:42:22,720


574
00:42:32,930 --> 00:42:37,750
Then modify the 'description' role case

575
00:42:41,260 --> 00:42:43,320


576
00:42:45,870 --> 00:42:49,740
Remove the FIXME comment

577
00:42:50,870 --> 00:42:54,610
and change this statement.

578
00:42:57,230 --> 00:42:59,290


579
00:43:12,330 --> 00:43:14,580
We take advantage of setItemAt

580
00:43:14,580 --> 00:43:16,530
return value to determine whether or not

581
00:43:16,530 --> 00:43:18,290
the data has actually changed, and

582
00:43:18,290 --> 00:43:20,520
therefore only emit the dataChanged

583
00:43:20,520 --> 00:43:23,910
signal if we need to. Finally if the data

584
00:43:23,910 --> 00:43:26,300
has changed, we return 'true', otherwise

585
00:43:26,300 --> 00:43:30,780
'false'. In the ItemFlags function, remove the

586
00:43:30,780 --> 00:43:33,440
FIXME comment.

587
00:43:35,900 --> 00:43:38,809
The item is editable file or not file

588
00:43:38,809 --> 00:43:43,660
use case. Open main.cpp, 

589
00:43:43,910 --> 00:43:45,640
and add the following

590
00:43:45,640 --> 00:43:49,740
after the code to ....

591
00:43:54,570 --> 00:43:56,630


592
00:44:39,690 --> 00:44:43,020
This forces ToDoList is a QML type, so

593
00:44:43,020 --> 00:44:44,730
that can be used as a property of

594
00:44:44,730 --> 00:44:47,700
ToDoModel. As it is a back-end type, we don't

595
00:44:47,700 --> 00:44:50,220
intend for it to be created in QML, so we

596
00:44:50,220 --> 00:44:52,619
use the qmlRegisterUncreatableType

597
00:44:52,619 --> 00:44:55,049
function. This function prints the error

598
00:44:55,049 --> 00:44:57,000
message that we passed as the last

599
00:44:57,000 --> 00:44:58,680
argument if we attempt to instantiate

600
00:44:58,680 --> 00:45:03,559
the type in QML. In ToDoList.qml,

601
00:45:03,559 --> 00:45:05,910
assign ToDoList context property

602
00:45:05,910 --> 00:45:10,579
to the 'list' property of ToDoModel.

603
00:45:15,660 --> 00:45:17,720


604
00:45:19,740 --> 00:45:23,400
Run the application.

605
00:45:26,890 --> 00:45:29,380
We can now edit the model data

606
00:45:29,380 --> 00:45:31,540
that comes from C++ in a QtQuick

607
00:45:31,540 --> 00:45:33,930
ListView.

608
00:45:39,090 --> 00:45:41,470
Before we can consider our application

609
00:45:41,470 --> 00:45:43,690
complete. We need to make it possible for

610
00:45:43,690 --> 00:45:45,520
users to add and remove items from a

611
00:45:45,520 --> 00:45:47,830
list. We're going to add two buttons

612
00:45:47,830 --> 00:45:50,250
below the to-do list to achieve this.

613
00:45:50,250 --> 00:45:53,700
Close the application

614
00:45:53,700 --> 00:45:56,160
and add a column layout as a parent of

615
00:45:56,160 --> 00:45:58,490
the frame.

616
00:46:03,040 --> 00:46:05,100


617
00:46:07,530 --> 00:46:11,250
To quickly indent a QML file, select the

618
00:46:11,250 --> 00:46:14,930
code and press Ctrl+I.

619
00:46:16,730 --> 00:46:21,310
After the frame, add a RowLayout.

620
00:46:23,240 --> 00:46:28,010
Within the RowLayout, add two buttons.

621
00:46:31,980 --> 00:46:34,040


622
00:46:50,490 --> 00:46:52,740
Run the application to see how it looks

623
00:46:52,740 --> 00:46:54,950
so far.

624
00:46:55,520 --> 00:46:57,650
Notice how the buttons happen to align

625
00:46:57,650 --> 00:47:00,470
nicely with the width of the ListView. By

626
00:47:00,470 --> 00:47:03,770
convenient, this is just a coincidence, we

627
00:47:03,770 --> 00:47:05,300
need to take a few steps to ensure the

628
00:47:05,300 --> 00:47:07,640
combined widths of the buttons match the

629
00:47:07,640 --> 00:47:11,270
width of the ListView and vice versa. To

630
00:47:11,270 --> 00:47:12,980
simulate how wide the buttons might be

631
00:47:12,980 --> 00:47:14,990
on a system with a larger default font

632
00:47:14,990 --> 00:47:18,020
size, let's temporarily add some text to

633
00:47:18,020 --> 00:47:20,010
the labels.

634
00:47:20,010 --> 00:47:22,380
Add three spaces at the end of each

635
00:47:22,380 --> 00:47:25,280
button stack string.

636
00:47:30,070 --> 00:47:32,130


637
00:47:42,400 --> 00:47:44,809
Next we want to make sure that each

638
00:47:44,809 --> 00:47:48,519
button fills the width of the row layout.

639
00:47:53,010 --> 00:47:55,070


640
00:47:58,400 --> 00:48:03,309
Then add the same bounding to the frame.

641
00:48:07,809 --> 00:48:12,460
Finally make ListView fill the frame.

642
00:48:15,880 --> 00:48:19,380
Run the application again.

643
00:48:21,930 --> 00:48:25,140
Now if the button text is too wide, this

644
00:48:25,140 --> 00:48:27,610
view will stretch accordingly.

645
00:48:27,610 --> 00:48:32,070
Remove the extra spaces from the text.

646
00:48:34,910 --> 00:48:37,760
To complete our application, we need to

647
00:48:37,760 --> 00:48:39,859
make the buttons do something. Add the

648
00:48:39,859 --> 00:48:42,640
following to the Add button.

649
00:48:47,350 --> 00:48:49,410


650
00:48:56,480 --> 00:49:00,490
Add the following to the Remove button.

651
00:49:03,480 --> 00:49:05,540


652
00:49:15,710 --> 00:49:19,150
Run the application again.

653
00:49:21,380 --> 00:49:23,440


654
00:49:25,950 --> 00:49:29,369
We can now add, edit and remove items

655
00:49:29,369 --> 00:49:32,839
from our C++ model.

656
00:49:36,990 --> 00:49:39,050


657
00:49:42,119 --> 00:49:43,320


658
00:49:43,320 --> 00:00:00,000
[Music]

