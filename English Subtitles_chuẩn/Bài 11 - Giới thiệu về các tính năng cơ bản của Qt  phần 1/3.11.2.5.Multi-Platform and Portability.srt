WEBVTT

00:01.690 --> 00:03.880
Hello welcome back to learning Qt5.

00:03.970 --> 00:11.810
This is Symeon Huang. This video will be our last video of the section one, multi-platform and portability.

00:12.700 --> 00:13.710
In this video.

00:13.720 --> 00:20.420
We're going to take a look at how to use compile-time OS macros and how to get System Information at

00:20.450 --> 00:21.870
runtime.

00:22.030 --> 00:27.700
In the end we're going to take a look how to write some platform-specific configurations in qmake based

00:27.750 --> 00:32.960
project file. Now if you're ready let's get back to our HelloWorld project.

00:33.370 --> 00:39.620
Sometimes, especially when you develop some low level applications or libraries, you have to provide

00:39.620 --> 00:47.500
the APIs but with different implementations. Here i make a very naive and simple example printHello()

00:49.080 --> 00:55.390
it's a function that will print "Hello Qt world" with the operating system or the platform you are currently

00:55.390 --> 00:58.240
running. It sounds very simple.

00:59.070 --> 01:01.920
But as a downstream consumer you just want to call printHello().

01:01.950 --> 01:10.020
I know you don't want to care about the details. But as a provider you have to know which operating system

01:10.020 --> 01:17.090
you're currently building or running. Lucky Qt provide a lot of global Qt declarations.

01:17.320 --> 01:24.050
They are actually platform-specific. For example, Q_OS_WIN is only defined when the

01:24.050 --> 01:31.570
Qt libraries were build on Windows. For Q_OS_UNIX

01:31.720 --> 01:34.210
It is only defined when Qt

01:34.290 --> 01:39.000
libraries were built on UNIX systems such as Mac or Linux.

01:40.630 --> 01:49.210
So in the printHello() we say if Q_OS_WIN is defined, we're going to output "Hello Qt World on Windows".

01:49.210 --> 01:54.070
If it's Unix we're going to say "Hello Qt world on Unix". As you can see

01:54.120 --> 02:02.300
Qt creator is very smart. It has already grayed out all the inapplicable section in defined.

02:02.460 --> 02:05.110
Let's build and run this application.

02:05.180 --> 02:10.190
See if we can see "Hello Qt World on Windows". Since I'm running on Windows at this moment.

02:13.670 --> 02:15.460
Yes "Hello Qt on Windows".

02:18.380 --> 02:19.010
Now

02:19.080 --> 02:26.730
Sometimes you may also want some runtime system information. In some cases, like your application crashed

02:27.080 --> 02:34.250
you wish to gather some essentials system information, such as the Windows version or sometimes you simply

02:34.250 --> 02:35.810
want to send a deprecation warning.

02:42.390 --> 02:47.590
For example, if you are running Windows XP, we actually want to say "we're deprecating Windows XP support".

02:47.750 --> 02:51.890
You can get this enum using QSysInfo.

02:52.150 --> 02:58.540
Remember to include this header file. There's a static member function called a windowVersion(). It will return

02:58.600 --> 03:02.350
a win version enum.

03:02.510 --> 03:09.530
So if it's a Windows XP. We're going to say "We're deprecating Windows XP support". But actually I'm

03:09.530 --> 03:13.170
running Windows 10.

03:13.300 --> 03:18.550
Of course we're not going to deprecate Windows 10 at this moment.

03:28.130 --> 03:31.280
Hence we can give some messages, such as.

03:37.200 --> 03:38.280
Welcome to Windows 10.

03:42.300 --> 03:43.720
Let's build and run again.

03:43.860 --> 03:49.440
We should be able to see two outputs. The first one will be "Hello Qt World on Windows".

03:49.440 --> 03:51.650
And the second one should be "Welcome to Windows 10".

03:55.280 --> 04:04.850
Hello Qt world on Windows and welcome to windows 10 as we expected.

04:04.850 --> 04:11.210
Now last but not least, sometimes you may wonder how do we configure this qmake based project file to include new modules.

04:11.930 --> 04:17.230
Because some modules are platform-specific, such as win32 etc.

04:17.330 --> 04:19.950
Or sometimes you just want to give some messages.

04:20.150 --> 04:26.810
You can use some keywords win32, unix to do this job.

04:27.080 --> 04:32.960
Now if I run qmake, i should be able to see "building on Windows" messages.

04:36.970 --> 04:46.270
Project MESSAGE: Building on Windows. Using this technique you should be able to send a warning like "Unknown platform!

04:46.900 --> 04:53.970
Doesn't support it yet" message to the platform you actually haven't supported. So people can know

04:54.360 --> 04:57.680
that platform is not supported when they run qmake.

04:57.750 --> 04:58.450
Instead of

04:58.620 --> 05:06.420
when they compile and get tons of errors, or even worse when they run the application and they just crashes.

05:06.460 --> 05:12.780
So in our first section we've so far have learned the basics about Qt application and the fundamentals

05:12.840 --> 05:13.230
about

05:13.230 --> 05:20.860
Qt object and memory management and how do parse and process command-line options and also

05:21.400 --> 05:23.970
multi-platform and portability knowledge.

05:24.280 --> 05:31.720
And also our techniques about developing multi-platform and also techniques how to develop cross-platform

05:31.720 --> 05:32.740
applications.

05:34.200 --> 05:39.550
In the next section we're going to take a look at multi-threading and multiprocessing

05:39.550 --> 05:44.370
which can enhance your command-line based, which can enhance your application even further.
