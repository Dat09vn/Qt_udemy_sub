1
00:00:00,000 --> 00:00:01,589
In this lecture I'm going to show you

2
00:00:01,589 --> 00:00:04,500
how you can build your own components by

3
00:00:04,500 --> 00:00:06,990
combining the elements that we have seen

4
00:00:06,990 --> 00:00:10,500
like rectangle, text and images. Let's go

5
00:00:10,500 --> 00:00:12,960
to QT creator and see how we can do that.

6
00:00:12,960 --> 00:00:15,900
Okay, here we are in QT creator. We are

7
00:00:15,900 --> 00:00:18,539
going to create our project as usual. It

8
00:00:18,539 --> 00:00:21,630
is an application in QT quick one. We

9
00:00:21,630 --> 00:00:24,240
call it custom component demo, store it

10
00:00:24,240 --> 00:00:28,740
in our usual location. Choose the QT

11
00:00:28,740 --> 00:00:31,710
version and we choose this desktop kit.

12
00:00:31,710 --> 00:00:35,250
And we have our project here. But before

13
00:00:35,250 --> 00:00:37,140
we start I would like to show you a

14
00:00:37,140 --> 00:00:39,270
component that we are going to need. And

15
00:00:39,270 --> 00:00:42,809
that one is "Column". Okay, it is an element

16
00:00:42,809 --> 00:00:44,940
that you used to group elements together.

17
00:00:44,940 --> 00:00:47,309
Let me show you what I mean. I'm going to

18
00:00:47,309 --> 00:00:52,079
define two rectangles inside. This is

19
00:00:52,079 --> 00:00:55,050
going to have a width of 300 height of

20
00:00:55,050 --> 00:01:00,750
100 and a color of "red". And we are going

21
00:01:00,750 --> 00:01:06,479
to put another one inside. And it's going

22
00:01:06,479 --> 00:01:12,000
to be "blue". Let's run. And we should have

23
00:01:12,000 --> 00:01:15,030
two rectangles laid out on top of each

24
00:01:15,030 --> 00:01:15,560
other.

25
00:01:15,560 --> 00:01:18,119
Mm-hmm this is what we have. This is what

26
00:01:18,119 --> 00:01:20,700
this element does. It allows you to lay

27
00:01:20,700 --> 00:01:24,509
things out from top to bottom. And you

28
00:01:24,509 --> 00:01:27,090
can use some properties of the column to

29
00:01:27,090 --> 00:01:28,979
control how they are laid out. For

30
00:01:28,979 --> 00:01:31,909
example, you can specify the spacing

31
00:01:31,909 --> 00:01:35,520
between these elements. Let's use 20 and

32
00:01:35,520 --> 00:01:38,729
see what we get. Mm-hmm this is what we

33
00:01:38,729 --> 00:01:41,670
have. There is another element that you

34
00:01:41,670 --> 00:01:44,759
can use to lay this thing out from left

35
00:01:44,759 --> 00:01:48,689
to right. And that is called "row". You

36
00:01:48,689 --> 00:01:52,020
might have guessed that. Okay, left to

37
00:01:52,020 --> 00:01:54,240
right. I am mentioning these elements

38
00:01:54,240 --> 00:01:57,450
here because we are going to use them to

39
00:01:57,450 --> 00:01:59,579
make a point that we want to make in

40
00:01:59,579 --> 00:02:02,520
custom components. Now that we know this.

41
00:02:02,520 --> 00:02:05,909
Let's comment this out. We are going to

42
00:02:05,909 --> 00:02:07,799
build a button that the user can click

43
00:02:07,799 --> 00:02:10,139
on and that button is going to be based

44
00:02:10,139 --> 00:02:12,819
on rectangle. So it's going to be a red

45
00:02:12,819 --> 00:02:16,299
and inside we are going to have a "Text

46
00:02:16,299 --> 00:02:19,299
Element" and the text is going to say "Button".

47
00:02:19,299 --> 00:02:22,510
For now the rectangle is going

48
00:02:22,510 --> 00:02:24,790
to have a few properties. So it's going

49
00:02:24,790 --> 00:02:27,250
to have a red color. And it's going to

50
00:02:27,250 --> 00:02:31,959
have a border. Let's use group properties.

51
00:02:31,959 --> 00:02:34,689
The color of the border is going to be

52
00:02:34,689 --> 00:02:38,109
"blue". And the width of the border is

53
00:02:38,109 --> 00:02:43,209
going to be, let's say, 3. We should

54
00:02:43,209 --> 00:02:46,480
use a semicolon here. Sorry for that. The

55
00:02:46,480 --> 00:02:52,150
text is going to have an id. And we want

56
00:02:52,150 --> 00:02:54,099
the rectangle to have the width that

57
00:02:54,099 --> 00:02:56,590
depends on this text so that it wraps

58
00:02:56,590 --> 00:02:59,049
around them. So the way we're going to do

59
00:02:59,049 --> 00:03:00,849
that, we're going to say the width of the

60
00:03:00,849 --> 00:03:04,079
rectangle equals the buttonTextId

61
00:03:04,079 --> 00:03:08,349
implicit width. And this is its width.

62
00:03:08,349 --> 00:03:13,120
After it has been assigned width that

63
00:03:13,120 --> 00:03:15,519
matches the text that is inside. I hope

64
00:03:15,519 --> 00:03:17,680
this made sense. And we are going to add

65
00:03:17,680 --> 00:03:21,340
a margin to it, like this. We are going to

66
00:03:21,340 --> 00:03:26,650
do the same thing for the height. Button-

67
00:03:26,650 --> 00:03:29,949
TextId.implicitHeight and add a margin

68
00:03:29,949 --> 00:03:35,620
of 20. Let's see how our button looks. Run

69
00:03:35,620 --> 00:03:41,650
your application. We should center the

70
00:03:41,650 --> 00:03:45,250
text. So that's easy to do. You can say

71
00:03:45,250 --> 00:03:56,459
anchors.CenterIn "parent". Run again. Fnd

72
00:03:56,459 --> 00:04:00,699
the text is in the middle. But we have a

73
00:04:00,699 --> 00:04:04,650
problem. The color should be wrapped in

74
00:04:04,650 --> 00:04:10,739
quotes like this. That's an easy fix.

75
00:04:10,739 --> 00:04:14,319
Okay we have our border. We should make

76
00:04:14,319 --> 00:04:17,048
this button clickable. So we add a MouseArea.

77
00:04:17,048 --> 00:04:22,630
It is going to fill this rectangle.

78
00:04:22,630 --> 00:04:24,660
So say anchors.fill

79
00:04:24,660 --> 00:04:30,630
"parent". By the way I am always using

80
00:04:30,630 --> 00:04:33,600
parent here with the anchor.fill

81
00:04:33,600 --> 00:04:36,210
property. But you can feel free to also

82
00:04:36,210 --> 00:04:38,670
specify the idea of this rectangle if

83
00:04:38,670 --> 00:04:41,610
you happen to have specified. I leave it

84
00:04:41,610 --> 00:04:43,500
to "parent" because that's what I'm used

85
00:04:43,500 --> 00:04:46,410
to. But you can experiment with that. So

86
00:04:46,410 --> 00:04:50,520
onClicked we are going to say

87
00:04:50,520 --> 00:04:56,580
console.log, "Clicked ON" and say what we

88
00:04:56,580 --> 00:04:59,340
click on. We are going to say the

89
00:04:59,340 --> 00:05:02,070
text that is in the Text Element. So

90
00:05:02,070 --> 00:05:03,870
we're going to say buttonTextId.text.

91
00:05:03,870 --> 00:05:07,610
I want you to see that you cannot

92
00:05:07,610 --> 00:05:11,130
directly call a text property if you are

93
00:05:11,130 --> 00:05:13,170
not in this element. If you do this and

94
00:05:13,170 --> 00:05:15,240
click you are going to have a problem.

95
00:05:15,240 --> 00:05:18,390
Because text is not defined here it is

96
00:05:18,390 --> 00:05:20,430
also not defined in the parent element

97
00:05:20,430 --> 00:05:23,190
which is rectangle here. Let's run the

98
00:05:23,190 --> 00:05:26,780
application and tell you what I mean.

99
00:05:27,230 --> 00:05:30,390
Okay if you click it is going to say

100
00:05:30,390 --> 00:05:33,180
"Text is not defined" because it is not

101
00:05:33,180 --> 00:05:36,240
defined. And this MouseArea here, so you

102
00:05:36,240 --> 00:05:40,470
should use the buttonTextId to specify

103
00:05:40,470 --> 00:05:43,500
where this text element is coming from.

104
00:05:43,500 --> 00:05:47,940
So we should say button and that like

105
00:05:47,940 --> 00:05:52,440
this. And if we run it is going to work.

106
00:05:52,440 --> 00:05:55,620
"Clicked ON button". Now we have our button

107
00:05:55,620 --> 00:05:57,960
which I click. But we would like to use it

108
00:05:57,960 --> 00:06:00,180
multiple times and we don't want to 

109
00:06:00,180 --> 00:06:03,180
copy all these things. So what makes sense

110
00:06:03,180 --> 00:06:07,110
is to create a separate component. Put

111
00:06:07,110 --> 00:06:10,530
this rectangle in and instantiate it

112
00:06:10,530 --> 00:06:13,260
whenever we need it. Let me show you what

113
00:06:13,260 --> 00:06:15,360
I mean. I am going to go to our resource

114
00:06:15,360 --> 00:06:24,780
file here and add new Qt QML file, Qt Quick 2.

115
00:06:24,780 --> 00:06:28,380
We are going to call this MButton

116
00:06:28,380 --> 00:06:31,800
because it is our button. And the

117
00:06:31,800 --> 00:06:34,590
Qt quick version and these templates is

118
00:06:34,590 --> 00:06:37,889
usually very old so you

119
00:06:37,889 --> 00:06:40,050
can refer to the project that we created.

120
00:06:40,050 --> 00:06:42,060
You see that the 2 Qt Quick version is

121
00:06:42,060 --> 00:06:46,860
2.11. So we can update this here and copy

122
00:06:46,860 --> 00:06:49,740
the rectangle we have here and bring it

123
00:06:49,740 --> 00:06:54,240
in the button here. Let's take this item

124
00:06:54,240 --> 00:06:58,080
out. And we have our rectangle. If we come

125
00:06:58,080 --> 00:07:03,050
to the main element and say M button.

126
00:07:04,009 --> 00:07:06,719
Okay you see that it is recognized and

127
00:07:06,719 --> 00:07:09,870
we can instantiate it like this. Let's

128
00:07:09,870 --> 00:07:15,330
say button. Ah ha, we have a button here and

129
00:07:15,330 --> 00:07:17,789
we can click on it. We can actually

130
00:07:17,789 --> 00:07:20,729
specify another one. Let's say MButton

131
00:07:20,729 --> 00:07:26,460
again and see if we can specify the x

132
00:07:26,460 --> 00:07:38,370
location 100. Why not? Run again. Mm-hmm it

133
00:07:38,370 --> 00:07:41,370
is at 100. Everything looks fine. Okay our

134
00:07:41,370 --> 00:07:43,710
button is working as we want. But there's

135
00:07:43,710 --> 00:07:45,870
one problem. Sometimes you want to

136
00:07:45,870 --> 00:07:48,629
specify the text that is shown in this

137
00:07:48,629 --> 00:07:50,250
button because we don't want it to

138
00:07:50,250 --> 00:07:53,580
always say button. Okay so how do you do

139
00:07:53,580 --> 00:07:55,589
that? The way you do that, we can use a

140
00:07:55,589 --> 00:07:56,250
property

141
00:07:56,250 --> 00:07:58,379
"alias". What do I mean? You can do

142
00:07:58,379 --> 00:08:08,569
something like "property alias buttonText" and

143
00:08:08,569 --> 00:08:15,539
link this to buttonTextId.text. Okay

144
00:08:15,539 --> 00:08:19,460
and when we specify buttonTextId now.

145
00:08:19,460 --> 00:08:23,270
Let's set this first.

146
00:08:28,360 --> 00:08:43,039
And if we run the application. You

147
00:08:43,039 --> 00:08:44,899
are going to see that. It says button 1

148
00:08:44,899 --> 00:08:46,850
and button 2. If you click on this it

149
00:08:46,850 --> 00:08:49,490
says "Clicked ON: Button 1". If you click on

150
00:08:49,490 --> 00:08:51,709
this it says button 2. We are defining

151
00:08:51,709 --> 00:08:54,740
our own component and we are able to 

152
00:08:54,740 --> 00:08:56,839
expose some properties of this inner

153
00:08:56,839 --> 00:08:59,000
component. But sometimes you don't want

154
00:08:59,000 --> 00:09:01,040
other people to be able to access all

155
00:09:01,040 --> 00:09:02,959
your properties in your components. For

156
00:09:02,959 --> 00:09:05,630
example users can change the width and

157
00:09:05,630 --> 00:09:07,970
height of the rectangle and the color

158
00:09:07,970 --> 00:09:10,310
and the border. But we don't want that.

159
00:09:10,310 --> 00:09:12,470
The way you do that, you wrap your

160
00:09:12,470 --> 00:09:15,920
components into an "Item" component just

161
00:09:15,920 --> 00:09:23,779
like this. And put it inside. And what you

162
00:09:23,779 --> 00:09:26,120
have to do is to expose your properties

163
00:09:26,120 --> 00:09:28,339
the same way you've been doing. And you

164
00:09:28,339 --> 00:09:30,470
have to expose your properties at the

165
00:09:30,470 --> 00:09:33,709
root level of your parent item. Ok the

166
00:09:33,709 --> 00:09:36,770
parent item is this item here. And we

167
00:09:36,770 --> 00:09:42,079
should give it an id. And this is where

168
00:09:42,079 --> 00:09:45,050
we expose our properties. If we run the

169
00:09:45,050 --> 00:09:47,000
application it is going to look like

170
00:09:47,000 --> 00:09:49,820
it's working as expected. We click on

171
00:09:49,820 --> 00:09:51,709
button, you see, button 1. You click on

172
00:09:51,709 --> 00:09:54,079
button 2, you see button 2. But the user

173
00:09:54,079 --> 00:09:57,320
has no way to specify what happens when

174
00:09:57,320 --> 00:09:59,540
this button is clicked. And we need to

175
00:09:59,540 --> 00:10:02,829
expose this signal. The way you do that,

176
00:10:02,829 --> 00:10:07,940
you specify "signal" like this and say

177
00:10:07,940 --> 00:10:12,380
buttonClicked. And when the user clicks

178
00:10:12,380 --> 00:10:14,990
in the MouseArea you want to call your

179
00:10:14,990 --> 00:10:17,149
signal here. And this is a signal that

180
00:10:17,149 --> 00:10:20,120
the user can specify here. So we are

181
00:10:20,120 --> 00:10:22,040
going to comment this out because we

182
00:10:22,040 --> 00:10:24,500
don't want it to confuse us. We are going

183
00:10:24,500 --> 00:10:28,490
to say rootId because it is at this

184
00:10:28,490 --> 00:10:31,040
level that the signal is defined, and say

185
00:10:31,040 --> 00:10:37,820
buttonClicked like this. Ok, now the user

186
00:10:37,820 --> 00:10:39,779
can say

187
00:10:39,779 --> 00:10:44,370
onButtonClicked use something, say

188
00:10:44,370 --> 00:10:51,920
console.log. And we can do the same thing

189
00:10:51,920 --> 00:10:59,279
for the button 2. And we are saying

190
00:10:59,279 --> 00:11:01,259
from main file so that there is no

191
00:11:01,259 --> 00:11:03,509
confusion about where this signal is

192
00:11:03,509 --> 00:11:06,809
coming from, even if we commented this

193
00:11:06,809 --> 00:11:09,689
out I am this paranoid. Run the

194
00:11:09,689 --> 00:11:13,139
application, click button 1. Clicked on

195
00:11:13,139 --> 00:11:15,509
button one from main file we are able to

196
00:11:15,509 --> 00:11:17,759
capture this signal that the button has

197
00:11:17,759 --> 00:11:22,800
been clicked. And the same thing happens

198
00:11:22,800 --> 00:11:26,249
to button 2. We are almost done with this.

199
00:11:26,249 --> 00:11:30,059
But when we try to wrap our buttons here

200
00:11:30,059 --> 00:11:32,879
in a "Row" component let's do that or a

201
00:11:32,879 --> 00:11:36,089
"Column". Let's use a "Column". I'll have to

202
00:11:36,089 --> 00:11:42,809
lay my things out from top to bottom. Ok

203
00:11:42,809 --> 00:11:45,779
put this in a "Column". And because the

204
00:11:45,779 --> 00:11:48,120
column is taking care of our positioning

205
00:11:48,120 --> 00:11:50,839
we don't want to specify this x anymore.

206
00:11:50,839 --> 00:11:54,660
So let's take this out. Run the

207
00:11:54,660 --> 00:11:57,870
application. And what we're going to see

208
00:11:57,870 --> 00:12:00,180
is going to be very surprising. You see

209
00:12:00,180 --> 00:12:03,300
that? We only see button 2? What is that?

210
00:12:03,300 --> 00:12:07,079
What is happening here is: our "Column" is

211
00:12:07,079 --> 00:12:09,779
trying to position these items but it

212
00:12:09,779 --> 00:12:12,329
doesn't know the width and the height of

213
00:12:12,329 --> 00:12:15,360
this button of ours. Notice that we

214
00:12:15,360 --> 00:12:16,860
didn't expose the width and the height

215
00:12:16,860 --> 00:12:20,879
of this rectangle. And it is impossible

216
00:12:20,879 --> 00:12:24,029
for the "main" file to know the width of

217
00:12:24,029 --> 00:12:26,129
this rectangle because we didn't expose

218
00:12:26,129 --> 00:12:28,649
it. So if we want row and column to

219
00:12:28,649 --> 00:12:31,350
position our custom component very well

220
00:12:31,350 --> 00:12:33,559
we should expose the width and height.

221
00:12:33,559 --> 00:12:36,360
You should remember this because these

222
00:12:36,360 --> 00:12:38,730
errors are very hard to debug. And I've

223
00:12:38,730 --> 00:12:40,980
had students come to me many times about

224
00:12:40,980 --> 00:12:42,779
this problem so you should really focus

225
00:12:42,779 --> 00:12:44,879
on this when you define your own

226
00:12:44,879 --> 00:12:47,370
components. You should make sure that

227
00:12:47,370 --> 00:12:49,679
they have a width and height as opposed

228
00:12:49,679 --> 00:12:52,710
to external thermal files.

229
00:12:52,710 --> 00:12:54,780
And the way you expose these properties,

230
00:12:54,780 --> 00:13:00,350
you give your rectangle an id. So you say,

231
00:13:01,790 --> 00:13:05,550
for example, and simply expose the width

232
00:13:05,550 --> 00:13:14,960
to be container... and the height to be...

233
00:13:17,120 --> 00:13:21,690
Okay, and this takes care of exposing

234
00:13:21,690 --> 00:13:23,880
these properties to the outside world. I

235
00:13:23,880 --> 00:13:26,430
am going to go to the "main" file. Run

236
00:13:26,430 --> 00:13:29,520
again. Mm-hmm... and you see that it looks

237
00:13:29,520 --> 00:13:30,900
like nothing changes. This is

238
00:13:30,900 --> 00:13:33,030
because Qt Creator sometimes has a

239
00:13:33,030 --> 00:13:36,330
problem when you change other files that

240
00:13:36,330 --> 00:13:39,270
the "main" file is using you have to come

241
00:13:39,270 --> 00:13:41,130
to the "main" and make it look like

242
00:13:41,130 --> 00:13:42,770
something changed. So we are going to

243
00:13:42,770 --> 00:13:46,350
click to our space here. Run again. And

244
00:13:46,350 --> 00:13:48,780
you see that our buttons are now

245
00:13:48,780 --> 00:13:51,210
positioned very nicely. I like this

246
00:13:51,210 --> 00:13:53,790
better. And I hope this really exposes

247
00:13:53,790 --> 00:13:55,710
you 2 ways you can define your run

248
00:13:55,710 --> 00:13:58,200
components. You put them in a different

249
00:13:58,200 --> 00:14:00,780
file. When you put them in that file and

250
00:14:00,780 --> 00:14:02,580
that file happens to be in the same

251
00:14:02,580 --> 00:14:04,470
location as the "main" file you don't have

252
00:14:04,470 --> 00:14:06,420
to do anything. You just call your

253
00:14:06,420 --> 00:14:10,020
components like we did here, for MButton.

254
00:14:10,020 --> 00:14:12,780
Another thing you should do is to wrap

255
00:14:12,780 --> 00:14:16,920
your components into Item to kind of

256
00:14:16,920 --> 00:14:19,230
control what properties are visible to

257
00:14:19,230 --> 00:14:21,480
the outside world. For example, we

258
00:14:21,480 --> 00:14:22,890
wouldn't want people to be able to

259
00:14:22,890 --> 00:14:24,870
change the color. Let's see what would

260
00:14:24,870 --> 00:14:27,390
happen when we try to set the color

261
00:14:27,390 --> 00:14:30,180
property to this MButton of ours. Let's

262
00:14:30,180 --> 00:14:35,430
do that. You should try things out. You

263
00:14:35,430 --> 00:14:38,490
see that color is not recognized. If you

264
00:14:38,490 --> 00:14:40,500
try to run it's going to warn you of

265
00:14:40,500 --> 00:14:44,130
this problem. It's probably going to say

266
00:14:44,130 --> 00:14:47,040
color is not defined: "Cannot assign to a

267
00:14:47,040 --> 00:14:50,250
non-existent property "color"". Okay, so this

268
00:14:50,250 --> 00:14:52,500
is not exposed you can see that. You can

269
00:14:52,500 --> 00:14:55,170
make your properties of your elements

270
00:14:55,170 --> 00:14:58,350
private by wrapping your component into

271
00:14:58,350 --> 00:15:00,870
an Item. And this is really important to

272
00:15:00,870 --> 00:15:04,050
do. Another thing you saw is how you can

273
00:15:04,050 --> 00:15:06,110
expose signals. You can 

274
00:15:06,110 --> 00:15:08,600
expose your signals by declaring your signal

275
00:15:08,600 --> 00:15:10,880
like this and then calling it when

276
00:15:10,880 --> 00:15:13,700
something happens. Let we did here. And

277
00:15:13,700 --> 00:15:15,920
last but not least you should always

278
00:15:15,920 --> 00:15:18,560
specify width and height for your custom

279
00:15:18,560 --> 00:15:20,630
components. Otherwise you're going to

280
00:15:20,630 --> 00:15:22,850
have problems laying them out in

281
00:15:22,850 --> 00:15:26,180
positioners like "Row" and "Column". These

282
00:15:26,180 --> 00:15:28,100
covers always set out to do in this

283
00:15:28,100 --> 00:15:30,110
lecture and the instructor. We're going

284
00:15:30,110 --> 00:15:32,810
to start look at user input elements in

285
00:15:32,810 --> 00:15:34,910
QT quick. I'll see you in the next

286
00:15:34,910 --> 00:00:00,000
lecture.

