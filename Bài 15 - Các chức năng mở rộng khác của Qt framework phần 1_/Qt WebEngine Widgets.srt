1
00:00:00,550 --> 00:00:06,480
Chào mừng các bạn đến với video 3.2 Tương tác với web về widget công cụ web. Trong video này

2
00:00:06,480 --> 00:00:12,300
ta sẽ tìm hiểu về widget công cụ web Qt, giao diện lập trình ứng dụng, xây dựng một trình duyệt web đơn giản

3
00:00:12,300 --> 00:00:16,040
bằng widget và một vài ý tưởng trình duyệt tuỳ biến.

4
00:00:16,140 --> 00:00:17,740
Chúng ta cùng bắt đầu với một câu hỏi đơn giản.

5
00:00:17,760 --> 00:00:22,230
Tại sao ta tìm hiểu về API hay giao diện lập trình ứng dụng?

6
00:00:22,230 --> 00:00:25,560
Vì ta cần nắm được phần lớn chức năng của mô-đun này.

7
00:00:25,620 --> 00:00:30,600
Ngoài ra ôn tập lại về API cũng giúp ta hiểu rõ phương thức hoạt động của mã để có thể tác động lên

8
00:00:30,630 --> 00:00:33,000
mã tạo sẵn mà không mất quá nhiều công sức.

9
00:00:33,000 --> 00:00:34,710
Ta cùng xem nhé.

10
00:00:34,740 --> 00:00:38,610
Hãy nhớ rằng đây là cấu trúc cấp cao nhất mà ta đã quan sát từ lần trước.

11
00:00:38,790 --> 00:00:41,790
Và đây là cách cấu trúc phân ra thành các tên class.

12
00:00:41,790 --> 00:00:44,400
Widget cấp cao nhất là QWebEngineView.

13
00:00:44,460 --> 00:00:48,660
Tôi đã vạch ra một số chức năng mà tôi cho là quan trọng nhất ở bên phải.

14
00:00:48,660 --> 00:00:55,500
Các bạn có thể thấy ta có thể đặt Url, Page hoặc Html ở view cấp cao nhất,

15
00:00:55,650 --> 00:00:57,930
cực kỳ thuận tiện vì ta có thể nhìn thấy ngay tức thì.

16
00:00:57,990 --> 00:01:01,270
Bên dưới QWebEngineView là QWebEnginePage.

17
00:01:01,290 --> 00:01:04,470
Đây là phần thịt của mô-đun, và cũng chính là phần page.

18
00:01:04,470 --> 00:01:09,260
Mặc dù tôi không liệt kê ra ở đây nhưng page cũng có một số chức năng giống với view.

19
00:01:09,270 --> 00:01:16,920
Ví dụ ta có thể đặt Url hoặc Html ở trên page, tương tự như view cấp cao nhất.

20
00:01:17,070 --> 00:01:22,360
Giao diện mà giúp ta nhìn thấy trang khi mở một trình duyệt web thông thường, mà chắc chắn ta sẽ thấy

21
00:01:22,360 --> 00:01:25,350
trong trình duyệt web, thực chất là giao diện tab.

22
00:01:25,350 --> 00:01:31,260
Mỗi tab hiển thị một trang khác nhau, và mỗi lần chỉ hiển thị một trang.

23
00:01:31,260 --> 00:01:34,770
Nhưng nếu ta click vào một tab, trang liên quan sẽ hiển thị.

24
00:01:34,770 --> 00:01:38,860
Việc cài đặt trình duyệt web bằng giao diện tab hay không đều tuỳ thuộc vào các bạn.

25
00:01:38,880 --> 00:01:45,420
Ví dụ các bạn có thể sử dụng danh sách trình đơn để chuyển đổi giữa các trang, hay bất kỳ giao diện

26
00:01:45,420 --> 00:01:50,370
hay ho nào mà các bạn có thể nghĩ ra. Một số chức năng thú vị mà tôi thấy trên page bao gồm

27
00:01:50,370 --> 00:01:55,470
chức năng icon và title, giúp ta biết được biểu tượng và tiêu đề của trang.

28
00:01:55,470 --> 00:02:00,090
Các chức năng khác của class này bao gồm download, run javascript, và print.

29
00:02:00,090 --> 00:02:05,340
Nhìn chung QWebEnginePage là một class rất rất quyền lực mà ta sẽ bắt gặp rất nhiều.

30
00:02:05,340 --> 00:02:09,770
Enum WebAction cũng là một phần của class này và đóng vai trò rất quan trọng.

31
00:02:09,840 --> 00:02:12,540
Chúng ta sẽ quay lại với nó sau khi hoàn thành biểu đồ này.

32
00:02:12,630 --> 00:02:17,290
Bên dưới page là một số class khác mà ta sẽ không tìm hiểu quá chi tiết.

33
00:02:17,340 --> 00:02:19,720
Profile này khá là thú vị.

34
00:02:19,740 --> 00:02:24,390
Nếu ta muốn cài đặt chế độ incognito thì profile chính là giải pháp.

35
00:02:24,390 --> 00:02:29,340
Ta cũng có thể thực hiện cài đặt, script, và xử lý cookie bằng profile.

36
00:02:29,340 --> 00:02:33,990
Mỗi mục đều có những class và chức năng đi kèm riêng biệt nếu trình duyệt web

37
00:02:34,050 --> 00:02:36,110
cần đào sâu vào từng mục đó.

38
00:02:36,120 --> 00:02:40,560
Sau khi đã tìm hiểu xong về biểu đồ, ta sẽ thảo luận về một số hành vi. Rất nhiều hành vi của người sử dụng

39
00:02:40,560 --> 00:02:44,130
được theo dõi bởi 1 enum duy nhất trong QWebEnginePage.

40
00:02:44,130 --> 00:02:48,140
Tôi đã sao chép một vài hành vi lên đây để minh hoạ những vị trí có thể tìm chức năng tương ứng.

41
00:02:48,180 --> 00:02:55,050
Ví dụ một số hành vi của page bao gồm back, forward, stop, cut, copy, và

42
00:02:55,050 --> 00:02:56,090
paste.

43
00:02:56,430 --> 00:03:02,200
Nhưng nếu nhìn lại tài liệu tham khảo WebEnginePage WebAction, ta có thể thấy

44
00:03:02,220 --> 00:03:05,100
khoảng 44 enum khác nhau.

45
00:03:05,290 --> 00:03:10,020
Nếu ta muốn lập trình một trình duyệt web đầy đủ tính năng hơn nhằm đảm bảo có thể xử lý triệt để từng hành vi

46
00:03:10,020 --> 00:03:13,190
thì những kiến thức này rất quan trọng đấy.

47
00:03:13,320 --> 00:03:15,920
Nhưng đó mới chỉ là sơ lược về API.

48
00:03:16,020 --> 00:03:20,940
Bây giờ khi đã nắm được cách hoạt động của mã, ta sẽ tạo nhanh

49
00:03:20,940 --> 00:03:22,150
một trình duyệt web.

50
00:03:22,530 --> 00:03:29,550
Nếu mở project web engine và đi tới MainWindow_H các bạn có thể thấy

51
00:03:29,550 --> 00:03:32,730
ta đã có một class được tổ chức khá hợp lý. Nhìn vào mục private

52
00:03:32,730 --> 00:03:34,920
ta thấy chỉ có 3 widget private,

53
00:03:35,060 --> 00:03:38,240
QWidget, QWebEngineView và QLineEdit.

54
00:03:38,250 --> 00:03:43,920
Ta sử dụng QLineEdit để nhập dữ liệu và xem các Url hiện tại, và ta sử dụng central_widget để

55
00:03:43,920 --> 00:03:45,570
điều hướng một số layout.

56
00:03:45,630 --> 00:03:50,050
Về cơ bản ta cần phải đặt Url phía trên web_view.

57
00:03:50,190 --> 00:03:54,930
Như vậy ta cùng chuyển sang mainwindow, và việc đầu tiên cần làm

58
00:03:54,930 --> 00:03:59,940
là tạo 3 widget này.

59
00:03:59,960 --> 00:04:05,560
Ta cũng cần gọi hàm set_up_central_widget_ui, nhìn vào đây ta sẽ thấy hàm này có công dụng

60
00:04:05,560 --> 00:04:07,980
tạo một VBoxLayout.

61
00:04:08,020 --> 00:04:13,630
Trước đó ta thêm QLineEdit, được gọi là edit_bar, để đặt lên phía trên web_view.

62
00:04:13,630 --> 00:04:19,870
Ta cũng thêm web_view vào nữa. Sau đó ta đặt layout vừa tạo trên

63
00:04:19,870 --> 00:04:20,840
central_widget.

64
00:04:21,190 --> 00:04:25,600
Ta sẽ gọi một central_widget trên mainwindow làm bộ phận của hàm tạo này và đưa

65
00:04:25,600 --> 00:04:26,890
vào central_widget của ta.

66
00:04:26,920 --> 00:04:30,430
Công việc tiếp theo cần làm là nạp Url.

67
00:04:30,520 --> 00:04:33,230
Ta sẽ nạp Url của Wikipedia làm ví dụ.

68
00:04:33,280 --> 00:04:40,920
Tiếp đó ta sẽ tạo một QString tạm thời và đưa vào class edit_bar.

69
00:04:41,120 --> 00:04:47,020
Bây giờ để gọi hàm load trên web_view, ta cần phải gói QString với

70
00:04:47,020 --> 00:04:54,200
hàm tạo Url để đảm bảo web_view có thể tải được. Cuối cùng ta cần phải chắc chắn rằng mỗi khi

71
00:04:54,200 --> 00:04:56,770
thay đổi Url trong LineEdit

72
00:04:56,840 --> 00:04:58,220
thì web_view cũng thay đổi.

73
00:04:58,310 --> 00:05:04,430
May là QLineEdit có tín hiệu báo thời điểm hoàn thành chỉnh sửa, tín hiệu hoàn thành chỉnh sửa.

74
00:05:04,610 --> 00:05:05,890
Chúng ta sẽ kết nối tín hiệu này với

75
00:05:05,900 --> 00:05:07,990
hàm setUrl trong Main_Window.

76
00:05:10,840 --> 00:05:13,740
Như vậy bây giờ ta sẽ cuộn xuống hàm setUrl

77
00:05:13,900 --> 00:05:19,570
và lấy text từ QLineEdit và sử dụng một hàm tĩnh để báo cho

78
00:05:19,570 --> 00:05:20,530
class QUrl

79
00:05:20,530 --> 00:05:24,500
biết thao tác đó là của người sử dụng trước khi nạp vào WebView.

80
00:05:24,510 --> 00:05:28,500
Giờ ta cùng chạy thử và xem nó hoạt động đến đâu nhé.

81
00:05:28,700 --> 00:05:34,340
Trông giống trình duyệt web đấy. Hẳn các bạn đang tự hỏi "Chỉ thế thôi sao"?

82
00:05:34,350 --> 00:05:35,330
Sự thật là

83
00:05:35,340 --> 00:05:37,080
"Ờ thì đại loại thế".

84
00:05:37,080 --> 00:05:40,410
Điều thú vị về trình duyệt web là lướt internet.

85
00:05:40,860 --> 00:05:46,620
Nếu mở Chrome các bạn có thể thấy ta có widget tab, một số biểu tượng, thế là hết.

86
00:05:46,620 --> 00:05:49,800
Giao diện người dùng của trình duyệt thường khá hạn chế.

87
00:05:49,800 --> 00:05:52,710
Tôi đố các bạn tạo được trình duyệt tab tương tự bằng Qt đấy.

88
00:05:52,710 --> 00:05:55,850
Các bạn sẽ mất gần một ngày chỉ để lập trình một widget tab đơn giản.

89
00:05:55,950 --> 00:06:00,450
Nếu cần thêm ví dụ các bạn có thể tìm trên trang web của Qt qua đường dẫn

90
00:06:00,450 --> 00:06:01,120
Url này.

91
00:06:01,300 --> 00:06:07,710
Cookie browser, stylesheet, Html2Pdf và Spellchecker đều là những ví dụ khá thú vị. Với những gì

92
00:06:07,710 --> 00:06:09,070
ta đã học được,

93
00:06:09,090 --> 00:06:13,960
có thể những ví dụ này sẽ truyền cảm hứng cho các bạn tạo ra trình duyệt web độc đáo và "gãi đúng chỗ ngứa" của riêng mình.

94
00:06:14,010 --> 00:06:18,210
Tôi khuyến khích các bạn tham khảo thêm những ví dụ trên và hiểu rõ chúng đang gãi

95
00:06:18,210 --> 00:06:21,980
chỗ ngứa nào bởi điều đó sẽ giúp các bạn nhận ra trường hợp độc nhất của chính bản thân.

96
00:06:22,080 --> 00:06:26,760
Nhưng với video này tôi hy vọng đã truyền được cảm hứng để các bạn tạo được trình duyệt web cá nhân của mình, xây dựng

97
00:06:26,820 --> 00:06:32,040
trình duyệt web đơn giản và ôn tập lại widget giao diện lập trình ứng dụng.

98
00:06:32,190 --> 00:06:36,420
Ta còn thiếu một điều, đó là khả năng tương tác trực tiếp với web từ ứng dụng

99
00:06:36,420 --> 00:06:36,880
máy tính.

100
00:06:36,900 --> 00:06:39,950
Chúng ta sẽ tìm hiểu về chủ đề này trong video tiếp theo với Qt WebChannel.

