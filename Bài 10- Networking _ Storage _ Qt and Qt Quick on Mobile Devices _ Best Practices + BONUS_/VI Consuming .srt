1
00:00:00,000 --> 00:00:01,829
Trong bài hôm nay, chúng ta sẽ học về cách

2
00:00:01,829 --> 00:00:04,080
làm việc với rest api trong

3
00:00:04,080 --> 00:00:07,109
ứng dụng qml. Ta sẽ sử dụng

4
00:00:07,109 --> 00:00:10,080
api được cung cấp bởi

5
00:00:10,080 --> 00:00:14,610
website này đây. Đây là ICNDb.com,

6
00:00:14,610 --> 00:00:18,090
nó cung cấp một api hài hước

7
00:00:18,090 --> 00:00:21,689
với những câu đùa về Chuck Norris. Bạn

8
00:00:21,689 --> 00:00:25,380
kéo xuống Database RESTful API và

9
00:00:25,380 --> 00:00:27,779
click vào link này, và sẽ thấy

10
00:00:27,779 --> 00:00:30,539
tài liệu về API đó. Nếu

11
00:00:30,539 --> 00:00:32,579
bạn kéo xuống nữa, bạn sẽ thấy một số

12
00:00:32,579 --> 00:00:35,670
link mà bạn có thể dùng để lấy API này. Ta

13
00:00:35,670 --> 00:00:38,780
sẽ dùng cái này. Bạn copy nó

14
00:00:38,780 --> 00:00:43,350
và mở trong tab khác. Ta sẽ

15
00:00:43,350 --> 00:00:44,430
mở nó ra thế này.

16
00:00:44,430 --> 00:00:46,530
Và nếu tôi gọi nó thế này, nó sẽ

17
00:00:46,530 --> 00:00:49,590
cho tôi 3 câu đùa. Bạn thấy đấy, tôi đang

18
00:00:49,590 --> 00:00:53,039
mở cái này trong một trình duyệt. Tôi đang dùng

19
00:00:53,039 --> 00:00:54,960
Firefox, còn bạn muốn dùng cái gì

20
00:00:54,960 --> 00:00:58,680
cũng được, nhưng Firefox thì mặc định

21
00:00:58,680 --> 00:01:01,890
hiển thị những nội dung này cho phép tôi đọc

22
00:01:01,890 --> 00:01:04,559
dữ liệu rất dễ dàng. Tôi sẽ tăng

23
00:01:04,559 --> 00:01:07,650
kích thước lên để bạn thấy rõ hơn. Okay, ta

24
00:01:07,650 --> 00:01:11,010
có một đối tượng json, và ở trong đó ta có

25
00:01:11,010 --> 00:01:14,070
attribute là "type", để báo xem

26
00:01:14,070 --> 00:01:17,400
có thành công (success) hay không, và trong đó ta có

27
00:01:17,400 --> 00:01:21,420
mảng "value", mảng này chứa

28
00:01:21,420 --> 00:01:24,000
thêm các đối tượng json nhỏ nữa. Ở vị trí 0, ta

29
00:01:24,000 --> 00:01:26,810
có đối tượng này. Trong đó có một id,

30
00:01:26,810 --> 00:01:31,380
có joke, và có cả mảng categories,

31
00:01:31,380 --> 00:01:33,900
nhưng mảng này đang rỗng.

32
00:01:33,900 --> 00:01:37,439
Ta sẽ thử với 10 joke xem có

33
00:01:37,439 --> 00:01:40,350
khác gì không... Không, tức là

34
00:01:40,350 --> 00:01:43,259
mảng categories này đúng là rỗng, nhưng giờ ta

35
00:01:43,259 --> 00:01:44,939
chỉ quan tâm đến cái joke này thôi. Vậy nên

36
00:01:44,939 --> 00:01:46,649
ta sẽ bắt đầu dùng những

37
00:01:46,649 --> 00:01:49,950
dữ liệu này, đưa nó vào trong code QML,

38
00:01:49,950 --> 00:01:52,320
tải dữ liệu từ đây về,

39
00:01:52,320 --> 00:01:54,890
và hiển thị nó ra trong

40
00:01:54,890 --> 00:01:57,750
ListView. Và khi tải được dữ liệu từ

41
00:01:57,750 --> 00:01:59,159
internet rồi, ta sẽ tìm cách

42
00:01:59,159 --> 00:02:02,790
đặt nó vào trong Model để có thể

43
00:02:02,790 --> 00:02:05,070
hiển thị lên View. Ta sẽ dùng

44
00:02:05,070 --> 00:02:07,770
Qt Creator để lập trình. Đây là

45
00:02:07,770 --> 00:02:09,239
Qt Creator. Ta sẽ

46
00:02:09,239 --> 00:02:11,670
tạo proect: chọn Qt Quick

47
00:02:11,670 --> 00:02:12,599
application,

48
00:02:12,599 --> 00:02:16,049
gọi nó là RESTApisDemo, lưu nó

49
00:02:16,049 --> 00:02:18,900
tại địa chỉ như thường, chọn next, chọn

50
00:02:18,900 --> 00:02:24,870
phiên bản Qt, chọn kit, và Finish. ta

51
00:02:24,870 --> 00:02:26,459
đổi tên ở đây thành

52
00:02:26,459 --> 00:02:33,000
Rest APIs Demo, và ta cần import

53
00:02:33,000 --> 00:02:39,989
QtQuick.Controls, bởi vì ta sẽ

54
00:02:39,989 --> 00:02:44,579
cần dùng nút bấm và SpinBox. Ta cũng sẽ

55
00:02:44,579 --> 00:02:51,299
cần QtQuick.Layouts, ta chọn

56
00:02:51,299 --> 00:02:54,480
bản 1.4. Dưới này ta sẽ đặt

57
00:02:54,480 --> 00:03:00,299
ColumnLayout, cái này sẽ fill

58
00:03:00,299 --> 00:03:05,370
parent của nó. Đặt spacing là 0. Trong này

59
00:03:05,370 --> 00:03:07,939
ta sẽ có một ListView,

60
00:03:07,939 --> 00:03:12,030
và component SpinBox này sẽ

61
00:03:12,030 --> 00:03:15,750
sẽ cho phép ta xác định số joke (câu đùa)

62
00:03:15,750 --> 00:03:18,780
mà ta muốn tải, và một Button để

63
00:03:18,780 --> 00:03:21,209
bắt đầu download với

64
00:03:21,209 --> 00:03:24,629
api. ListView sẽ có

65
00:03:24,629 --> 00:03:29,879
một id: mListViewId như bình thường. SpinBox

66
00:03:29,879 --> 00:03:34,680
sẽ là spinBoxId, và Button

67
00:03:34,680 --> 00:03:36,689
sẽ là buttonId. Tôi không chắc

68
00:03:36,689 --> 00:03:38,609
là có cần id cho

69
00:03:38,609 --> 00:03:42,000
button hay không, nhưng ta cứ để đó. Ta cũng

70
00:03:42,000 --> 00:03:45,060
sẽ cần một list model cho các view này, nên

71
00:03:45,060 --> 00:03:49,439
ta viết listMode... id: mListModel.

72
00:03:49,439 --> 00:03:53,669
Nó sẽ hoạt động thế này:

73
00:03:53,669 --> 00:03:55,919
Ta sẽ nhập dữ liệu vào

74
00:03:55,919 --> 00:03:59,280
kiểu động (dynamic) từ dữ liệu mà ta lấy được từ

75
00:03:59,280 --> 00:04:02,340
REST API. Ta xác định một model cho

76
00:04:02,340 --> 00:04:08,639
ListView này: mListModelId, Tôi thường

77
00:04:08,639 --> 00:04:10,829
viết Id ở cuối để biết rằng nó là một

78
00:04:10,829 --> 00:04:13,500
id. Cái ListView này sẽ cần có

79
00:04:13,500 --> 00:04:15,959
delegate... ta kéo xuống phía dưới

80
00:04:15,959 --> 00:04:18,750
và định nghĩa một component

81
00:04:18,750 --> 00:04:21,539
làm delegate. Tôi không muốn

82
00:04:21,539 --> 00:04:24,719
phải gõ cả chỗ này nên tôi sẽ copy từ code có sẵn

83
00:04:24,719 --> 00:04:26,410
sẽ đặt nó vào đây

84
00:04:26,410 --> 00:04:29,110
và sẽ giải thích cho bạn sau. Nếu bạn đã

85
00:04:29,110 --> 00:04:31,450
học chương về model view

86
00:04:31,450 --> 00:04:34,000
rồi thì sẽ thấy cái này sẽ không có gì khó hiểu cả.

87
00:04:34,000 --> 00:04:36,550
Đây là một delegate, ta có

88
00:04:36,550 --> 00:04:39,190
id, ở trong có Rectangle với

89
00:04:39,190 --> 00:04:41,830
một số thuộc tính như là width, height, color, và

90
00:04:41,830 --> 00:04:44,350
trong này nữa ta có component Text, nó sẽ

91
00:04:44,350 --> 00:04:48,190
hiển thị các jokes trong chương trình này,

92
00:04:48,190 --> 00:04:52,900
và ta tạo kiểu cho Text

93
00:04:52,900 --> 00:04:55,600
để nó đẹp hơn. Ta đặt

94
00:04:55,600 --> 00:04:58,420
font size, đặt nó vào Center của

95
00:04:58,420 --> 00:05:00,070
parent, và có đặt cả

96
00:05:00,070 --> 00:05:04,150
margin cho Rectangle để tạo

97
00:05:04,150 --> 00:05:06,550
không gian cho Text. Ta cũng

98
00:05:06,550 --> 00:05:09,370
align đoạn text ở trong Rectangle, và ta

99
00:05:09,370 --> 00:05:12,190
chọn WordWrap để text không bị

100
00:05:12,190 --> 00:05:14,650
cắt bớt đi khi hết dòng. Thế là hết.

101
00:05:14,650 --> 00:05:17,560
Ta quay về List View và

102
00:05:17,560 --> 00:05:21,820
xác địch delegate hco nó. Nó sẽ là

103
00:05:21,820 --> 00:05:26,740
delegateId, đúng rồi, okay. Giờ

104
00:05:26,740 --> 00:05:28,720
ta có delegate rồi, ta sẽ

105
00:05:28,720 --> 00:05:31,510
đặt ListView để fill không gian trống.

106
00:05:31,510 --> 00:05:35,080
Ta sẽ viết

107
00:05:35,080 --> 00:05:41,650
Layout.fillWidth... đặt là true... Layout.fillHeight...

108
00:05:41,650 --> 00:05:46,870
và đặt cái này là true. Xóa một

109
00:05:46,870 --> 00:05:50,740
dấu hai chấm đi. Ta cần cái này fill

110
00:05:50,740 --> 00:05:54,190
khoảng trống chiều ngang, okay, nên ta sẽ viết

111
00:05:54,190 --> 00:05:59,350
SpinBox và Button fillWidth. Với

112
00:05:59,350 --> 00:06:02,970
SpinBox, ta cần xác định một

113
00:06:02,970 --> 00:06:05,680
giá trị mặc định cho nó. Ta

114
00:06:05,680 --> 00:06:08,290
đặt là 10. Nhấn Ctrl+A,

115
00:06:08,290 --> 00:06:11,890
Ctrl+I để sắp xếp lại code. Với

116
00:06:11,890 --> 00:06:14,320
button, ta muốn hiển thị chữ trên

117
00:06:14,320 --> 00:06:17,820
nút đó... ta viết "Fetch". Ta

118
00:06:17,820 --> 00:06:21,850
cần biết khi nút này được click, vì

119
00:06:21,850 --> 00:06:23,620
lúc đó là lúc để chương trình bắt đầu

120
00:06:23,620 --> 00:06:26,530
download dữ liệu. Ta sẽ

121
00:06:26,530 --> 00:06:28,240
viết một hàm để

122
00:06:28,240 --> 00:06:30,840
lấy joke. Ta lên trên đầu này,

123
00:06:30,840 --> 00:06:35,370
viết function fetchJokes.

124
00:06:35,370 --> 00:06:38,880
Nó sẽ nhận vào một URL,

125
00:06:38,880 --> 00:06:41,100
giống như trong bài trước thôi.

126
00:06:41,100 --> 00:06:44,160
Ta sẽ download dữ liệu HTTP,

127
00:06:44,160 --> 00:06:47,130
trong ví dụ này thì sẽ là dữ liệu kiểu JSON,

128
00:06:47,130 --> 00:06:49,770
từ request. Trong hàm này ta sẽ

129
00:06:49,770 --> 00:06:53,430
nhập vào một call back... giống hệt

130
00:06:53,430 --> 00:06:56,639
như bài trước. Trong này, ta

131
00:06:56,639 --> 00:06:58,740
sẽ làm đúng những gì ta đã làm trong

132
00:06:58,740 --> 00:07:01,530
bài trước: bạn thấy đây, ta tạo

133
00:07:01,530 --> 00:07:04,380
một đối tượng XMLHttpRequest, ta gọi hàm open

134
00:07:04,380 --> 00:07:07,949
và send này, và có

135
00:07:07,949 --> 00:07:12,030
kiểm tra ready state change, nếu là Done thì

136
00:07:12,030 --> 00:07:14,460
ta kiểm tra xem status có ổn không

137
00:07:14,460 --> 00:07:17,820
để console.log ra "resource found"... Ta

138
00:07:17,820 --> 00:07:19,979
không cần in ra textId vì không có textId

139
00:07:19,979 --> 00:07:23,160
trong ví dụ này... xóa nó đi, và

140
00:07:23,160 --> 00:07:26,550
call back một hàm với responseText

141
00:07:26,550 --> 00:07:29,400
nhận được trong lúc tải, okay.

142
00:07:29,400 --> 00:07:31,320
Cái này đại khái như bài trước.

143
00:07:31,320 --> 00:07:33,479
Đoạn này thì hoàn toàn giống hệt bài trước,

144
00:07:33,479 --> 00:07:36,060
ta chỉ đổi tên hàm đi

145
00:07:36,060 --> 00:07:39,030
để thấy rõ chức năng của nó thôi.

146
00:07:39,030 --> 00:07:41,099
Khi click vào button, chương trình

147
00:07:41,099 --> 00:07:44,180
cần gọi hàm fetchJokes.

148
00:07:44,180 --> 00:07:49,169
Viết thế này. Ta cần nhập vào

149
00:07:49,169 --> 00:07:52,169
cái URL. Ta hãy quay lại REST API

150
00:07:52,169 --> 00:07:55,200
ở đây, copy đoạn URL để

151
00:07:55,200 --> 00:07:59,789
nhập vào. Ta sẽ đặt

152
00:07:59,789 --> 00:08:03,120
URL đó vào trong này, nhưng số này

153
00:08:03,120 --> 00:08:05,370
sẽ là kiểu dynamic, chứ không phải

154
00:08:05,370 --> 00:08:08,150
static như thế này. Ta đặt

155
00:08:08,150 --> 00:08:13,050
dấu ngoặc kép vào, và thêm số đó vào kiểu

156
00:08:13,050 --> 00:08:16,940
dynamic. Ta viết

157
00:08:16,940 --> 00:08:21,840
+ spinBoxId.value... tức là sẽ nhận giá trị từ

158
00:08:21,840 --> 00:08:24,389
trong SpinBox. Ta có thể thay đổi giá trị này

159
00:08:24,389 --> 00:08:27,060
trong lúc chạy chương trình bằng cách click vào nút + hoặc -,

160
00:08:27,060 --> 00:08:30,419
và khi click vào nút này đây

161
00:08:30,419 --> 00:08:32,820
thì ta sẽ nhận giá trị

162
00:08:32,820 --> 00:08:35,219
ở trong SpinBox. Mong là không quá lằng nhằng.

163
00:08:35,219 --> 00:08:37,229
Xong rồi, ta cần nhập vào

164
00:08:37,229 --> 00:08:42,870
hàm callback. function(response)... ta

165
00:08:42,870 --> 00:08:45,320
cần nhập vào một danh sách các parameter và

166
00:08:45,320 --> 00:08:48,030
viết phần thân cho function

167
00:08:48,030 --> 00:08:51,030
ở đây. À không, cần không cần danh sách parameter ở đây,

168
00:08:51,030 --> 00:08:53,640
vì ta đặt nó ở trong response. Xin lỗi.

169
00:08:53,640 --> 00:08:56,310
Ta thu nhỏ bên này lại để

170
00:08:56,310 --> 00:08:58,530
nhìn được code dễ hơn.

171
00:08:58,530 --> 00:09:01,560
Ta có response ở đây,

172
00:09:01,560 --> 00:09:03,420
ta sẽ in nó ra console

173
00:09:03,420 --> 00:09:06,090
để biết được dữ liệu nhận được là gì, để

174
00:09:06,090 --> 00:09:09,240
kiểm tra xem logic ở đây có đúng không. Ta

175
00:09:09,240 --> 00:09:13,980
viết console.log(response) thế này.

176
00:09:13,980 --> 00:09:16,650
Hãy chạy thử chương trình xem

177
00:09:16,650 --> 00:09:20,730
logic có đúng không. Ta có giao diện

178
00:09:20,730 --> 00:09:22,920
người dùng này, không có gì ở đây cả

179
00:09:22,920 --> 00:09:24,750
vì model này đang trống không.

180
00:09:24,750 --> 00:09:28,800
Ta nhấn Fetch, xem xem được cái gì. Okay,

181
00:09:28,800 --> 00:09:32,970
Có type success value id joke Chuck

182
00:09:32,970 --> 00:09:34,740
Norris, đại loại thế,

183
00:09:34,740 --> 00:09:37,740
okay. Ta có dữ liệu ở đây, ta cần nhập nó,

184
00:09:37,740 --> 00:09:39,930
đặt dữ liệu đó vào trong model.

185
00:09:39,930 --> 00:09:43,080
Ta cần kiểm tra xem có nhận được

186
00:09:43,080 --> 00:09:46,430
response hợp lệ không, nên viết if(response),

187
00:09:46,430 --> 00:09:52,530
nhập dữ liệu vào, và nếu không có

188
00:09:52,530 --> 00:09:59,400
response, thì ta viết console.log("something

189
00:09:59,400 --> 00:10:07,080
went wrong"), thế này là được. Giờ ta cần

190
00:10:07,080 --> 00:10:09,570
chuyển dữ liệu này thành một

191
00:10:09,570 --> 00:10:12,560
đối tượng json để dùng được. Ta viết var

192
00:10:12,560 --> 00:10:20,670
object = JSON.parse, và nhập vào

193
00:10:20,670 --> 00:10:22,590
cái string cần nhập, ta viết

194
00:10:22,590 --> 00:10:26,880
response, đúng cái ta cần. Giờ

195
00:10:26,880 --> 00:10:30,650
ta cần chạy vòng lặp,

196
00:10:40,899 --> 00:10:43,339
lặp qua cái này để

197
00:10:43,339 --> 00:10:45,800
tìm lấy joke. Tôi sẽ quay lại

198
00:10:45,800 --> 00:10:47,630
trình duyệt, xem lại cấu trúc của

199
00:10:47,630 --> 00:10:49,790
response mà ta nhận được, cần

200
00:10:49,790 --> 00:10:52,850
biết cái cấu trúc đó. Để ý rằng đối tượng ta nhận được

201
00:10:52,850 --> 00:10:55,670
sẽ có một attribute là

202
00:10:55,670 --> 00:10:59,480
type, và một mảng value. Ta cần

203
00:10:59,480 --> 00:11:02,000
chạy vòng lặp qua mảng này

204
00:11:02,000 --> 00:11:04,640
để lấy những đối tượng này. Nếu bạn không

205
00:11:04,640 --> 00:11:07,040
biết cách chạy vòng lặp qua mảng, bạn có thể

206
00:11:07,040 --> 00:11:09,830
mở công tụ tìm kiếm ra

207
00:11:09,830 --> 00:11:19,010
và tìm thế này... Nó sẽ

208
00:11:19,010 --> 00:11:22,730
dẫn tới tài liệu của JavaScript,

209
00:11:22,730 --> 00:11:26,330
bạn vào đây và tìm trong

210
00:11:26,330 --> 00:11:29,920
Built-in objects, nhìn vào Array, và

211
00:11:29,920 --> 00:11:32,810
sẽ thấy các hàm mà bạn có thể gọi

212
00:11:32,810 --> 00:11:35,300
với một mảng. Một hàm ta cần là foreach,

213
00:11:35,300 --> 00:11:38,390
bạn có thể dùng hàm này để lặp qua

214
00:11:38,390 --> 00:11:41,750
một mảng. Bạn đọc đoạn này để xem

215
00:11:41,750 --> 00:11:43,760
cách lặp qua mảng. Đây là

216
00:11:43,760 --> 00:11:46,370
hàm ta sẽ dùng. Ta sẽ quay

217
00:11:46,370 --> 00:11:56,470
về code và viết object.values,

218
00:11:57,190 --> 00:12:00,500
bạn để ý trong response của ta

219
00:12:00,500 --> 00:12:04,399
có một mảng "value"... không phải

220
00:12:04,399 --> 00:12:06,770
"values" mà là "value", nên sẽ phải

221
00:12:06,770 --> 00:12:11,839
sửa lại, và viết forEach(). Trong này ta

222
00:12:11,839 --> 00:12:14,240
nhập vào hàm callback, đúng như

223
00:12:14,240 --> 00:12:17,959
ta làm với request, cái này sẽ nhập vào

224
00:12:17,959 --> 00:12:20,720
một joke làm parameter, và

225
00:12:20,720 --> 00:12:23,329
ở đây ta sẽ có

226
00:12:23,329 --> 00:12:26,270
đối tượng joke. Ta đi xuống phần thân

227
00:12:26,270 --> 00:12:29,120
hàm để xử lí

228
00:12:29,120 --> 00:12:32,450
dữ liệu về joke của ta. Ta cần

229
00:12:32,450 --> 00:12:35,000
lấy dữ liệu này và đặt nó vào trong

230
00:12:35,000 --> 00:12:37,610
Model. Okay, ta cần lấy cái joke ra từ

231
00:12:37,610 --> 00:12:40,520
trong đối tượng joke. Ta sẽ

232
00:12:40,520 --> 00:12:42,709
lấy một trong số các

233
00:12:42,709 --> 00:12:44,570
phần tử ở đây... bạn thấy ta có rất nhiều phần tử đó,

234
00:12:44,570 --> 00:12:44,940
ta sẽ lấy

235
00:12:44,940 --> 00:12:46,740
một phần tử, phần tử này chứa

236
00:12:46,740 --> 00:12:49,320
một joke, và ta cần lấy joke

237
00:12:49,320 --> 00:12:53,100
từ trong đó ra. Mong là không quá khó hiểu.

238
00:12:53,100 --> 00:12:54,240
Giờ ta sẽ

239
00:12:54,240 --> 00:12:56,400
lấy id của Model, hay là

240
00:12:56,400 --> 00:13:01,980
model Id, ta viết mListModelId.append(),

241
00:13:01,980 --> 00:13:04,740
vì ta cần thêm dữ liệu vào cuối model,

242
00:13:04,740 --> 00:13:07,980
thêm một đối tượng JSON vào cuối.

243
00:13:07,980 --> 00:13:14,070
Ta viết "joke", okay. Ta cần

244
00:13:14,070 --> 00:13:18,030
đặt dấu hai chấm ở đây và viết joke.joke.

245
00:13:18,030 --> 00:13:20,970
Joke là đối tượng để ta nhập vào đây,

246
00:13:20,970 --> 00:13:23,490
và ta cần lấy câu đùa từ trong đó ra.

247
00:13:23,490 --> 00:13:25,650
Bạn có thể thấy rằng ta gõ đúng

248
00:13:25,650 --> 00:13:27,870
rồi nhưng lại sai chỗ rồi.

249
00:13:27,870 --> 00:13:33,150
Ta cần copy đoạn này, đặt nào vào

250
00:13:33,150 --> 00:13:36,540
sau lúc nhận dữ liệu. Xin lỗi các bạn chỗ này. Giờ ta

251
00:13:36,540 --> 00:13:39,270
sẽ chạy thử chương trình xem có

252
00:13:39,270 --> 00:13:41,730
nhận được dữ liệu và hiển thị nó được

253
00:13:41,730 --> 00:13:49,020
ra model không. Chạy thử nào. Okay, ta có

254
00:13:49,020 --> 00:13:52,380
chương trình đây rồi. Thay đổi đi để

255
00:13:52,380 --> 00:13:56,340
lấy 5 joke. Fetch, và bạn thấy ta

256
00:13:56,340 --> 00:13:58,860
đã nhận được joke đây. Ta nhấn Fetch tiếp,

257
00:13:58,860 --> 00:14:01,800
bạn thấy danh sách joke lại dài ra đó. Bạn có thể

258
00:14:01,800 --> 00:14:04,560
tăng số này lên, fetch lại, và

259
00:14:04,560 --> 00:14:06,480
bạn thấy ta có lấy thêm joke

260
00:14:06,480 --> 00:14:08,970
và hiển thị ra chương trình đây.

261
00:14:08,970 --> 00:14:11,580
Quan trọng nhất trong chương trình này là

262
00:14:11,580 --> 00:14:13,740
cách bạn truyền dữ liệu tải về.

263
00:14:13,740 --> 00:14:15,960
Tải dữ liệu về là nội dung

264
00:14:15,960 --> 00:14:17,670
bài trước, ta đã học về

265
00:14:17,670 --> 00:14:20,790
tải dữ liệu HTML từ trên mạng về. Giờ

266
00:14:20,790 --> 00:14:23,220
ta học cách truyền dữ liệu dưới dạng

267
00:14:23,220 --> 00:14:26,880
đối tượng json, và lấy thông tin từ trong

268
00:14:26,880 --> 00:14:29,640
đối tượng json đó theo ý muốn. Trong bài này,

269
00:14:29,640 --> 00:14:32,670
ta cần lấy dữ liệu về joke, đặt nó vào trong

270
00:14:32,670 --> 00:14:35,000
model bằng hàm append

271
00:14:35,000 --> 00:14:37,620
một cách dynamic. Như vậy là hết nội dung

272
00:14:37,620 --> 00:14:39,270
bài này. Tôi mong bạn đã hiểu cách làm việc

273
00:14:39,270 --> 00:14:43,440
với XMLHttpRequest để tải

274
00:14:43,440 --> 00:14:47,280
dữ liệu HTTP và truyền dữ liệu đó dưới dạng json

275
00:14:47,280 --> 00:14:49,650
theo ý muốn. Trong bài

276
00:14:49,650 --> 00:14:51,300
tiếp theo, ta sẽ học về

277
00:14:51,300 --> 00:14:53,760
tính năng lưu thông tin

278
00:14:53,760 --> 00:00:00,000
của Qt Quick. Hẹn gặp lại các bạn.
S

