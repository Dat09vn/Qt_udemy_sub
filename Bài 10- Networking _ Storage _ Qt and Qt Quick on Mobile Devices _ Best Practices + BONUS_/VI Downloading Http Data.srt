1
00:00:00,030 --> 00:00:05,850
Trong bài này, chúng ta sẽ học về cách sử dụng

2
00:00:02,190 --> 00:00:09,179
đối tượng JavaScript XMLHttpRequest để

3
00:00:05,850 --> 00:00:11,719
download dữ liệu HTTP. Ta có thể

4
00:00:09,179 --> 00:00:14,040
dùng kiểu asynchronous hoặc synchronous.

5
00:00:11,719 --> 00:00:16,619
Ta vào Qt Creator

6
00:00:14,040 --> 00:00:18,029
và thử xem. QT Creator

7
00:00:16,619 --> 00:00:21,480
đây rồi. Tã sẽ tạo một

8
00:00:18,029 --> 00:00:25,680
project: chọn QT Quick application

9
00:00:21,480 --> 00:00:29,699
như thường. Gọi nó là XMLHttpRequestDemo,

10
00:00:25,680 --> 00:00:34,739
lưu nó vào ổ, nhấn

11
00:00:29,699 --> 00:00:39,270
Next, chọn phiên bản QT, chọn

12
00:00:34,739 --> 00:00:47,700
kit, và finish. Ta sẽ đổi

13
00:00:39,270 --> 00:00:49,739
tên ở đây. Ta sẽ import QT quick

14
00:00:47,700 --> 00:00:55,710
controls bởi vì ta sẽ có dùng

15
00:00:49,739 --> 00:01:03,180
text area. Ở dưới này ta

16
00:00:55,710 --> 00:01:11,430
sẽ đặt một component cho text are. Id

17
00:01:03,180 --> 00:01:15,060
sẽ là text area. Cái này sẽ

18
00:01:11,430 --> 00:01:23,580
fill parent của nó. Ta cho nó

19
00:01:15,060 --> 00:01:27,180
hiện rich text. Viết

20
00:01:23,580 --> 00:01:30,659
RichText vào đây. Cái này sẽ cho phép ta

21
00:01:27,180 --> 00:01:33,869
hiện dữ liệu HTML. Mục đích của cái này là

22
00:01:30,659 --> 00:01:36,659
để hiện HTMl mà ta sẽ download từ

23
00:01:33,869 --> 00:01:41,070
internet về, ok. Chương trình này sẽ hoạt động như

24
00:01:36,659 --> 00:01:43,350
một trình duyệt đơn giản, khá là

25
00:01:41,070 --> 00:01:46,020
vô dụng, hiển thị dữ liệu rất xấu,

26
00:01:43,350 --> 00:01:48,329
không hề đẹp, nhưng đủ dể

27
00:01:46,020 --> 00:01:51,930
cho bạn thấy được tính năng của

28
00:01:48,329 --> 00:01:56,009
XMLHttpRequest. Ta sẽ đặt vào một chút

29
00:01:51,930 --> 00:01:58,799
text làm placeholder. Ta viết "Html Data

30
00:01:56,009 --> 00:02:01,170
here", thế là được. Ở dưới ta sẽ

31
00:01:58,799 --> 00:02:03,710
đặt MouseArea. Cái này sẽ

32
00:02:01,170 --> 00:02:03,710
fill cả cửa sổ,

33
00:02:05,050 --> 00:02:12,400
và khi được clicked vào thì ta

34
00:02:08,620 --> 00:02:17,100
sẽ download dữ liệu về. Okay. Giờ bạn

35
00:02:12,400 --> 00:02:17,100
có thể download dữ liệu kiểu synchronously,

36
00:02:19,350 --> 00:02:24,100
nghĩa là chương trình này sẽ đóng băng lại,

37
00:02:22,390 --> 00:02:26,890
từ lúc bạn click vào mouse area ở đây,

38
00:02:24,100 --> 00:02:29,290
bạn sẽ phải đợi đến lúc download

39
00:02:26,890 --> 00:02:31,300
hoàn thành rồi thì mới có thể sử dụng chương trình

40
00:02:29,290 --> 00:02:35,170
tiếp được, vậy nên bạn không nên làm

41
00:02:31,300 --> 00:02:43,060
kiểu này. Phương pháp nên làm là kiểu

42
00:02:35,170 --> 00:02:44,770
async, làm những việc vừa rồi kiểu asynchronous, nhưng tôi

43
00:02:43,060 --> 00:02:46,630
vẫn cho bạn xem cách làm synchronous

44
00:02:44,770 --> 00:02:49,900
bởi vì đôi khi bạn sẽ muốn làm kiểu này

45
00:02:46,630 --> 00:02:52,660
với dữ liệu nhỏ. Ta sẽ

46
00:02:49,900 --> 00:02:55,300
viết hàm để làm

47
00:02:52,660 --> 00:02:58,930
việc đó. Ta sẽ viết ở

48
00:02:55,300 --> 00:03:02,230
bậc gốc của component này, ta

49
00:02:58,930 --> 00:03:04,450
gọi nó alf downloadData, và ta

50
00:03:02,230 --> 00:03:06,670
cho nó một URL để

51
00:03:04,450 --> 00:03:12,280
download. Ta sẽ tạo một

52
00:03:06,670 --> 00:03:17,530
biến, gọi là xml http request (xhr), và

53
00:03:12,280 --> 00:03:19,959
định nghĩa nó thế này. Đây là

54
00:03:17,530 --> 00:03:22,959
cách bạn định nghĩa trong JavaScript.

55
00:03:19,959 --> 00:03:26,739
Bạn dùng từ khóa 'new'. Sau khi

56
00:03:22,959 --> 00:03:29,200
định nghĩa đối tượng xhr rồi, bạn

57
00:03:26,739 --> 00:03:31,480
bắt đầu download. Bạn bắt đầu download bằng cách

58
00:03:29,200 --> 00:03:36,310
gọi hàm open của nó. Ta

59
00:03:31,480 --> 00:03:39,160
viết xhr.open. Ta sẽ

60
00:03:36,310 --> 00:03:42,160
xác định hàm cụ thể, là GET,

61
00:03:39,160 --> 00:03:45,520
bởi vì ta muốn nhận dữ liệu về, và bạn

62
00:03:42,160 --> 00:03:49,180
đưa URL vào. Xong rồi thì

63
00:03:45,520 --> 00:03:52,750
xhr.send. Thế là được,

64
00:03:49,180 --> 00:03:55,209
là gửi được request để nhận

65
00:03:52,750 --> 00:03:57,520
dữ liệu HTML rồi. Giờ bạn sẽ cần biết status

66
00:03:55,209 --> 00:03:59,950
của request đó. Bạn sẽ cần biết xem

67
00:03:57,520 --> 00:04:01,720
có nhận được dữ liệu không, hay là

68
00:03:59,950 --> 00:04:04,780
có lỗi rồi, đại loại thế.

69
00:04:01,720 --> 00:04:08,830
Bạn có thể kiểm tra cái đó với

70
00:04:04,780 --> 00:04:11,140
onreadystatechange của

71
00:04:08,830 --> 00:04:14,320
XMLHttpRequest, bằng cách

72
00:04:11,140 --> 00:04:16,060
định nghĩa một hàm thế này: xhr.onreadystatechagne.

73
00:04:14,320 --> 00:04:18,220
Bạn thấy đấy, đây là một

74
00:04:16,060 --> 00:04:20,560
hàm mà bạn có thể định nghĩa được,

75
00:04:18,220 --> 00:04:25,630
và ta sẽ định nghĩa hàm này để

76
00:04:20,560 --> 00:04:28,270
kiểm tra status đó. Ở trong hàm này,

77
00:04:25,630 --> 00:04:31,540
bạn cần kiểm tra xem ready state

78
00:04:28,270 --> 00:04:35,860
là gì, và kiểm tra nó bằng

79
00:04:31,540 --> 00:04:37,840
property xhr.readyState này, okay.

80
00:04:35,860 --> 00:04:40,840
Có một vài trạng thái ready state

81
00:04:37,840 --> 00:04:44,200
nhưng trong bài này thì ta sẽ

82
00:04:40,840 --> 00:04:47,650
chỉ xét HEADERS_RECEIVED

83
00:04:44,200 --> 00:04:50,020
và DONE thôi. HEADERS_RECEIVED sẽ báo

84
00:04:47,650 --> 00:04:54,040
cho ta biết khi ta nhận được headers

85
00:04:50,020 --> 00:04:56,110
từ request của mình, còn DONE thì là khi

86
00:04:54,040 --> 00:04:59,740
request đã hoàn thành. Ta có thể kiểm tra

87
00:04:56,110 --> 00:05:02,110
xem dữ liệu ta nhận được có hợp lệ hay là

88
00:04:59,740 --> 00:05:07,500
có lỗi gì đó. Ta cần

89
00:05:02,110 --> 00:05:14,280
viết nếu xhr.readyState

90
00:05:07,500 --> 00:05:19,350
=== XMLHttpRequest.HEADERS_RECEIVED, thì

91
00:05:14,280 --> 00:05:28,030
ta sẽ làm việc gì đó, còn không thì nếu

92
00:05:19,350 --> 00:05:31,000
xhr.readyState ===

93
00:05:28,030 --> 00:05:37,750
XMLHttpRequest.DONE, tôi sẽ copy đoạn này

94
00:05:31,000 --> 00:05:40,750
vì tôi lười gõ, ta sẽ làm

95
00:05:37,750 --> 00:05:43,020
cái gì đó khác. Khi nhận được

96
00:05:40,750 --> 00:05:46,479
headers rồi thì ta viết console.log

97
00:05:43,020 --> 00:05:49,330
HEADERS_RECEIVED, okay. Ta cần làm cái này

98
00:05:46,479 --> 00:05:53,440
khi request đã DONE, ta cần biết xem
when the request is DONE, we want to know

99
00:05:49,330 --> 00:05:56,760
thông tin ta nhận được có phải dữ liệu HTTP hợp lệ hay không.

100
00:05:53,440 --> 00:06:04,390
Bạn cần kiểm tra status, bạn có thể viết

101
00:05:56,760 --> 00:06:06,940
if xhr.status == 200, tức

102
00:06:04,390 --> 00:06:09,970
là mã status bạn sẽ gặp nếu bạn

103
00:06:06,940 --> 00:06:12,880
nhận được dữ liệu thành công. Nếu nhận được status

104
00:06:09,970 --> 00:06:15,850
code là 200, thì bạn hiểu là đã nhận được

105
00:06:12,880 --> 00:06:18,010
dữ liệu rồi. Còn nếu không được 200 thì bạn hiểu

106
00:06:15,850 --> 00:06:22,050
là có vấn đề gì đó rồi, và ta sẽ báo lỗi

107
00:06:18,010 --> 00:06:22,050
vào console. Vậy nên ta viết

108
00:06:22,950 --> 00:06:26,370
"something went wrong".

109
00:06:26,540 --> 00:06:39,630
Giờ ta sẽ lưu dữ liệu lại.

110
00:06:29,400 --> 00:06:42,570
Ta viết ở đây console.log. Khi

111
00:06:39,630 --> 00:06:46,200
nhận được response, dữ liệu sẽ được lưu trong

112
00:06:42,570 --> 00:06:49,590
một property của xhr gọi là

113
00:06:46,200 --> 00:06:55,200
responseText, ta có thể

114
00:06:49,590 --> 00:07:02,300
viết... toString... console.log thế này.

115
00:06:55,200 --> 00:07:07,070
Tôi sẽ copy vào đây,

116
00:07:02,300 --> 00:07:07,070
để thấy được trong console.

117
00:07:07,520 --> 00:07:13,350
"Got the data , it is : " rồi đến nội dung

118
00:07:10,920 --> 00:07:15,960
nhận được từ internet. Ta xóa

119
00:07:13,350 --> 00:07:17,970
mấy dòng trống này đi cho

120
00:07:15,960 --> 00:07:21,120
dễ đọc. Và đây là cách bạn

121
00:07:17,970 --> 00:07:23,490
tải thông tin từ internet với

122
00:07:21,120 --> 00:07:25,740
XMLHttpRequest. Giờ đã có

123
00:07:23,490 --> 00:07:29,190
hàm downloadData rồi, ta có thể

124
00:07:25,740 --> 00:07:34,380
gọi nó bằng cách click chuột vào mouse area.

125
00:07:29,190 --> 00:07:36,690
Ta viết downloadData, và nhập

126
00:07:34,380 --> 00:07:38,960
URL vào. Bạn có thể nhập cái gì cũng được

127
00:07:36,690 --> 00:07:41,820
còn tôi thì sẽ dùng URL này,

128
00:07:38,960 --> 00:07:44,640
vì tôi thích thế, và ta sẽ

129
00:07:41,820 --> 00:07:47,550
dùng cái này để thử dùng

130
00:07:44,640 --> 00:07:51,000
REST API trong bài sau,

131
00:07:47,550 --> 00:07:53,640
nên tôi sẽ dùng cái này. Giờ tôi có thể chạy thử

132
00:07:51,000 --> 00:07:56,160
chương trình. Nó sẽ hiện ra một

133
00:07:53,640 --> 00:07:58,860
cửa sổ này đây, và có thể

134
00:07:56,160 --> 00:08:01,620
click vào đây được. Trong này ta có
to be clickable, Inside we're going to

135
00:07:58,860 --> 00:08:04,169
một đoạn text là "HTML Data

136
00:08:01,620 --> 00:08:05,910
here". Khi ta click vào mouse area, ta

137
00:08:04,169 --> 00:08:07,770
sẽ bắt đầu downlaod và

138
00:08:05,910 --> 00:08:10,710
sẽ thấy kết quả của download này.

139
00:08:07,770 --> 00:08:12,930
Kết quả sẽ là "Got the data",

140
00:08:10,710 --> 00:08:15,000
và ta nhận được dữ liệu, hoặc là

141
00:08:12,930 --> 00:08:17,330
"Something is wrong", ta sẽ

142
00:08:15,000 --> 00:08:21,210
thấy cá đó khi ta nhận được headers.

143
00:08:17,330 --> 00:08:24,810
Ta sẽ chạy thử chương trình cho bạn

144
00:08:21,210 --> 00:08:27,900
xem. Ta không thấy

145
00:08:24,810 --> 00:08:31,280
placeholder text đầu cả, nhưng hãy cứ thử click

146
00:08:27,900 --> 00:08:35,880
vào đây. Và bạn thấy là ta đã tải được

147
00:08:31,280 --> 00:08:38,219
dữ liệu HTML về rồi. Nếu bạn không chắc thì

148
00:08:35,880 --> 00:08:39,889
ta sẽ kiểm tra, ta sẽ vào

149
00:08:38,219 --> 00:08:45,899
đúng URL đó

150
00:08:39,889 --> 00:08:51,480
mà ta đã đặt vào đây. Đâu rồi?

151
00:08:45,899 --> 00:08:53,879
Đây rồi. Ta sẽ copy

152
00:08:51,480 --> 00:08:57,480
và mở nó trong trình duyệt. Mở đây rồi.

153
00:08:53,879 --> 00:09:00,360
Ta sẽ xem source code của

154
00:08:57,480 --> 00:09:03,209
trang này. Tôi sẽ kiểm tra nội dung mà

155
00:09:00,360 --> 00:09:07,170
ta nhận được trong chương trình của mình. Ta kéo xuống

156
00:09:03,209 --> 00:09:11,610
dưới cùng, bạn thấy ở dưới cùng là HTML

157
00:09:07,170 --> 00:09:15,239
body, ta có script, có số 497.

158
00:09:11,610 --> 00:09:17,399
Ta quay lại QT Creator xem, và

159
00:09:15,239 --> 00:09:20,549
ở dưới cùng, bạn thấy ta có đúng

160
00:09:17,399 --> 00:09:23,730
như thế, ta có html head body, có

161
00:09:20,549 --> 00:09:27,649
497 đây. Ta đã

162
00:09:23,730 --> 00:09:30,569
nhận được đúng dữ liệu với chương trình QML rồi.

163
00:09:27,649 --> 00:09:33,839
Ta hãy kéo lên và sẽ thấy

164
00:09:30,569 --> 00:09:36,449
thông báo headers received, ở đây,

165
00:09:33,839 --> 00:09:38,339
thông báo rằng ta đã Got the data và đến nội dung

166
00:09:36,449 --> 00:09:42,449
dữ liệu mà ta tải về. Đây là cách

167
00:09:38,339 --> 00:09:45,329
bạn download nội dung HTML bằng

168
00:09:42,449 --> 00:09:47,970
code QML. Nhưng thế này cũng chưa hay.

169
00:09:45,329 --> 00:09:53,669
Ta còn có thể lấy dữ liệu này,

170
00:09:47,970 --> 00:09:56,160
đặt nó vào trong text area này để

171
00:09:53,669 --> 00:09:58,829
người dùng đọc được. Ta cũng có thể

172
00:09:56,160 --> 00:10:01,529
thay đổi property này đây thành text,

173
00:09:58,829 --> 00:10:03,089
để ta thấy được text ở trong.  Giờ ta có thể

174
00:10:01,529 --> 00:10:05,489
quay lại hàm, và thay vì

175
00:10:03,089 --> 00:10:09,989
hiện nội dung ra console,

176
00:10:05,489 --> 00:10:12,980
ta viết textAreaID.text bằng

177
00:10:09,989 --> 00:10:21,019
nội dung tải được về.

178
00:10:12,980 --> 00:10:25,949
Ta copy vào, viết textAreaID.text

179
00:10:21,019 --> 00:10:27,989
bằng nội dùng nhận được

180
00:10:25,949 --> 00:10:29,759
từ internet. Bạn có thể đánh dâu chấm phẩy

181
00:10:27,989 --> 00:10:30,739
hoặc để không thế, đều được

182
00:10:29,759 --> 00:10:34,199
hết.

183
00:10:30,739 --> 00:10:37,379
Chạy thử nào. Okay,

184
00:10:34,199 --> 00:10:40,319
"HTML Data here", ta thấy rồi, click vào,

185
00:10:37,379 --> 00:10:44,069
bạn thấy là ta đã tải được dữ liệu

186
00:10:40,319 --> 00:10:47,610
từ internet rồi. Ok, hiển thị dữ liệu

187
00:10:44,069 --> 00:10:50,519
ra đây, ok. Tính năng không tốt bằng

188
00:10:47,610 --> 00:10:52,740
một trình duyệt tử tế, nhưng đủ để bạn thấy

189
00:10:50,519 --> 00:10:53,500
khả năng của code QML, và người dùng

190
00:10:52,740 --> 00:10:56,470
còn có thể

191
00:10:53,500 --> 00:10:59,500
đọc dữ liệu này một cách tử tế nếu bạn gói

192
00:10:56,470 --> 00:11:02,110
đoạn text area này trong một component tử tế.

193
00:10:59,500 --> 00:11:04,420
Người dùng sẽ có thể kéo xuống

194
00:11:02,110 --> 00:11:06,430
để đọc cả trang này, nhưng đây

195
00:11:04,420 --> 00:11:09,040
không phải là cách hay để hiển thị

196
00:11:06,430 --> 00:11:11,230
dữ liệu HTML trong chương trình của bạn. Tôi sẽ

197
00:11:09,040 --> 00:11:14,580
làm ví thử cho bạn xem

198
00:11:11,230 --> 00:11:17,260
khả năng của nó. Ta nhận được dữ liệu

199
00:11:14,580 --> 00:11:19,600
kiểu synchronous rồi. Giờ ta muốn làm y như thế

200
00:11:17,260 --> 00:11:21,790
nhưng kiểu asynchronous, để không phải

201
00:11:19,600 --> 00:11:24,370
đóng băng cả giao diện.

202
00:11:21,790 --> 00:11:26,980
Ta sẽ bỏ hàm mà

203
00:11:24,370 --> 00:11:30,190
ta đã viết này này đi, và ta

204
00:11:26,980 --> 00:11:34,360
viết lại, nhưng theo kiểu asynchronous.

205
00:11:30,190 --> 00:11:36,670
Ta copy đoạn này, đặt nó

206
00:11:34,360 --> 00:11:39,900
lên trên đây, và bắt đầu viết.

207
00:11:36,670 --> 00:11:44,170
Cách làm kiểu asynchronous

208
00:11:39,900 --> 00:11:46,090
với XMLHttpRequests cũng

209
00:11:44,170 --> 00:11:48,670
rất đơn giản, nhưng nếu bạn chưa quen

210
00:11:46,090 --> 00:11:50,740
thì syntax của callback

211
00:11:48,670 --> 00:11:52,930
có thể sẽ hơi bị lạ với bạn, nhưng đừng

212
00:11:50,740 --> 00:11:55,000
lo, cứ làm đi đã
be afraid, just focus on what we are

213
00:11:52,930 --> 00:11:56,410
rồi khi bạn xem

214
00:11:55,000 --> 00:11:58,780
chương trình chạy thử rồi thì sẽ

215
00:11:56,410 --> 00:12:05,200
hiểu thôi. Bạn viết

216
00:11:58,780 --> 00:12:07,480
funciton downloadData. Ta sẽ

217
00:12:05,200 --> 00:12:10,870
đưa URL vào, và đưa

218
00:12:07,480 --> 00:12:13,900
hàm callback vào nữa.

219
00:12:10,870 --> 00:12:16,180
Hàm này sẽ được gọi khi ta

220
00:12:13,900 --> 00:12:19,690
nhận được dữ liệu, và ta sẽ

221
00:12:16,180 --> 00:12:22,330
viết để gọi hàm này. Nghe thì có vẻ

222
00:12:19,690 --> 00:12:24,370
phức tạp nhưng bạn cứ từ từ đã,

223
00:12:22,330 --> 00:12:26,620
rồi sẽ hiểu cách dùng hàm này sau.

224
00:12:24,370 --> 00:12:29,080
Ta sẽ viết gần như tương tự

225
00:12:26,620 --> 00:12:31,060
như lúc download dữ liệu

226
00:12:29,080 --> 00:12:34,630
kiểu synchronous, ta sẽ copy

227
00:12:31,060 --> 00:12:39,250
cái chỗ bên trong này. Hình như hàm đó

228
00:12:34,630 --> 00:12:43,300
kết thúc ở đây... đúng rồi. Ta sẽ copy hết

229
00:12:39,250 --> 00:12:46,570
những gì bên trong hàm này, đặt nó vào

230
00:12:43,300 --> 00:12:49,210
trong hàm mới, nhưng sẽ hơi

231
00:12:46,570 --> 00:12:51,640
khác một chút sau khi nhận được dữ liệu rồi.

232
00:12:49,210 --> 00:12:56,230
Ta sẽ hiển thị ra ngoài

233
00:12:51,640 --> 00:12:59,410
text area. Ta có thể copy nguyên đoạn này

234
00:12:56,230 --> 00:13:01,959
vì nó cũng thế. Ta

235
00:12:59,410 --> 00:13:05,530
bỏ đoạn này ra, và

236
00:13:01,959 --> 00:13:07,420
gọi hàm callback với

237
00:13:05,530 --> 00:13:10,360
dữ liệu mà ta đã tải về.

238
00:13:07,420 --> 00:13:13,630
Như vậy là ta đã hiển thị dữ liệu này

239
00:13:10,360 --> 00:13:16,330
ra cho người dùng qua

240
00:13:13,630 --> 00:13:18,760
hàm này đây. Ta cũng sẽ gọi

241
00:13:16,330 --> 00:13:21,040
hàm callback với null

242
00:13:18,760 --> 00:13:24,970
nếu mà ta không nhận được gì từ

243
00:13:21,040 --> 00:13:27,550
request của mình. Ta viết call back, và nhập vào

244
00:13:24,970 --> 00:13:30,970
null, để hiển thị là có

245
00:13:27,550 --> 00:13:33,010
lỗi rồi. Ta cũng cần hiển thị khi

246
00:13:30,970 --> 00:13:41,740
thông báo nữa, nên ở đây ta viết

247
00:13:33,010 --> 00:13:48,600
console.log("Resource found"), và ở đây

248
00:13:41,740 --> 00:13:52,450
thì viết console.log("Resource

249
00:13:48,600 --> 00:13:55,390
not found") nếu không nhận được

250
00:13:52,450 --> 00:13:57,490
dữ liệu cần nhận. Bây giờ làm sao để gọi hàm này?

251
00:13:55,390 --> 00:14:00,790
Ta sẽ comment đoạn này ra vì ta

252
00:13:57,490 --> 00:14:05,980
đang làm kiểu asynchronous, và
we are going asynchronous, and we

253
00:14:00,790 --> 00:14:08,710
viết downloadData, okay, bạn

254
00:14:05,980 --> 00:14:15,220
nhập vào URL như bình thường, ta sẽ

255
00:14:08,710 --> 00:14:17,440
copy đoạn này và đặt nó vào tỏng, và cũng

256
00:14:15,220 --> 00:14:20,200
sẽ đặt hàm callback vào nữa. Tôi

257
00:14:17,440 --> 00:14:25,890
có thể đặt trực tiếp một hàm vào

258
00:14:20,200 --> 00:14:28,780
thế này. Cho nó một danh sách các parameter và

259
00:14:25,890 --> 00:14:31,420
viết phần thân của hàm thế này.

260
00:14:28,780 --> 00:14:34,600
Ở trong này tôi muốn làm gì cũng được

261
00:14:31,420 --> 00:14:36,580
với dữ liệu cũng mà tôi nhận được

262
00:14:34,600 --> 00:14:38,740
từ hàm này đây. Và hàm này

263
00:14:36,580 --> 00:14:41,620
đây là hàm callback. Ta

264
00:14:38,740 --> 00:14:44,320
định nghĩa nó ở đây, để thực hiện

265
00:14:41,620 --> 00:14:47,680
lệnh gì đó khi đã nhận được dữ liệu rồi. Bạn để ý

266
00:14:44,320 --> 00:14:49,990
rằng hàm này có parameter,

267
00:14:47,680 --> 00:14:52,030
nên sẽ phải nhận parameter vào. Ta có thể nhập vào

268
00:14:49,990 --> 00:14:55,210
một parameter, gọi nó là

269
00:14:52,030 --> 00:14:58,420
response, và thực hiện lệnh với

270
00:14:55,210 --> 00:14:59,920
response này. Ta sẽ không làm gì lằng nhằng

271
00:14:58,420 --> 00:15:02,560
với response nà cả,

272
00:14:59,920 --> 00:15:04,780
ta sẽ chỉ keierm tra xem nó có không phải

273
00:15:02,560 --> 00:15:08,710
null không, và cách kiểm tra là

274
00:15:04,780 --> 00:15:11,890
if (response) thế thôi, tức là nếu nó không null, ta

275
00:15:08,710 --> 00:15:15,630
sẽ đi xuống đây, còn nếu null thì
going to fall here, if it is null we're

276
00:15:11,890 --> 00:15:20,800
ta đi xuống đây. Okay, giả dụ là

277
00:15:15,630 --> 00:15:25,510
null. Nếu nó không null, ta sẽ làm y như

278
00:15:20,800 --> 00:15:28,300
ta làm ở trên này textAreaID... đặt

279
00:15:25,510 --> 00:15:33,190
response làm text, ta

280
00:15:28,300 --> 00:15:38,260
viết text.AreaID.text, đặt nó

281
00:15:33,190 --> 00:15:43,950
là response. Okay. Ta làm tương tự

282
00:15:38,260 --> 00:15:46,870
như thế ở dưới. textAreaID.text bằng

283
00:15:43,950 --> 00:15:51,279
lỗi gì đó, viết 'some error' ở đây,

284
00:15:46,870 --> 00:15:55,450
thế là được. Vậy là ta đã

285
00:15:51,279 --> 00:15:58,089
có thể gọi hàm kiểu asynchronous rồi, ok.

286
00:15:55,450 --> 00:16:00,339
Ta nhập vào cái URL, và hàm callback

287
00:15:58,089 --> 00:16:02,769
mà ta sẽ gọi lại

288
00:16:00,339 --> 00:16:06,700
khi ta tải được dữ liệu từ internet rồi.

289
00:16:02,769 --> 00:16:09,339
Xong rồi ta có thể tiếp tục

290
00:16:06,700 --> 00:16:11,529
khi việc download xong rồi, thì

291
00:16:09,339 --> 00:16:13,839
hàm này sẽ được gọi, và ta

292
00:16:11,529 --> 00:16:15,370
sẽ cập nhật giao diện. Khi bạn

293
00:16:13,839 --> 00:16:18,010
gọi hàm như thế này, bạn sẽ không

294
00:16:15,370 --> 00:16:20,440
không đóng băng cả UI, và đây là cách

295
00:16:18,010 --> 00:16:23,589
bạn nên dùng để tải dữ liệu từ

296
00:16:20,440 --> 00:16:28,180
internet. Ta hãy chạy thử xem

297
00:16:23,589 --> 00:16:31,690
nó hoạt động thế nào. Mm-hmm. Ta có

298
00:16:28,180 --> 00:16:34,290
dữ liệu HTML ở đây. Click vào, bạn thấy

299
00:16:31,690 --> 00:16:36,790
ta đã nhận được dữ liệu cũng như kiểu

300
00:16:34,290 --> 00:16:38,980
synchronous vậy, nhưng lần này thì hay hơn

301
00:16:36,790 --> 00:16:41,470
ở chỗ nó không đóng băng giao diện người dùng.

302
00:16:38,980 --> 00:16:43,870
Đây là cách bạn

303
00:16:41,470 --> 00:16:47,200
tải dữ liệu từ internet về với

304
00:16:43,870 --> 00:16:49,950
XMLHttpRequest và sử dụng dữ liệu đó trong

305
00:16:47,200 --> 00:16:53,110
chương trình QML. Bạn có thể làm

306
00:16:49,950 --> 00:16:55,959
kiểu synchronous như ở đây, hoặc có thể

307
00:16:53,110 --> 00:16:58,510
làm kiểu asynchronous để không đóng băng

308
00:16:55,959 --> 00:17:00,700
giao diện người dùng. Trong bài tới, ta sẽ

309
00:16:58,510 --> 00:17:05,459
học cách sử dụng REST API

310
00:17:00,700 --> 00:17:05,459
trong chương trình QML. Hẹn gặp lại các bạn.

